{"version":3,"sources":["../../../js/helpers/syllableCountIterator.js"],"names":["SyllableCountStep","require","isUndefined","forEach","SyllableCountIterator","config","countSteps","createSyllableCountSteps","deviations","vowels","prototype","syllableCounts","syllableCountStep","push","bind","getAvailableSyllableCountSteps","countSyllables","word","syllableCount","step","module","exports"],"mappings":"AAAA;;AACA,IAAIA,oBAAoBC,QAAQ,wBAAR,CAAxB;AACA,IAAIC,cAAcD,QAAQ,oBAAR,CAAlB;AACA,IAAIE,UAAUF,QAAQ,gBAAR,CAAd;AACA;;;;;;AAMA,IAAIG,wBAAwB,SAAxBA,qBAAwB,CAAUC,MAAV,EAAkB;AAC1C,SAAKC,UAAL,GAAkB,EAAlB;AACA,QAAI,CAACJ,YAAYG,MAAZ,CAAL,EAA0B;AACtB,aAAKE,wBAAL,CAA8BF,OAAOG,UAAP,CAAkBC,MAAhD;AACH;AACJ,CALD;AAMA;;;;;;AAMAL,sBAAsBM,SAAtB,CAAgCH,wBAAhC,GAA2D,UAAUI,cAAV,EAA0B;AACjFR,YAAQQ,cAAR,EAAwB,UAAUC,iBAAV,EAA6B;AACjD,aAAKN,UAAL,CAAgBO,IAAhB,CAAqB,IAAIb,iBAAJ,CAAsBY,iBAAtB,CAArB;AACH,KAFuB,CAEtBE,IAFsB,CAEjB,IAFiB,CAAxB;AAGH,CAJD;AAKA;;;;;AAKAV,sBAAsBM,SAAtB,CAAgCK,8BAAhC,GAAiE,YAAY;AACzE,WAAO,KAAKT,UAAZ;AACH,CAFD;AAGA;;;;;;AAMAF,sBAAsBM,SAAtB,CAAgCM,cAAhC,GAAiD,UAAUC,IAAV,EAAgB;AAC7D,QAAIC,gBAAgB,CAApB;AACAf,YAAQ,KAAKG,UAAb,EAAyB,UAAUa,IAAV,EAAgB;AACrCD,yBAAiBC,KAAKH,cAAL,CAAoBC,IAApB,CAAjB;AACH,KAFD;AAGA,WAAOC,aAAP;AACH,CAND;AAOAE,OAAOC,OAAP,GAAiBjB,qBAAjB;AACA","file":"syllableCountIterator.js","sourcesContent":["\"use strict\";\nvar SyllableCountStep = require(\"./syllableCountStep.js\");\nvar isUndefined = require(\"lodash/isUndefined\");\nvar forEach = require(\"lodash/forEach\");\n/**\n * Creates a syllable count iterator.\n *\n * @param {object} config The config object containing an array with syllable exclusions.\n * @constructor\n */\nvar SyllableCountIterator = function (config) {\n    this.countSteps = [];\n    if (!isUndefined(config)) {\n        this.createSyllableCountSteps(config.deviations.vowels);\n    }\n};\n/**\n * Creates a syllable count step object for each exclusion.\n *\n * @param {object} syllableCounts The object containing all exclusion syllables including the multipliers.\n * @returns {void}\n */\nSyllableCountIterator.prototype.createSyllableCountSteps = function (syllableCounts) {\n    forEach(syllableCounts, function (syllableCountStep) {\n        this.countSteps.push(new SyllableCountStep(syllableCountStep));\n    }.bind(this));\n};\n/**\n * Returns all available count steps.\n *\n * @returns {Array} All available count steps.\n */\nSyllableCountIterator.prototype.getAvailableSyllableCountSteps = function () {\n    return this.countSteps;\n};\n/**\n * Counts the syllables for all the steps and returns the total syllable count.\n *\n * @param {String} word The word to count syllables in.\n * @returns {number} The number of syllables found based on exclusions.\n */\nSyllableCountIterator.prototype.countSyllables = function (word) {\n    var syllableCount = 0;\n    forEach(this.countSteps, function (step) {\n        syllableCount += step.countSyllables(word);\n    });\n    return syllableCount;\n};\nmodule.exports = SyllableCountIterator;\n//# sourceMappingURL=syllableCountIterator.js.map"]}