{"version":3,"sources":["../../../js/helpers/types.js"],"names":["getType","subject","Array","isArray","isSameType","expectedType","passedType","module","exports"],"mappings":"AAAA;AACA;;;;;;;;;AAMA,IAAIA,UAAU,SAAVA,OAAU,CAAUC,OAAV,EAAmB;AAC7B,QAAIC,MAAMC,OAAN,CAAcF,OAAd,CAAJ,EAA4B;AACxB,eAAO,OAAP;AACH;AACD,kBAAcA,OAAd,yCAAcA,OAAd;AACH,CALD;AAMA;;;;;;;AAOA,IAAIG,aAAa,SAAbA,UAAa,CAAUH,OAAV,EAAmBI,YAAnB,EAAiC;AAC9C,QAAIC,aAAaN,QAAQC,OAAR,CAAjB;AACA,WAAOK,eAAeD,YAAtB;AACH,CAHD;AAIAE,OAAOC,OAAP,GAAiB;AACbR,aAASA,OADI;AAEbI,gBAAYA;AAFC,CAAjB;AAIA","file":"types.js","sourcesContent":["\"use strict\";\n/**\n * Gets the parsed type name of subjects.\n *\n * @param {array|object|string|number} subject The subject to get the parsed type from.\n * @returns {string} The parsed type name.\n */\nvar getType = function (subject) {\n    if (Array.isArray(subject)) {\n        return \"array\";\n    }\n    return typeof subject;\n};\n/**\n * Validates the type of subjects. Throws an error if the type is invalid.\n *\n * @param {object} subject The object containing all subjects.\n * @param {string} expectedType The expected type.\n * @returns {boolean} Returns true if types matches expected type. Otherwise returns false.\n */\nvar isSameType = function (subject, expectedType) {\n    var passedType = getType(subject);\n    return passedType === expectedType;\n};\nmodule.exports = {\n    getType: getType,\n    isSameType: isSameType,\n};\n//# sourceMappingURL=types.js.map"]}