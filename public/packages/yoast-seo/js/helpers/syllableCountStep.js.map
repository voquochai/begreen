{"version":3,"sources":["../../../js/helpers/syllableCountStep.js"],"names":["isUndefined","require","arrayToRegex","SyllableCountStep","syllableRegex","_hasRegex","_regex","_multiplier","createRegex","prototype","hasRegex","fragments","countModifier","getRegex","countSyllables","word","match","length","module","exports"],"mappings":"AAAA;;AACA,IAAIA,cAAcC,QAAQ,oBAAR,CAAlB;AACA,IAAIC,eAAeD,QAAQ,6CAAR,CAAnB;AACA;;;;;;AAMA,IAAIE,oBAAoB,SAApBA,iBAAoB,CAAUC,aAAV,EAAyB;AAC7C,SAAKC,SAAL,GAAiB,KAAjB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,WAAL,CAAiBJ,aAAjB;AACH,CALD;AAMA;;;;;AAKAD,kBAAkBM,SAAlB,CAA4BC,QAA5B,GAAuC,YAAY;AAC/C,WAAO,KAAKL,SAAZ;AACH,CAFD;AAGA;;;;;;AAMAF,kBAAkBM,SAAlB,CAA4BD,WAA5B,GAA0C,UAAUJ,aAAV,EAAyB;AAC/D,QAAI,CAACJ,YAAYI,aAAZ,CAAD,IAA+B,CAACJ,YAAYI,cAAcO,SAA1B,CAApC,EAA0E;AACtE,aAAKN,SAAL,GAAiB,IAAjB;AACA,aAAKC,MAAL,GAAcJ,aAAaE,cAAcO,SAA3B,EAAsC,IAAtC,CAAd;AACA,aAAKJ,WAAL,GAAmBH,cAAcQ,aAAjC;AACH;AACJ,CAND;AAOA;;;;;AAKAT,kBAAkBM,SAAlB,CAA4BI,QAA5B,GAAuC,YAAY;AAC/C,WAAO,KAAKP,MAAZ;AACH,CAFD;AAGA;;;;;;;AAOAH,kBAAkBM,SAAlB,CAA4BK,cAA5B,GAA6C,UAAUC,IAAV,EAAgB;AACzD,QAAI,KAAKV,SAAT,EAAoB;AAChB,YAAIW,QAAQD,KAAKC,KAAL,CAAW,KAAKV,MAAhB,KAA2B,EAAvC;AACA,eAAOU,MAAMC,MAAN,GAAe,KAAKV,WAA3B;AACH;AACD,WAAO,CAAP;AACH,CAND;AAOAW,OAAOC,OAAP,GAAiBhB,iBAAjB;AACA","file":"syllableCountStep.js","sourcesContent":["\"use strict\";\nvar isUndefined = require(\"lodash/isUndefined\");\nvar arrayToRegex = require(\"../stringProcessing/createRegexFromArray.js\");\n/**\n * Constructs a language syllable regex that contains a regex for matching syllable exclusion.\n *\n * @param {object} syllableRegex The object containing the syllable exclusions.\n * @constructor\n */\nvar SyllableCountStep = function (syllableRegex) {\n    this._hasRegex = false;\n    this._regex = \"\";\n    this._multiplier = \"\";\n    this.createRegex(syllableRegex);\n};\n/**\n * Returns if a valid regex has been set.\n *\n * @returns {boolean} True if a regex has been set, false if not.\n */\nSyllableCountStep.prototype.hasRegex = function () {\n    return this._hasRegex;\n};\n/**\n * Creates a regex based on the given syllable exclusions, and sets the multiplier to use.\n *\n * @param {object} syllableRegex The object containing the syllable exclusions and multiplier.\n * @returns {void}\n */\nSyllableCountStep.prototype.createRegex = function (syllableRegex) {\n    if (!isUndefined(syllableRegex) && !isUndefined(syllableRegex.fragments)) {\n        this._hasRegex = true;\n        this._regex = arrayToRegex(syllableRegex.fragments, true);\n        this._multiplier = syllableRegex.countModifier;\n    }\n};\n/**\n * Returns the stored regular expression.\n *\n * @returns {RegExp} The stored regular expression.\n */\nSyllableCountStep.prototype.getRegex = function () {\n    return this._regex;\n};\n/**\n * Matches syllable exclusions in a given word and the returns the number found multiplied with the\n * given multiplier.\n *\n * @param {String} word The word to match for syllable exclusions.\n * @returns {number} The amount of syllables found.\n */\nSyllableCountStep.prototype.countSyllables = function (word) {\n    if (this._hasRegex) {\n        var match = word.match(this._regex) || [];\n        return match.length * this._multiplier;\n    }\n    return 0;\n};\nmodule.exports = SyllableCountStep;\n//# sourceMappingURL=syllableCountStep.js.map"]}