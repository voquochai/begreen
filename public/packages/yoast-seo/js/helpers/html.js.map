{"version":3,"sources":["../../../js/helpers/html.js"],"names":["blockElements","inlineElements","blockElementsRegex","RegExp","join","inlineElementsRegex","blockElementStartRegex","blockElementEndRegex","inlineElementStartRegex","inlineElementEndRegex","otherElementStartRegex","otherElementEndRegex","contentRegex","greaterThanContentRegex","commentRegex","core","require","forEach","memoize","tokens","htmlBlockTokenizer","createTokenizer","token","push","addRule","isBlockElement","htmlElementName","test","isInlineElement","getBlocks","text","blocks","depth","blockStartTag","currentBlock","blockEndTag","replace","onText","end","i","nextToken","type","src","trim","module","exports"],"mappings":"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","file":"html.js","sourcesContent":["\"use strict\";\nvar blockElements = [\"address\", \"article\", \"aside\", \"blockquote\", \"canvas\", \"dd\", \"div\", \"dl\", \"fieldset\", \"figcaption\",\n    \"figure\", \"footer\", \"form\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"header\", \"hgroup\", \"hr\", \"li\", \"main\", \"nav\",\n    \"noscript\", \"ol\", \"output\", \"p\", \"pre\", \"section\", \"table\", \"tfoot\", \"ul\", \"video\"];\nvar inlineElements = [\"b\", \"big\", \"i\", \"small\", \"tt\", \"abbr\", \"acronym\", \"cite\", \"code\", \"dfn\", \"em\", \"kbd\", \"strong\",\n    \"samp\", \"time\", \"var\", \"a\", \"bdo\", \"br\", \"img\", \"map\", \"object\", \"q\", \"script\", \"span\", \"sub\", \"sup\", \"button\",\n    \"input\", \"label\", \"select\", \"textarea\"];\nvar blockElementsRegex = new RegExp(\"^(\" + blockElements.join(\"|\") + \")$\", \"i\");\nvar inlineElementsRegex = new RegExp(\"^(\" + inlineElements.join(\"|\") + \")$\", \"i\");\nvar blockElementStartRegex = new RegExp(\"^<(\" + blockElements.join(\"|\") + \")[^>]*?>$\", \"i\");\nvar blockElementEndRegex = new RegExp(\"^</(\" + blockElements.join(\"|\") + \")[^>]*?>$\", \"i\");\nvar inlineElementStartRegex = new RegExp(\"^<(\" + inlineElements.join(\"|\") + \")[^>]*>$\", \"i\");\nvar inlineElementEndRegex = new RegExp(\"^</(\" + inlineElements.join(\"|\") + \")[^>]*>$\", \"i\");\nvar otherElementStartRegex = /^<([^>\\s\\/]+)[^>]*>$/;\nvar otherElementEndRegex = /^<\\/([^>\\s]+)[^>]*>$/;\nvar contentRegex = /^[^<]+$/;\nvar greaterThanContentRegex = /^<[^><]*$/;\nvar commentRegex = /<!--(.|[\\r\\n])*?-->/g;\nvar core = require(\"tokenizer2/core\");\nvar forEach = require(\"lodash/forEach\");\nvar memoize = require(\"lodash/memoize\");\nvar tokens = [];\nvar htmlBlockTokenizer;\n/**\n * Creates a tokenizer to tokenize HTML into blocks.\n *\n * @returns {void}\n */\nfunction createTokenizer() {\n    tokens = [];\n    htmlBlockTokenizer = core(function (token) {\n        tokens.push(token);\n    });\n    htmlBlockTokenizer.addRule(contentRegex, \"content\");\n    htmlBlockTokenizer.addRule(greaterThanContentRegex, \"greater-than-sign-content\");\n    htmlBlockTokenizer.addRule(blockElementStartRegex, \"block-start\");\n    htmlBlockTokenizer.addRule(blockElementEndRegex, \"block-end\");\n    htmlBlockTokenizer.addRule(inlineElementStartRegex, \"inline-start\");\n    htmlBlockTokenizer.addRule(inlineElementEndRegex, \"inline-end\");\n    htmlBlockTokenizer.addRule(otherElementStartRegex, \"other-element-start\");\n    htmlBlockTokenizer.addRule(otherElementEndRegex, \"other-element-end\");\n}\n/**\n * Returns whether or not the given element name is a block element.\n *\n * @param {string} htmlElementName The name of the HTML element.\n * @returns {boolean} Whether or not it is a block element.\n */\nfunction isBlockElement(htmlElementName) {\n    return blockElementsRegex.test(htmlElementName);\n}\n/**\n * Returns whether or not the given element name is an inline element.\n *\n * @param {string} htmlElementName The name of the HTML element.\n * @returns {boolean} Whether or not it is an inline element.\n */\nfunction isInlineElement(htmlElementName) {\n    return inlineElementsRegex.test(htmlElementName);\n}\n/**\n * Splits a text into blocks based on HTML block elements.\n *\n * @param {string} text The text to split.\n * @returns {Array} A list of blocks based on HTML block elements.\n */\nfunction getBlocks(text) {\n    var blocks = [], depth = 0, blockStartTag = \"\", currentBlock = \"\", blockEndTag = \"\";\n    // Remove all comments because it is very hard to tokenize them.\n    text = text.replace(commentRegex, \"\");\n    createTokenizer();\n    htmlBlockTokenizer.onText(text);\n    htmlBlockTokenizer.end();\n    forEach(tokens, function (token, i) {\n        var nextToken = tokens[i + 1];\n        switch (token.type) {\n            case \"content\":\n            case \"greater-than-sign-content\":\n            case \"inline-start\":\n            case \"inline-end\":\n            case \"other-tag\":\n            case \"other-element-start\":\n            case \"other-element-end\":\n            case \"greater than sign\":\n                if (!nextToken || (depth === 0 && (nextToken.type === \"block-start\" || nextToken.type === \"block-end\"))) {\n                    currentBlock += token.src;\n                    blocks.push(currentBlock);\n                    blockStartTag = \"\";\n                    currentBlock = \"\";\n                    blockEndTag = \"\";\n                }\n                else {\n                    currentBlock += token.src;\n                }\n                break;\n            case \"block-start\":\n                if (depth !== 0) {\n                    if (currentBlock.trim() !== \"\") {\n                        blocks.push(currentBlock);\n                    }\n                    currentBlock = \"\";\n                    blockEndTag = \"\";\n                }\n                depth++;\n                blockStartTag = token.src;\n                break;\n            case \"block-end\":\n                depth--;\n                blockEndTag = token.src;\n                /*\n                 * We try to match the most deep blocks so discard any other blocks that have been started but not\n                 * finished.\n                 */\n                if (\"\" !== blockStartTag && \"\" !== blockEndTag) {\n                    blocks.push(blockStartTag + currentBlock + blockEndTag);\n                }\n                else if (\"\" !== currentBlock.trim()) {\n                    blocks.push(currentBlock);\n                }\n                blockStartTag = \"\";\n                currentBlock = \"\";\n                blockEndTag = \"\";\n                break;\n        }\n        // Handles HTML with too many closing tags.\n        if (depth < 0) {\n            depth = 0;\n        }\n    });\n    return blocks;\n}\nmodule.exports = {\n    blockElements: blockElements,\n    inlineElements: inlineElements,\n    isBlockElement: isBlockElement,\n    isInlineElement: isInlineElement,\n    getBlocks: memoize(getBlocks),\n};\n//# sourceMappingURL=html.js.map"]}