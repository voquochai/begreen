{"version":3,"sources":["../../js/researcher.js"],"names":["Object","defineProperty","exports","value","sentences_1","require","merge","InvalidTypeError","MissingArgument","isUndefined","isEmpty","wordCountInText","getLinkStatistics","linkCount","getLinks","urlLength","findKeywordInPageTitle","matchKeywordInSubheadings","getKeywordDensity","stopWordsInKeyword","stopWordsInUrl","calculateFleschReading","metaDescriptionLength","imageCount","altTagCount","keyphraseLength","metaDescriptionKeyword","keywordCountInUrl","findKeywordInFirstParagraph","pageTitleWidth","wordComplexity","getParagraphLength","countSentencesFromText","countSentencesFromDescription","getSubheadingTextLengths","findTransitionWords","passiveVoice","getSentenceBeginnings","relevantWords","Researcher","paper","setPaper","defaultResearches","firstParagraph","sentences","default","customResearches","prototype","addResearch","name","research","Function","hasResearch","keys","getAvailableResearches","filter","length","getResearch","module"],"mappings":"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","file":"researcher.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst sentences_1 = require(\"./researches/sentences\");\nvar merge = require(\"lodash/merge\");\nvar InvalidTypeError = require(\"./errors/invalidType\");\nvar MissingArgument = require(\"./errors/missingArgument\");\nvar isUndefined = require(\"lodash/isUndefined\");\nvar isEmpty = require(\"lodash/isEmpty\");\n// Researches\nvar wordCountInText = require(\"./researches/wordCountInText.js\");\nvar getLinkStatistics = require(\"./researches/getLinkStatistics.js\");\nvar linkCount = require(\"./researches/countLinks.js\");\nvar getLinks = require(\"./researches/getLinks.js\");\nvar urlLength = require(\"./researches/urlIsTooLong.js\");\nvar findKeywordInPageTitle = require(\"./researches/findKeywordInPageTitle.js\");\nvar matchKeywordInSubheadings = require(\"./researches/matchKeywordInSubheadings.js\");\nvar getKeywordDensity = require(\"./researches/getKeywordDensity.js\");\nvar stopWordsInKeyword = require(\"./researches/stopWordsInKeyword\");\nvar stopWordsInUrl = require(\"./researches/stopWordsInUrl\");\nvar calculateFleschReading = require(\"./researches/calculateFleschReading.js\");\nvar metaDescriptionLength = require(\"./researches/metaDescriptionLength.js\");\nvar imageCount = require(\"./researches/imageCountInText.js\");\nvar altTagCount = require(\"./researches/imageAltTags.js\");\nvar keyphraseLength = require(\"./researches/keyphraseLength\");\nvar metaDescriptionKeyword = require(\"./researches/metaDescriptionKeyword.js\");\nvar keywordCountInUrl = require(\"./researches/keywordCountInUrl\");\nvar findKeywordInFirstParagraph = require(\"./researches/findKeywordInFirstParagraph.js\");\nvar pageTitleWidth = require(\"./researches/pageTitleWidth.js\");\nvar wordComplexity = require(\"./researches/getWordComplexity.js\");\nvar getParagraphLength = require(\"./researches/getParagraphLength.js\");\nvar countSentencesFromText = require(\"./researches/countSentencesFromText.js\");\nvar countSentencesFromDescription = require(\"./researches/countSentencesFromDescription.js\");\nvar getSubheadingTextLengths = require(\"./researches/getSubheadingTextLengths.js\");\nvar findTransitionWords = require(\"./researches/findTransitionWords.js\");\nvar passiveVoice = require(\"./researches/getPassiveVoice.js\");\nvar getSentenceBeginnings = require(\"./researches/getSentenceBeginnings.js\");\nvar relevantWords = require(\"./researches/relevantWords\");\n/**\n * This contains all possible, default researches.\n * @param {Paper} paper The Paper object that is needed within the researches.\n * @constructor\n * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.\n */\nvar Researcher = function (paper) {\n    this.setPaper(paper);\n    this.defaultResearches = {\n        urlLength: urlLength,\n        wordCountInText: wordCountInText,\n        findKeywordInPageTitle: findKeywordInPageTitle,\n        calculateFleschReading: calculateFleschReading,\n        getLinkStatistics: getLinkStatistics,\n        getLinks: getLinks,\n        linkCount: linkCount,\n        imageCount: imageCount,\n        altTagCount: altTagCount,\n        matchKeywordInSubheadings: matchKeywordInSubheadings,\n        getKeywordDensity: getKeywordDensity,\n        stopWordsInKeyword: stopWordsInKeyword,\n        stopWordsInUrl: stopWordsInUrl,\n        metaDescriptionLength: metaDescriptionLength,\n        keyphraseLength: keyphraseLength,\n        keywordCountInUrl: keywordCountInUrl,\n        firstParagraph: findKeywordInFirstParagraph,\n        metaDescriptionKeyword: metaDescriptionKeyword,\n        pageTitleWidth: pageTitleWidth,\n        wordComplexity: wordComplexity,\n        getParagraphLength: getParagraphLength,\n        countSentencesFromText: countSentencesFromText,\n        countSentencesFromDescription: countSentencesFromDescription,\n        getSubheadingTextLengths: getSubheadingTextLengths,\n        findTransitionWords: findTransitionWords,\n        passiveVoice: passiveVoice,\n        getSentenceBeginnings: getSentenceBeginnings,\n        relevantWords: relevantWords,\n        sentences: sentences_1.default,\n    };\n    this.customResearches = {};\n};\n/**\n * Set the Paper associated with the Researcher.\n * @param {Paper} paper The Paper to use within the Researcher\n * @throws {InvalidTypeError} Parameter needs to be an instance of the Paper object.\n * @returns {void}\n */\nResearcher.prototype.setPaper = function (paper) {\n    this.paper = paper;\n};\n/**\n * Add a custom research that will be available within the Researcher.\n * @param {string} name A name to reference the research by.\n * @param {function} research The function to be added to the Researcher.\n * @throws {MissingArgument} Research name cannot be empty.\n * @throws {InvalidTypeError} The research requires a valid Function callback.\n * @returns {void}\n */\nResearcher.prototype.addResearch = function (name, research) {\n    if (isUndefined(name) || isEmpty(name)) {\n        throw new MissingArgument(\"Research name cannot be empty\");\n    }\n    if (!(research instanceof Function)) {\n        throw new InvalidTypeError(\"The research requires a Function callback.\");\n    }\n    this.customResearches[name] = research;\n};\n/**\n * Check wheter or not the research is known by the Researcher.\n * @param {string} name The name to reference the research by.\n * @returns {boolean} Whether or not the research is known by the Researcher\n */\nResearcher.prototype.hasResearch = function (name) {\n    return Object.keys(this.getAvailableResearches()).filter(function (research) {\n        return research === name;\n    }).length > 0;\n};\n/**\n * Return all available researches.\n * @returns {Object} An object containing all available researches.\n */\nResearcher.prototype.getAvailableResearches = function () {\n    return merge(this.defaultResearches, this.customResearches);\n};\n/**\n * Return the Research by name.\n * @param {string} name The name to reference the research by.\n * @returns {*} Returns the result of the research or false if research does not exist.\n * @throws {MissingArgument} Research name cannot be empty.\n */\nResearcher.prototype.getResearch = function (name) {\n    if (isUndefined(name) || isEmpty(name)) {\n        throw new MissingArgument(\"Research name cannot be empty\");\n    }\n    if (!this.hasResearch(name)) {\n        return false;\n    }\n    return this.getAvailableResearches()[name](this.paper, this);\n};\nmodule.exports = Researcher;\n//# sourceMappingURL=researcher.js.map"]}