{"version":3,"sources":["../../../../js/assessments/seo/textCompetingLinksAssessment.js"],"names":["AssessmentResult","require","Mark","addMark","map","calculateLinkCountResult","linkStatistics","i18n","keyword","totalKeyword","score","hasMarks","text","dgettext","textHasCompetingLinksAssessment","paper","researcher","linkCount","getResearch","linkCountResult","assessmentResult","setScore","setText","setHasMarks","competingLinkMarker","competingLinks","matchedAnchors","matchedAnchor","original","marked","module","exports","identifier","getResult","isApplicable","hasText","hasKeyword","getMarks"],"mappings":"AAAA;;AACA,IAAIA,mBAAmBC,QAAQ,kCAAR,CAAvB;AACA,IAAIC,OAAOD,QAAQ,sBAAR,CAAX;AACA,IAAIE,UAAUF,QAAQ,0BAAR,CAAd;AACA,IAAIG,MAAMH,QAAQ,YAAR,CAAV;AACA;;;;;;;AAOA,IAAII,2BAA2B,SAA3BA,wBAA2B,CAAUC,cAAV,EAA0BC,IAA1B,EAAgC;AAC3D,QAAID,eAAeE,OAAf,CAAuBC,YAAvB,GAAsC,CAA1C,EAA6C;AACzC,eAAO;AACHC,mBAAO,CADJ;AAEHC,sBAAU,IAFP;AAGHC,kBAAML,KAAKM,QAAL,CAAc,kBAAd,EAAkC,4FACpC,6DADE;AAHH,SAAP;AAMH;AACD,WAAO,EAAP;AACH,CAVD;AAWA;;;;;;;;AAQA,IAAIC,kCAAkC,SAAlCA,+BAAkC,CAAUC,KAAV,EAAiBC,UAAjB,EAA6BT,IAA7B,EAAmC;AACrE,QAAIU,YAAYD,WAAWE,WAAX,CAAuB,mBAAvB,CAAhB;AACA,QAAIC,kBAAkBd,yBAAyBY,SAAzB,EAAoCV,IAApC,CAAtB;AACA,QAAIa,mBAAmB,IAAIpB,gBAAJ,EAAvB;AACAoB,qBAAiBC,QAAjB,CAA0BF,gBAAgBT,KAA1C;AACAU,qBAAiBE,OAAjB,CAAyBH,gBAAgBP,IAAzC;AACAQ,qBAAiBG,WAAjB,CAA6BJ,gBAAgBR,QAA7C;AACA,WAAOS,gBAAP;AACH,CARD;AASA;;;;;;;AAOA,IAAII,sBAAsB,SAAtBA,mBAAsB,CAAUT,KAAV,EAAiBC,UAAjB,EAA6B;AACnD,QAAIS,iBAAiBT,WAAWE,WAAX,CAAuB,mBAAvB,CAArB;AACA,WAAOd,IAAIqB,eAAejB,OAAf,CAAuBkB,cAA3B,EAA2C,UAAUC,aAAV,EAAyB;AACvE,eAAO,IAAIzB,IAAJ,CAAS;AACZ0B,sBAAUD,aADE;AAEZE,oBAAQ1B,QAAQwB,aAAR;AAFI,SAAT,CAAP;AAIH,KALM,CAAP;AAMH,CARD;AASAG,OAAOC,OAAP,GAAiB;AACbC,gBAAY,oBADC;AAEbC,eAAWnB,+BAFE;AAGboB,kBAAc,sBAAUnB,KAAV,EAAiB;AAC3B,eAAOA,MAAMoB,OAAN,MAAmBpB,MAAMqB,UAAN,EAA1B;AACH,KALY;AAMbC,cAAUb;AANG,CAAjB;AAQA","file":"textCompetingLinksAssessment.js","sourcesContent":["\"use strict\";\nvar AssessmentResult = require(\"../../values/AssessmentResult.js\");\nvar Mark = require(\"../../values/Mark.js\");\nvar addMark = require(\"../../markers/addMark.js\");\nvar map = require(\"lodash/map\");\n/**\n * Returns a score and text based on the number of links.\n *\n * @param {object} linkStatistics The object with all linkstatistics.\n * @param {object} i18n The object used for translations\n * @returns {object} resultObject with score and text\n */\nvar calculateLinkCountResult = function (linkStatistics, i18n) {\n    if (linkStatistics.keyword.totalKeyword > 0) {\n        return {\n            score: 2,\n            hasMarks: true,\n            text: i18n.dgettext(\"js-text-analysis\", \"You\\'re linking to another page with the focus keyword you want this page to rank for. \" +\n                \"Consider changing that if you truly want this page to rank.\"),\n        };\n    }\n    return {};\n};\n/**\n * Runs the linkCount module, based on this returns an assessment result with score.\n *\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations\n * @returns {object} the Assessmentresult\n */\nvar textHasCompetingLinksAssessment = function (paper, researcher, i18n) {\n    var linkCount = researcher.getResearch(\"getLinkStatistics\");\n    var linkCountResult = calculateLinkCountResult(linkCount, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(linkCountResult.score);\n    assessmentResult.setText(linkCountResult.text);\n    assessmentResult.setHasMarks(linkCountResult.hasMarks);\n    return assessmentResult;\n};\n/**\n * Mark the anchors.\n *\n * @param {Paper} paper The paper to use for the marking.\n * @param {Researcher} researcher The researcher to use.\n * @returns {Array} Array with all the marked anchors.\n */\nvar competingLinkMarker = function (paper, researcher) {\n    var competingLinks = researcher.getResearch(\"getLinkStatistics\");\n    return map(competingLinks.keyword.matchedAnchors, function (matchedAnchor) {\n        return new Mark({\n            original: matchedAnchor,\n            marked: addMark(matchedAnchor),\n        });\n    });\n};\nmodule.exports = {\n    identifier: \"textCompetingLinks\",\n    getResult: textHasCompetingLinksAssessment,\n    isApplicable: function (paper) {\n        return paper.hasText() && paper.hasKeyword();\n    },\n    getMarks: competingLinkMarker,\n};\n//# sourceMappingURL=textCompetingLinksAssessment.js.map"]}