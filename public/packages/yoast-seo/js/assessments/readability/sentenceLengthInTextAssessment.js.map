{"version":3,"sources":["../../../../js/assessments/readability/sentenceLengthInTextAssessment.js"],"names":["AssessmentResult","require","Assessment","countTooLongSentences","formatNumber","inRange","inRangeEndInclusive","stripTags","stripIncompleteTags","Mark","addMark","map","merge","SentenceLengthInTextAssessment","config","defaultConfig","recommendedWordCount","slightlyTooMany","farTooMany","identifier","_config","paper","researcher","i18n","sentences","getResearch","percentage","calculatePercentage","score","calculateScore","assessmentResult","setScore","setText","translateScore","setHasMarks","hasText","sentenceCount","sentenceObjects","getTooLongSentences","sentenceObject","sentence","original","marked","sentenceLengthURL","sprintf","dgettext","length","tooLongTotal","module","exports"],"mappings":"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","file":"sentenceLengthInTextAssessment.js","sourcesContent":["\"use strict\";\nlet AssessmentResult = require(\"../../values/AssessmentResult.js\");\nlet Assessment = require(\"../../assessment.js\");\nlet countTooLongSentences = require(\"../../assessmentHelpers/checkForTooLongSentences.js\");\nlet formatNumber = require(\"../../helpers/formatNumber.js\");\nlet inRange = require(\"../../helpers/inRange.js\").inRangeEndInclusive;\nlet stripTags = require(\"../../stringProcessing/stripHTMLTags\").stripIncompleteTags;\nlet Mark = require(\"../../values/Mark.js\");\nlet addMark = require(\"../../markers/addMark.js\");\nlet map = require(\"lodash/map\");\nlet merge = require(\"lodash/merge\");\n/**\n * Represents the assessment that will calculate the length of sentences in the text.\n */\nclass SentenceLengthInTextAssessment extends Assessment {\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {object} config The configuration to use.\n     * @returns {void}\n     */\n    constructor(config = {}) {\n        super();\n        let defaultConfig = {\n            recommendedWordCount: 20,\n            slightlyTooMany: 25,\n            farTooMany: 30,\n        };\n        this.identifier = \"textSentenceLength\";\n        this._config = merge(defaultConfig, config);\n    }\n    /**\n     * Scores the percentage of sentences including more than the recommended number of words.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {object} i18n The object used for translations.\n     * @returns {AssessmentResult} The Assessment result.\n     */\n    getResult(paper, researcher, i18n) {\n        let sentences = researcher.getResearch(\"countSentencesFromText\");\n        let percentage = this.calculatePercentage(sentences);\n        let score = this.calculateScore(percentage);\n        let assessmentResult = new AssessmentResult();\n        assessmentResult.setScore(score);\n        assessmentResult.setText(this.translateScore(score, percentage, i18n));\n        assessmentResult.setHasMarks((percentage > 0));\n        return assessmentResult;\n    }\n    /**\n     * Checks whether the paper has text.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     *\n     * @returns {boolean} True when there is text.\n     */\n    isApplicable(paper) {\n        return paper.hasText();\n    }\n    /**\n     * Mark the sentences.\n     *\n     * @param {Paper} paper The paper to use for the marking.\n     * @param {Researcher} researcher The researcher to use.\n     *\n     * @returns {Array} Array with all the marked sentences.\n     */\n    getMarks(paper, researcher) {\n        let sentenceCount = researcher.getResearch(\"countSentencesFromText\");\n        let sentenceObjects = this.getTooLongSentences(sentenceCount);\n        return map(sentenceObjects, function (sentenceObject) {\n            let sentence = stripTags(sentenceObject.sentence);\n            return new Mark({\n                original: sentence,\n                marked: addMark(sentence),\n            });\n        });\n    }\n    /**\n     * Translates the score to a message the user can understand.\n     *\n     * @param {number} score The score.\n     * @param {number} percentage The percentage.\n     * @param {object} i18n The object used for translations.\n     *\n     * @returns {string} A string.\n     */\n    translateScore(score, percentage, i18n) {\n        let sentenceLengthURL = \"<a href='https://yoa.st/short-sentences' target='_blank'>\";\n        if (score >= 7) {\n            return i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \n            // Translators: %1$d expands to percentage of sentences, %2$s expands to a link on yoast.com,\n            // %3$s expands to the recommended maximum sentence length, %4$s expands to the anchor end tag,\n            // %5$s expands to the recommended maximum percentage.\n            \"%1$s of the sentences contain %2$smore than %3$s words%4$s, which is less than or equal to the recommended maximum of %5$s.\"), percentage + \"%\", sentenceLengthURL, this._config.recommendedWordCount, \"</a>\", this._config.slightlyTooMany + \"%\");\n        }\n        return i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \n        // Translators: %1$d expands to percentage of sentences, %2$s expands to a link on yoast.com,\n        // %3$s expands to the recommended maximum sentence length, %4$s expands to the anchor end tag,\n        // %5$s expands to the recommended maximum percentage.\n        \"%1$s of the sentences contain %2$smore than %3$s words%4$s, which is more than the recommended maximum of %5$s. \" +\n            \"Try to shorten the sentences.\"), percentage + \"%\", sentenceLengthURL, this._config.recommendedWordCount, \"</a>\", this._config.slightlyTooMany + \"%\");\n    }\n    /**\n     * Calculates the percentage of sentences that are too long.\n     *\n     * @param {Array} sentences The sentences to calculate the percentage for.\n     * @returns {number} The calculates percentage of too long sentences.\n     */\n    calculatePercentage(sentences) {\n        let percentage = 0;\n        if (sentences.length !== 0) {\n            let tooLongTotal = this.countTooLongSentences(sentences);\n            percentage = formatNumber((tooLongTotal / sentences.length) * 100);\n        }\n        return percentage;\n    }\n    /**\n     * Calculates the score for the given percentage.\n     *\n     * @param {number} percentage The percentage to calculate the score for.\n     * @returns {number} The calculated score.\n     */\n    calculateScore(percentage) {\n        let score;\n        // Green indicator.\n        if (percentage <= this._config.slightlyTooMany) {\n            score = 9;\n        }\n        // Orange indicator.\n        if (inRange(percentage, this._config.slightlyTooMany, this._config.farTooMany)) {\n            score = 6;\n        }\n        // Red indicator.\n        if (percentage > this._config.farTooMany) {\n            score = 3;\n        }\n        return score;\n    }\n    /**\n     * Gets the sentences that are qualified as being too long.\n     *\n     * @param {array} sentences The sentences to filter through.\n     * @returns {array} Array with all the sentences considered to be too long.\n     */\n    getTooLongSentences(sentences) {\n        return countTooLongSentences(sentences, this._config.recommendedWordCount);\n    }\n    /**\n     * Get the total amount of sentences that are qualified as being too long.\n     *\n     * @param {Array} sentences The sentences to filter through.\n     * @returns {Number} The amount of sentences that are considered too long.\n     */\n    countTooLongSentences(sentences) {\n        return this.getTooLongSentences(sentences).length;\n    }\n}\nmodule.exports = SentenceLengthInTextAssessment;\n//# sourceMappingURL=sentenceLengthInTextAssessment.js.map"]}