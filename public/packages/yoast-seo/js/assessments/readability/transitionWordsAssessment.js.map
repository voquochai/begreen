{"version":3,"sources":["../../../../js/assessments/readability/transitionWordsAssessment.js"],"names":["AssessmentResult","require","formatNumber","map","inRange","inRangeStartInclusive","stripTags","stripIncompleteTags","Mark","marker","getLanguageAvailability","availableLanguages","calculateTransitionWordPercentage","sentences","transitionWordSentences","totalSentences","calculateTransitionWordResult","i18n","score","percentage","hasMarks","transitionWordsURL","recommendedMinimum","text","sprintf","dgettext","transitionWordsAssessment","paper","researcher","getResearch","transitionWordResult","assessmentResult","setScore","setText","setHasMarks","transitionWordsMarker","sentenceResults","sentenceResult","sentence","original","marked","module","exports","identifier","getResult","isApplicable","isLanguageAvailable","getLocale","hasText","getMarks"],"mappings":"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","file":"transitionWordsAssessment.js","sourcesContent":["\"use strict\";\nlet AssessmentResult = require(\"../../values/AssessmentResult.js\");\nlet formatNumber = require(\"../../helpers/formatNumber.js\");\nlet map = require(\"lodash/map\");\nlet inRange = require(\"../../helpers/inRange.js\").inRangeStartInclusive;\nlet stripTags = require(\"../../stringProcessing/stripHTMLTags\").stripIncompleteTags;\nlet Mark = require(\"../../values/Mark.js\");\nlet marker = require(\"../../markers/addMark.js\");\nlet getLanguageAvailability = require(\"../../helpers/getLanguageAvailability.js\");\nlet availableLanguages = [\"en\", \"de\", \"es\", \"fr\", \"nl\", \"it\"];\n/**\n * Calculates the actual percentage of transition words in the sentences.\n *\n * @param {object} sentences The object containing the total number of sentences and the number of sentences containing\n * a transition word.\n * @returns {number} The percentage of sentences containing a transition word.\n */\nlet calculateTransitionWordPercentage = function (sentences) {\n    if (sentences.transitionWordSentences === 0 || sentences.totalSentences === 0) {\n        return 0;\n    }\n    return formatNumber((sentences.transitionWordSentences / sentences.totalSentences) * 100);\n};\n/**\n * Calculates transition word result\n * @param {object} transitionWordSentences The object containing the total number of sentences and the number of sentences containing\n * a transition word.\n * @param {object} i18n The object used for translations.\n * @returns {object} Object containing score and text.\n */\nlet calculateTransitionWordResult = function (transitionWordSentences, i18n) {\n    let score;\n    let percentage = calculateTransitionWordPercentage(transitionWordSentences);\n    let hasMarks = (percentage > 0);\n    let transitionWordsURL = \"<a href='https://yoa.st/transition-words' target='_blank'>\";\n    if (percentage < 20) {\n        // Red indicator.\n        score = 3;\n    }\n    if (inRange(percentage, 20, 30)) {\n        // Orange indicator.\n        score = 6;\n    }\n    if (percentage >= 30) {\n        // Green indicator.\n        score = 9;\n    }\n    if (score < 7) {\n        let recommendedMinimum = 30;\n        return {\n            score: formatNumber(score),\n            hasMarks: hasMarks,\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \n            // Translators: %1$s expands to the number of sentences containing transition words, %2$s expands to a link on yoast.com,\n            // %3$s expands to the anchor end tag, %4$s expands to the recommended value.\n            \"%1$s of the sentences contain a %2$stransition word%3$s or phrase, \" +\n                \"which is less than the recommended minimum of %4$s.\"), percentage + \"%\", transitionWordsURL, \"</a>\", recommendedMinimum + \"%\"),\n        };\n    }\n    return {\n        score: formatNumber(score),\n        hasMarks: hasMarks,\n        text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \n        // Translators: %1$s expands to the number of sentences containing transition words, %2$s expands to a link on yoast.com,\n        // %3$s expands to the anchor end tag.\n        \"%1$s of the sentences contain a %2$stransition word%3$s or phrase, \" +\n            \"which is great.\"), percentage + \"%\", transitionWordsURL, \"</a>\"),\n    };\n};\n/**\n * Scores the percentage of sentences including one or more transition words.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} The Assessment result.\n */\nlet transitionWordsAssessment = function (paper, researcher, i18n) {\n    let transitionWordSentences = researcher.getResearch(\"findTransitionWords\");\n    let transitionWordResult = calculateTransitionWordResult(transitionWordSentences, i18n);\n    let assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(transitionWordResult.score);\n    assessmentResult.setText(transitionWordResult.text);\n    assessmentResult.setHasMarks(transitionWordResult.hasMarks);\n    return assessmentResult;\n};\n/**\n * Marks text for the transition words assessment.\n * @param {Paper} paper The paper to use for the marking.\n * @param {Researcher} researcher The researcher containing the necessary research.\n * @returns {Array<Mark>} A list of marks that should be applied.\n */\nlet transitionWordsMarker = function (paper, researcher) {\n    let transitionWordSentences = researcher.getResearch(\"findTransitionWords\");\n    return map(transitionWordSentences.sentenceResults, function (sentenceResult) {\n        let sentence = sentenceResult.sentence;\n        sentence = stripTags(sentence);\n        return new Mark({\n            original: sentence,\n            marked: marker(sentence),\n        });\n    });\n};\nmodule.exports = {\n    identifier: \"textTransitionWords\",\n    getResult: transitionWordsAssessment,\n    isApplicable: function (paper) {\n        let isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);\n        return (isLanguageAvailable && paper.hasText());\n    },\n    getMarks: transitionWordsMarker,\n};\n//# sourceMappingURL=transitionWordsAssessment.js.map"]}