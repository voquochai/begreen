{"version":3,"sources":["../../../../js/assessments/readability/sentenceBeginningsAssessment.js"],"names":["AssessmentResult","require","stripTags","stripIncompleteTags","partition","sortBy","map","filter","flatten","Mark","marker","maximumConsecutiveDuplicates","getLanguageAvailability","availableLanguages","groupSentenceBeginnings","sentenceBeginnings","tooOften","word","count","length","total","sortedCounts","lowestCount","calculateSentenceBeginningsResult","groupedSentenceBeginnings","i18n","score","hasMarks","text","sprintf","dngettext","sentenceBeginningMarker","paper","researcher","getResearch","sentenceBeginning","sentences","begin","sentence","marked","original","sentenceBeginningsAssessment","sentenceBeginningsResult","assessmentResult","setScore","setText","setHasMarks","module","exports","identifier","getResult","isApplicable","isLanguageAvailable","getLocale","hasText","getMarks"],"mappings":"AAAA;;AACA,IAAIA,mBAAmBC,QAAQ,kCAAR,CAAvB;AACA,IAAIC,YAAYD,QAAQ,sCAAR,EAAgDE,mBAAhE;AACA,IAAIC,YAAYH,QAAQ,kBAAR,CAAhB;AACA,IAAII,SAASJ,QAAQ,eAAR,CAAb;AACA,IAAIK,MAAML,QAAQ,YAAR,CAAV;AACA,IAAIM,SAASN,QAAQ,eAAR,CAAb;AACA,IAAIO,UAAUP,QAAQ,gBAAR,CAAd;AACA,IAAIQ,OAAOR,QAAQ,sBAAR,CAAX;AACA,IAAIS,SAAST,QAAQ,0BAAR,CAAb;AACA,IAAIU,+BAA+B,CAAnC;AACA,IAAIC,0BAA0BX,QAAQ,0CAAR,CAA9B;AACA,IAAIY,qBAAqB,CAAC,IAAD,EAAO,IAAP,EAAa,IAAb,EAAmB,IAAnB,EAAyB,IAAzB,EAA+B,IAA/B,CAAzB;AACA;;;;;AAKA,IAAIC,0BAA0B,SAA1BA,uBAA0B,CAAUC,kBAAV,EAA8B;AACxD,QAAIC,WAAWZ,UAAUW,kBAAV,EAA8B,UAAUE,IAAV,EAAgB;AACzD,eAAOA,KAAKC,KAAL,GAAaP,4BAApB;AACH,KAFc,CAAf;AAGA,QAAIK,SAAS,CAAT,EAAYG,MAAZ,KAAuB,CAA3B,EAA8B;AAC1B,eAAO,EAAEC,OAAO,CAAT,EAAP;AACH;AACD,QAAIC,eAAehB,OAAOW,SAAS,CAAT,CAAP,EAAoB,UAAUC,IAAV,EAAgB;AACnD,eAAOA,KAAKC,KAAZ;AACH,KAFkB,CAAnB;AAGA,WAAO,EAAEE,OAAOJ,SAAS,CAAT,EAAYG,MAArB,EAA6BG,aAAaD,aAAa,CAAb,EAAgBH,KAA1D,EAAP;AACH,CAXD;AAYA;;;;;;AAMA,IAAIK,oCAAoC,SAApCA,iCAAoC,CAAUC,yBAAV,EAAqCC,IAArC,EAA2C;AAC/E,QAAID,0BAA0BJ,KAA1B,GAAkC,CAAtC,EAAyC;AACrC,eAAO;AACHM,mBAAO,CADJ;AAEHC,sBAAU,IAFP;AAGHC,kBAAMH,KAAKI,OAAL,CAAaJ,KAAKK,SAAL,CAAe,kBAAf;AACnB;AACA;AACA,6GAHmB,EAGgF,yGAC/F,uBAJe,EAIUN,0BAA0BJ,KAJpC,CAAb,EAIyDI,0BAA0BJ,KAJnF,EAI0FI,0BAA0BF,WAJpH;AAHH,SAAP;AASH;AACD,WAAO,EAAP;AACH,CAbD;AAcA;;;;;;AAMA,IAAIS,0BAA0B,SAA1BA,uBAA0B,CAAUC,KAAV,EAAiBC,UAAjB,EAA6B;AACvD,QAAIlB,qBAAqBkB,WAAWC,WAAX,CAAuB,uBAAvB,CAAzB;AACAnB,yBAAqBR,OAAOQ,kBAAP,EAA2B,UAAUoB,iBAAV,EAA6B;AACzE,eAAOA,kBAAkBjB,KAAlB,GAA0BP,4BAAjC;AACH,KAFoB,CAArB;AAGA,QAAIyB,YAAY9B,IAAIS,kBAAJ,EAAwB,UAAUsB,KAAV,EAAiB;AACrD,eAAOA,MAAMD,SAAb;AACH,KAFe,CAAhB;AAGA,WAAO9B,IAAIE,QAAQ4B,SAAR,CAAJ,EAAwB,UAAUE,QAAV,EAAoB;AAC/CA,mBAAWpC,UAAUoC,QAAV,CAAX;AACA,YAAIC,SAAS7B,OAAO4B,QAAP,CAAb;AACA,eAAO,IAAI7B,IAAJ,CAAS;AACZ+B,sBAAUF,QADE;AAEZC,oBAAQA;AAFI,SAAT,CAAP;AAIH,KAPM,CAAP;AAQH,CAhBD;AAiBA;;;;;;;AAOA,IAAIE,+BAA+B,SAA/BA,4BAA+B,CAAUT,KAAV,EAAiBC,UAAjB,EAA6BR,IAA7B,EAAmC;AAClE,QAAIV,qBAAqBkB,WAAWC,WAAX,CAAuB,uBAAvB,CAAzB;AACA,QAAIV,4BAA4BV,wBAAwBC,kBAAxB,CAAhC;AACA,QAAI2B,2BAA2BnB,kCAAkCC,yBAAlC,EAA6DC,IAA7D,CAA/B;AACA,QAAIkB,mBAAmB,IAAI3C,gBAAJ,EAAvB;AACA2C,qBAAiBC,QAAjB,CAA0BF,yBAAyBhB,KAAnD;AACAiB,qBAAiBE,OAAjB,CAAyBH,yBAAyBd,IAAlD;AACAe,qBAAiBG,WAAjB,CAA6BJ,yBAAyBf,QAAtD;AACA,WAAOgB,gBAAP;AACH,CATD;AAUAI,OAAOC,OAAP,GAAiB;AACbC,gBAAY,oBADC;AAEbC,eAAWT,4BAFE;AAGbU,kBAAc,sBAAUnB,KAAV,EAAiB;AAC3B,YAAIoB,sBAAsBxC,wBAAwBoB,MAAMqB,SAAN,EAAxB,EAA2CxC,kBAA3C,CAA1B;AACA,eAAQuC,uBAAuBpB,MAAMsB,OAAN,EAA/B;AACH,KANY;AAObC,cAAUxB;AAPG,CAAjB;AASA","file":"sentenceBeginningsAssessment.js","sourcesContent":["\"use strict\";\nlet AssessmentResult = require(\"../../values/AssessmentResult.js\");\nlet stripTags = require(\"../../stringProcessing/stripHTMLTags\").stripIncompleteTags;\nlet partition = require(\"lodash/partition\");\nlet sortBy = require(\"lodash/sortBy\");\nlet map = require(\"lodash/map\");\nlet filter = require(\"lodash/filter\");\nlet flatten = require(\"lodash/flatten\");\nlet Mark = require(\"../../values/Mark.js\");\nlet marker = require(\"../../markers/addMark.js\");\nlet maximumConsecutiveDuplicates = 2;\nlet getLanguageAvailability = require(\"../../helpers/getLanguageAvailability.js\");\nlet availableLanguages = [\"en\", \"de\", \"es\", \"fr\", \"nl\", \"it\"];\n/**\n * Counts and groups the number too often used sentence beginnings and determines the lowest count within that group.\n * @param {array} sentenceBeginnings The array containing the objects containing the beginning words and counts.\n * @returns {object} The object containing the total number of too often used beginnings and the lowest count within those.\n */\nlet groupSentenceBeginnings = function (sentenceBeginnings) {\n    let tooOften = partition(sentenceBeginnings, function (word) {\n        return word.count > maximumConsecutiveDuplicates;\n    });\n    if (tooOften[0].length === 0) {\n        return { total: 0 };\n    }\n    let sortedCounts = sortBy(tooOften[0], function (word) {\n        return word.count;\n    });\n    return { total: tooOften[0].length, lowestCount: sortedCounts[0].count };\n};\n/**\n * Calculates the score based on sentence beginnings.\n * @param {object} groupedSentenceBeginnings The object with grouped sentence beginnings.\n * @param {object} i18n The object used for translations.\n * @returns {{score: number, text: string, hasMarks: boolean}} resultobject with score and text.\n */\nlet calculateSentenceBeginningsResult = function (groupedSentenceBeginnings, i18n) {\n    if (groupedSentenceBeginnings.total > 0) {\n        return {\n            score: 3,\n            hasMarks: true,\n            text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\", \n            // Translators: %1$d expands to the number of instances where 3 or more consecutive sentences start with the same word.\n            // %2$d expands to the number of consecutive sentences starting with the same word.\n            \"The text contains %2$d consecutive sentences starting with the same word. Try to mix things up!\", \"The text contains %1$d instances where %2$d or more consecutive sentences start with the same word. \" +\n                \"Try to mix things up!\", groupedSentenceBeginnings.total), groupedSentenceBeginnings.total, groupedSentenceBeginnings.lowestCount),\n        };\n    }\n    return {};\n};\n/**\n * Marks all consecutive sentences with the same beginnings.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {object} All marked sentences.\n */\nlet sentenceBeginningMarker = function (paper, researcher) {\n    let sentenceBeginnings = researcher.getResearch(\"getSentenceBeginnings\");\n    sentenceBeginnings = filter(sentenceBeginnings, function (sentenceBeginning) {\n        return sentenceBeginning.count > maximumConsecutiveDuplicates;\n    });\n    let sentences = map(sentenceBeginnings, function (begin) {\n        return begin.sentences;\n    });\n    return map(flatten(sentences), function (sentence) {\n        sentence = stripTags(sentence);\n        let marked = marker(sentence);\n        return new Mark({\n            original: sentence,\n            marked: marked,\n        });\n    });\n};\n/**\n * Scores the repetition of sentence beginnings in consecutive sentences.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} The Assessment result\n */\nlet sentenceBeginningsAssessment = function (paper, researcher, i18n) {\n    let sentenceBeginnings = researcher.getResearch(\"getSentenceBeginnings\");\n    let groupedSentenceBeginnings = groupSentenceBeginnings(sentenceBeginnings);\n    let sentenceBeginningsResult = calculateSentenceBeginningsResult(groupedSentenceBeginnings, i18n);\n    let assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(sentenceBeginningsResult.score);\n    assessmentResult.setText(sentenceBeginningsResult.text);\n    assessmentResult.setHasMarks(sentenceBeginningsResult.hasMarks);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"sentenceBeginnings\",\n    getResult: sentenceBeginningsAssessment,\n    isApplicable: function (paper) {\n        let isLanguageAvailable = getLanguageAvailability(paper.getLocale(), availableLanguages);\n        return (isLanguageAvailable && paper.hasText());\n    },\n    getMarks: sentenceBeginningMarker,\n};\n//# sourceMappingURL=sentenceBeginningsAssessment.js.map"]}