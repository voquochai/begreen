{"version":3,"sources":["../../../../js/assessments/readability/paragraphTooLongAssessment.js"],"names":["AssessmentResult","require","stripHTMLTags","stripBlockTagsAtStartEnd","isParagraphTooLong","Mark","marker","inRange","inRangeEndInclusive","filter","map","recommendedValue","getTooLongParagraphs","paragraphsLength","paragraph","wordCount","calculateParagraphLengthResult","tooLongParagraphs","i18n","score","length","longestParagraphLength","hasMarks","text","dgettext","sprintf","dngettext","sortParagraphs","paragraphs","sort","a","b","paragraphLengthMarker","paper","researcher","getResearch","paragraphText","marked","original","paragraphLengthAssessment","paragraphLengthResult","assessmentResult","setScore","setText","setHasMarks","module","exports","identifier","getResult","isApplicable","hasText","getMarks"],"mappings":"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","file":"paragraphTooLongAssessment.js","sourcesContent":["\"use strict\";\nvar AssessmentResult = require(\"../../values/AssessmentResult.js\");\nvar stripHTMLTags = require(\"../../stringProcessing/stripHTMLTags\").stripBlockTagsAtStartEnd;\nvar isParagraphTooLong = require(\"../../helpers/isValueTooLong\");\nvar Mark = require(\"../../values/Mark.js\");\nvar marker = require(\"../../markers/addMark.js\");\nvar inRange = require(\"../../helpers/inRange.js\").inRangeEndInclusive;\nvar filter = require(\"lodash/filter\");\nvar map = require(\"lodash/map\");\n// 150 is the recommendedValue for the maximum paragraph length.\nvar recommendedValue = 150;\n/**\n * Returns an array containing only the paragraphs longer than the recommended length.\n * @param {array} paragraphsLength The array containing the lengths of individual paragraphs.\n * @returns {number} The number of too long paragraphs.\n */\nvar getTooLongParagraphs = function (paragraphsLength) {\n    return filter(paragraphsLength, function (paragraph) {\n        return isParagraphTooLong(recommendedValue, paragraph.wordCount);\n    });\n};\n/**\n * Returns the scores and text for the ParagraphTooLongAssessment\n * @param {array} paragraphsLength The array containing the lengths of individual paragraphs.\n * @param {number} tooLongParagraphs The number of too long paragraphs.\n * @param {object} i18n The i18n object used for translations.\n * @returns {{score: number, text: string }} the assessmentResult.\n */\nvar calculateParagraphLengthResult = function (paragraphsLength, tooLongParagraphs, i18n) {\n    var score;\n    if (paragraphsLength.length === 0) {\n        return {};\n    }\n    var longestParagraphLength = paragraphsLength[0].wordCount;\n    if (longestParagraphLength <= 150) {\n        // Green indicator.\n        score = 9;\n    }\n    if (inRange(longestParagraphLength, 150, 200)) {\n        // Orange indicator.\n        score = 6;\n    }\n    if (longestParagraphLength > 200) {\n        // Red indicator.\n        score = 3;\n    }\n    if (score >= 7) {\n        return {\n            score: score,\n            hasMarks: false,\n            text: i18n.dgettext(\"js-text-analysis\", \"None of the paragraphs are too long, which is great.\"),\n        };\n    }\n    return {\n        score: score,\n        hasMarks: true,\n        // Translators: %1$d expands to the number of paragraphs, %2$d expands to the recommended value\n        text: i18n.sprintf(i18n.dngettext(\"js-text-analysis\", \"%1$d of the paragraphs contains more than the recommended maximum \" +\n            \"of %2$d words. Are you sure all information is about the same topic, and therefore belongs in one single paragraph?\", \"%1$d of the paragraphs contain more than the recommended maximum of %2$d words. Are you sure all information within each of\" +\n            \" these paragraphs is about the same topic, and therefore belongs in a single paragraph?\", tooLongParagraphs.length), tooLongParagraphs.length, recommendedValue),\n    };\n};\n/**\n * Sort the paragraphs based on word count.\n *\n * @param {Array} paragraphs The array with paragraphs.\n * @returns {Array} The array sorted on word counts.\n */\nvar sortParagraphs = function (paragraphs) {\n    return paragraphs.sort(function (a, b) {\n        return b.wordCount - a.wordCount;\n    });\n};\n/**\n * Creates a marker for the paragraphs.\n *\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @returns {Array} An array with marked paragraphs.\n */\nvar paragraphLengthMarker = function (paper, researcher) {\n    var paragraphsLength = researcher.getResearch(\"getParagraphLength\");\n    var tooLongParagraphs = getTooLongParagraphs(paragraphsLength);\n    return map(tooLongParagraphs, function (paragraph) {\n        var paragraphText = stripHTMLTags(paragraph.text);\n        var marked = marker(paragraphText);\n        return new Mark({\n            original: paragraphText,\n            marked: marked,\n        });\n    });\n};\n/**\n * Runs the getParagraphLength module, based on this returns an assessment result with score and text.\n * @param {object} paper The paper to use for the assessment.\n * @param {object} researcher The researcher used for calling research.\n * @param {object} i18n The object used for translations.\n * @returns {object} the Assessmentresult\n */\nvar paragraphLengthAssessment = function (paper, researcher, i18n) {\n    var paragraphsLength = researcher.getResearch(\"getParagraphLength\");\n    paragraphsLength = sortParagraphs(paragraphsLength);\n    var tooLongParagraphs = getTooLongParagraphs(paragraphsLength);\n    var paragraphLengthResult = calculateParagraphLengthResult(paragraphsLength, tooLongParagraphs, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(paragraphLengthResult.score);\n    assessmentResult.setText(paragraphLengthResult.text);\n    assessmentResult.setHasMarks(paragraphLengthResult.hasMarks);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"textParagraphTooLong\",\n    getResult: paragraphLengthAssessment,\n    isApplicable: function (paper) {\n        return paper.hasText();\n    },\n    getMarks: paragraphLengthMarker,\n};\n//# sourceMappingURL=paragraphTooLongAssessment.js.map"]}