{"version":3,"sources":["../../../../js/assessments/readability/subheadingDistributionTooLongAssessment.js"],"names":["AssessmentResult","require","Assessment","isTextTooLong","filter","map","merge","Mark","marker","inRange","inRangeEndInclusive","SubheadingsDistributionTooLong","config","defaultConfig","recommendedMaximumWordCount","slightlyTooMany","farTooMany","identifier","_config","paper","researcher","i18n","subheadingTextsLength","getResearch","sort","a","b","wordCount","tooLongTexts","getTooLongSubheadingTexts","length","score","calculateScore","assessmentResult","setScore","setText","translateScore","setHasMarks","hasText","tooLongText","marked","text","original","subheading","bind","longestSubheadingTextLength","sprintf","dgettext","dngettext","module","exports"],"mappings":"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","file":"subheadingDistributionTooLongAssessment.js","sourcesContent":["\"use strict\";\nlet AssessmentResult = require(\"../../values/AssessmentResult.js\");\nlet Assessment = require(\"../../assessment.js\");\nlet isTextTooLong = require(\"../../helpers/isValueTooLong\");\nlet filter = require(\"lodash/filter\");\nlet map = require(\"lodash/map\");\nlet merge = require(\"lodash/merge\");\nlet Mark = require(\"../../values/Mark.js\");\nlet marker = require(\"../../markers/addMark.js\");\nlet inRange = require(\"../../helpers/inRange.js\").inRangeEndInclusive;\n/**\n * Represents the assessment for calculating the text after each subheading.\n */\nclass SubheadingsDistributionTooLong extends Assessment {\n    /**\n     * Sets the identifier and the config.\n     *\n     * @param {object} config The configuration to use.\n     * @returns {void}\n     */\n    constructor(config = {}) {\n        super();\n        let defaultConfig = {\n            // The maximum recommended value of the subheading text.\n            recommendedMaximumWordCount: 300,\n            slightlyTooMany: 300,\n            farTooMany: 350,\n        };\n        this.identifier = \"subheadingsTooLong\";\n        this._config = merge(defaultConfig, config);\n    }\n    /**\n     * Runs the getSubheadingTextLength research and checks scores based on length.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {Researcher} researcher The researcher used for calling research.\n     * @param {object} i18n The object used for translations.\n     *\n     * @returns {AssessmentResult} The assessment result.\n     */\n    getResult(paper, researcher, i18n) {\n        let subheadingTextsLength = researcher.getResearch(\"getSubheadingTextLengths\");\n        subheadingTextsLength = subheadingTextsLength.sort(function (a, b) {\n            return b.wordCount - a.wordCount;\n        });\n        let tooLongTexts = this.getTooLongSubheadingTexts(subheadingTextsLength).length;\n        let score = this.calculateScore(subheadingTextsLength);\n        let assessmentResult = new AssessmentResult();\n        assessmentResult.setScore(score);\n        assessmentResult.setText(this.translateScore(score, tooLongTexts, i18n));\n        assessmentResult.setHasMarks((score > 2 && score < 7));\n        return assessmentResult;\n    }\n    /**\n     * Checks whether the paper has text.\n     *\n     * @param {Paper} paper The paper to use for the assessment.\n     *\n     * @returns {boolean} True when there is text.\n     */\n    isApplicable(paper) {\n        return paper.hasText();\n    }\n    /**\n     * Creates a marker for each text following a subheading that is too long.\n     * @param {Paper} paper The paper to use for the assessment.\n     * @param {object} researcher The researcher used for calling research.\n     * @returns {Array} All markers for the current text.\n     */\n    getMarks(paper, researcher) {\n        let subheadingTextsLength = researcher.getResearch(\"getSubheadingTextLengths\");\n        let tooLongTexts = this.getTooLongSubheadingTexts(subheadingTextsLength);\n        return map(tooLongTexts, function (tooLongText) {\n            let marked = marker(tooLongText.text);\n            return new Mark({\n                original: tooLongText.text,\n                marked: marked,\n            });\n        });\n    }\n    /**\n     * Counts the number of subheading texts that are too long.\n     *\n     * @param {Array} subheadingTextsLength Array with subheading text lengths.\n     * @returns {number} The number of subheading texts that are too long.\n     */\n    getTooLongSubheadingTexts(subheadingTextsLength) {\n        return filter(subheadingTextsLength, function (subheading) {\n            return isTextTooLong(this._config.recommendedMaximumWordCount, subheading.wordCount);\n        }.bind(this));\n    }\n    /**\n     * Calculates the score based on the subheading texts length.\n     *\n     * @param {Array} subheadingTextsLength Array with subheading text lengths.\n     * @returns {number} The calculated score.\n     */\n    calculateScore(subheadingTextsLength) {\n        let score;\n        if (subheadingTextsLength.length === 0) {\n            // Red indicator, use '2' so we can differentiate in external analysis.\n            return 2;\n        }\n        let longestSubheadingTextLength = subheadingTextsLength[0].wordCount;\n        // Green indicator.\n        if (longestSubheadingTextLength <= this._config.slightlyTooMany) {\n            score = 9;\n        }\n        // Orange indicator.\n        if (inRange(longestSubheadingTextLength, this._config.slightlyTooMany, this._config.farTooMany)) {\n            score = 6;\n        }\n        // Red indicator.\n        if (longestSubheadingTextLength > this._config.farTooMany) {\n            score = 3;\n        }\n        return score;\n    }\n    /**\n     * Translates the score to a message the user can understand.\n     *\n     * @param {number} score The score.\n     * @param {number} tooLongTexts The amount of too long texts.\n     * @param {object} i18n The object used for translations.\n     *\n     * @returns {string} A string.\n     */\n    translateScore(score, tooLongTexts, i18n) {\n        if (score === 2) {\n            // Translators: %1$s expands to a link to https://yoa.st/headings, %2$s expands to the link closing tag.\n            return i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \"The text does not contain any %1$ssubheadings%2$s. Add at least one subheading.\"), \"<a href='https://yoa.st/headings' target='_blank'>\", \"</a>\");\n        }\n        if (score >= 7) {\n            return i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \"The amount of words following each of the subheadings doesn't exceed the recommended maximum of %1$d words, which is great.\"), this._config.recommendedMaximumWordCount);\n        }\n        // Translators: %1$d expands to the number of subheadings, %2$d expands to the recommended value\n        return i18n.sprintf(i18n.dngettext(\"js-text-analysis\", \"%1$d subheading is followed by more than the recommended maximum of %2$d words. Try to insert another subheading.\", \"%1$d of the subheadings are followed by more than the recommended maximum of %2$d words. Try to insert additional subheadings.\", tooLongTexts), tooLongTexts, this._config.recommendedMaximumWordCount);\n    }\n}\nmodule.exports = SubheadingsDistributionTooLong;\n//# sourceMappingURL=subheadingDistributionTooLongAssessment.js.map"]}