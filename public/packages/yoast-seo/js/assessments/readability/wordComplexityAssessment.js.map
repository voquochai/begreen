{"version":3,"sources":["../../../../js/assessments/readability/wordComplexityAssessment.js"],"names":["AssessmentResult","require","removeSentenceTerminators","formatNumber","Mark","addMark","filter","flatMap","zip","forEach","flatten","recommendedValue","filterComplexity","words","word","complexity","calculateComplexity","wordCount","wordComplexity","i18n","percentage","tooComplexWords","length","hasMarks","recommendedMaximum","wordComplexityURL","score","Math","max","min","text","sprintf","dgettext","markComplexWordsInSentence","sentence","complexWords","splitWords","split","complexWord","wordIndex","replace","splitSentenceOnWhitespace","whitespace","pop","shift","wordComplexityMarker","paper","researcher","wordComplexityResults","getResearch","result","markedSentence","join","original","marked","wordComplexityAssessment","complexityResult","assessmentResult","setScore","setText","setHasMarks","module","exports","identifier","getResult","isApplicable","hasText","getMarks"],"mappings":"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","file":"wordComplexityAssessment.js","sourcesContent":["\"use strict\";\nvar AssessmentResult = require(\"../../values/AssessmentResult.js\");\nvar removeSentenceTerminators = require(\"../../stringProcessing/removeSentenceTerminators\");\nvar formatNumber = require(\"../../helpers/formatNumber.js\");\nvar Mark = require(\"../../values/Mark.js\");\nvar addMark = require(\"../../markers/addMark.js\");\nvar filter = require(\"lodash/filter\");\nvar flatMap = require(\"lodash/flatMap\");\nvar zip = require(\"lodash/zip\");\nvar forEach = require(\"lodash/forEach\");\nvar flatten = require(\"lodash/flatten\");\n// The maximum recommended value is 3 syllables. With more than 3 syllables a word is considered complex.\nvar recommendedValue = 3;\n/**\n * Filters the words that aren't too long.\n *\n * @param {Array} words The array with words to filter on complexity.\n * @returns {Array} The filtered list with complex words.\n */\nvar filterComplexity = function (words) {\n    return filter(words, function (word) {\n        return (word.complexity > recommendedValue);\n    });\n};\n/**\n * Calculates the complexity of the text based on the syllables in words.\n * @param {number} wordCount The number of words used.\n * @param {Array} wordComplexity The list of words with their syllable count.\n * @param {Object} i18n The object used for translations.\n * @returns {{score: number, text}} resultobject with score and text.\n */\nvar calculateComplexity = function (wordCount, wordComplexity, i18n) {\n    var percentage = 0;\n    var tooComplexWords = filterComplexity(wordComplexity).length;\n    // Prevent division by zero errors.\n    if (wordCount !== 0) {\n        percentage = (tooComplexWords / wordCount) * 100;\n    }\n    percentage = formatNumber(percentage);\n    var hasMarks = (percentage > 0);\n    var recommendedMaximum = 5;\n    var wordComplexityURL = \"<a href='https://yoa.st/difficult-words' target='_blank'>\";\n    // 6 is the number of scorepoints between 3, minscore and 9, maxscore. For scoring we use 10 steps. each step is 0.6\n    // Up to 1.7 percent is for scoring a 9, higher percentages give lower scores.\n    var score = 9 - Math.max(Math.min((0.6) * (percentage - 1.7), 6), 0);\n    score = formatNumber(score);\n    if (score >= 7) {\n        return {\n            score: score,\n            hasMarks: hasMarks,\n            text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \n            // Translators: %1$s expands to the percentage of complex words, %2$s expands to a link on yoast.com,\n            // %3$d expands to the recommended maximum number of syllables,\n            // %4$s expands to the anchor end tag, %5$s expands to the recommended maximum number of syllables.\n            \"%1$s of the words contain %2$sover %3$s syllables%4$s, \" +\n                \"which is less than or equal to the recommended maximum of %5$s.\"), percentage + \"%\", wordComplexityURL, recommendedValue, \"</a>\", recommendedMaximum + \"%\"),\n        };\n    }\n    return {\n        score: score,\n        hasMarks: hasMarks,\n        text: i18n.sprintf(i18n.dgettext(\"js-text-analysis\", \n        // Translators: %1$s expands to the percentage of complex words, %2$s expands to a link on yoast.com,\n        // %3$d expands to the recommended maximum number of syllables,\n        // %4$s expands to the anchor end tag, %5$s expands to the recommended maximum number of syllables.\n        \"%1$s of the words contain %2$sover %3$s syllables%4$s, \" +\n            \"which is more than the recommended maximum of %5$s.\"), percentage + \"%\", wordComplexityURL, recommendedValue, \"</a>\", recommendedMaximum + \"%\"),\n    };\n};\n/**\n * Marks complex words in a sentence.\n * @param {string} sentence The sentence to mark complex words in.\n * @param {Array} complexWords The array with complex words.\n * @returns {Array} All marked complex words.\n */\nvar markComplexWordsInSentence = function (sentence, complexWords) {\n    var splitWords = sentence.split(/\\s+/);\n    forEach(complexWords, function (complexWord) {\n        var wordIndex = complexWord.wordIndex;\n        if (complexWord.word === splitWords[wordIndex] ||\n            complexWord.word === removeSentenceTerminators(splitWords[wordIndex])) {\n            splitWords[wordIndex] = splitWords[wordIndex].replace(complexWord.word, addMark(complexWord.word));\n        }\n    });\n    return splitWords;\n};\n/**\n * Splits sentence on whitespace\n * @param {string} sentence The sentence to split.\n * @returns {Array} All words from sentence. .\n */\nvar splitSentenceOnWhitespace = function (sentence) {\n    var whitespace = sentence.split(/\\S+/);\n    // Drop first and last elements.\n    whitespace.pop();\n    whitespace.shift();\n    return whitespace;\n};\n/**\n * Creates markers of words that are complex.\n *\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @returns {Array} A list with markers\n */\nvar wordComplexityMarker = function (paper, researcher) {\n    var wordComplexityResults = researcher.getResearch(\"wordComplexity\");\n    return flatMap(wordComplexityResults, function (result) {\n        var words = result.words;\n        var sentence = result.sentence;\n        var complexWords = filterComplexity(words);\n        if (complexWords.length === 0) {\n            return [];\n        }\n        var splitWords = markComplexWordsInSentence(sentence, complexWords);\n        var whitespace = splitSentenceOnWhitespace(sentence);\n        // Rebuild the sentence with the marked words.\n        var markedSentence = zip(splitWords, whitespace);\n        markedSentence = flatten(markedSentence);\n        markedSentence = markedSentence.join(\"\");\n        return new Mark({\n            original: sentence,\n            marked: markedSentence,\n        });\n    });\n};\n/**\n * Execute the word complexity assessment and return a result based on the syllables in words\n * @param {Paper} paper The Paper object to assess.\n * @param {Researcher} researcher The Researcher object containing all available researches.\n * @param {object} i18n The object used for translations\n * @returns {AssessmentResult} The result of the assessment, containing both a score and a descriptive text.\n */\nvar wordComplexityAssessment = function (paper, researcher, i18n) {\n    var wordComplexity = researcher.getResearch(\"wordComplexity\");\n    wordComplexity = flatMap(wordComplexity, function (sentence) {\n        return sentence.words;\n    });\n    var wordCount = wordComplexity.length;\n    var complexityResult = calculateComplexity(wordCount, wordComplexity, i18n);\n    var assessmentResult = new AssessmentResult();\n    assessmentResult.setScore(complexityResult.score);\n    assessmentResult.setText(complexityResult.text);\n    assessmentResult.setHasMarks(complexityResult.hasMarks);\n    return assessmentResult;\n};\nmodule.exports = {\n    identifier: \"wordComplexity\",\n    getResult: wordComplexityAssessment,\n    isApplicable: function (paper) {\n        return paper.hasText();\n    },\n    getMarks: wordComplexityMarker,\n};\n//# sourceMappingURL=wordComplexityAssessment.js.map"]}