{"version":3,"sources":["../../../js/values/WordCombination.js"],"names":["forEach","require","has","isFunctionWord","word","functionWords","indexOf","toLocaleLowerCase","WordCombination","words","occurrences","_words","_length","length","_occurrences","_functionWords","lengthBonus","prototype","getLengthBonus","getWords","getLength","getCombination","join","getOccurrences","incrementOccurrences","getMultiplier","relevantWordPercentage","isRelevantWord","_relevantWords","getRelevantWordPercentage","relevantWordCount","wordRelevance","bind","getRelevance","setRelevantWords","relevantWords","getDensity","wordCount","module","exports"],"mappings":"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","file":"WordCombination.js","sourcesContent":["\"use strict\";\nvar forEach = require(\"lodash/forEach\");\nvar has = require(\"lodash/has\");\n/**\n * Returns whether or not the given word is a function word.\n *\n * @param {string} word The word to check.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {boolean} Whether or not the word is a function word.\n */\nfunction isFunctionWord(word, functionWords) {\n    return -1 !== functionWords.indexOf(word.toLocaleLowerCase());\n}\n/**\n * Represents a word combination in the context of relevant words.\n *\n * @constructor\n *\n * @param {string[]} words The list of words that this combination consists of.\n * @param {number} [occurrences] The number of occurrences, defaults to 0.\n * @param {Function} functionWords The function containing the lists of function words.\n */\nfunction WordCombination(words, occurrences, functionWords) {\n    this._words = words;\n    this._length = words.length;\n    this._occurrences = occurrences || 0;\n    this._functionWords = functionWords;\n}\nWordCombination.lengthBonus = {\n    2: 3,\n    3: 7,\n    4: 12,\n    5: 18,\n};\n/**\n * Returns the base relevance based on the length of this combination.\n *\n * @returns {number} The base relevance based on the length.\n */\nWordCombination.prototype.getLengthBonus = function () {\n    if (has(WordCombination.lengthBonus, this._length)) {\n        return WordCombination.lengthBonus[this._length];\n    }\n    return 0;\n};\n/**\n * Returns the list with words.\n *\n * @returns {array} The list with words.\n */\nWordCombination.prototype.getWords = function () {\n    return this._words;\n};\n/**\n * Returns the word combination length.\n *\n * @returns {number} The word combination length.\n */\nWordCombination.prototype.getLength = function () {\n    return this._length;\n};\n/**\n * Returns the combination as it occurs in the text.\n *\n * @returns {string} The combination.\n */\nWordCombination.prototype.getCombination = function () {\n    return this._words.join(\" \");\n};\n/**\n * Returns the amount of occurrences of this word combination.\n *\n * @returns {number} The amount of occurrences.\n */\nWordCombination.prototype.getOccurrences = function () {\n    return this._occurrences;\n};\n/**\n * Increments the occurrences.\n *\n * @returns {void}\n */\nWordCombination.prototype.incrementOccurrences = function () {\n    this._occurrences += 1;\n};\n/**\n * Returns the relevance of the length.\n *\n * @param {number} relevantWordPercentage The relevance of the words within the combination.\n * @returns {number} The relevance based on the length and the word relevance.\n */\nWordCombination.prototype.getMultiplier = function (relevantWordPercentage) {\n    var lengthBonus = this.getLengthBonus();\n    // The relevance scales linearly from the relevance of one word to the maximum.\n    return 1 + relevantWordPercentage * lengthBonus;\n};\n/**\n * Returns if the given word is a relevant word based on the given word relevance.\n *\n * @param {string} word The word to check if it is relevant.\n * @returns {boolean} Whether or not it is relevant.\n */\nWordCombination.prototype.isRelevantWord = function (word) {\n    return has(this._relevantWords, word);\n};\n/**\n * Returns the relevance of the words within this combination.\n *\n * @returns {number} The percentage of relevant words inside this combination.\n */\nWordCombination.prototype.getRelevantWordPercentage = function () {\n    var relevantWordCount = 0, wordRelevance = 1;\n    if (this._length > 1) {\n        forEach(this._words, function (word) {\n            if (this.isRelevantWord(word)) {\n                relevantWordCount += 1;\n            }\n        }.bind(this));\n        wordRelevance = relevantWordCount / this._length;\n    }\n    return wordRelevance;\n};\n/**\n * Returns the relevance for this word combination.\n *\n * @returns {number} The relevance of this word combination.\n */\nWordCombination.prototype.getRelevance = function () {\n    if (this._words.length === 1 && isFunctionWord(this._words[0], this._functionWords)) {\n        return 0;\n    }\n    var wordRelevance = this.getRelevantWordPercentage();\n    if (wordRelevance === 0) {\n        return 0;\n    }\n    return this.getMultiplier(wordRelevance) * this._occurrences;\n};\n/**\n * Sets the relevance of single words\n *\n * @param {Object} relevantWords A mapping from a word to a relevance.\n * @returns {void}\n */\nWordCombination.prototype.setRelevantWords = function (relevantWords) {\n    this._relevantWords = relevantWords;\n};\n/**\n * Returns the density of this combination within the text.\n *\n * @param {number} wordCount The word count of the text this combination was found in.\n * @returns {number} The density of this combination.\n */\nWordCombination.prototype.getDensity = function (wordCount) {\n    return this._occurrences / wordCount;\n};\nmodule.exports = WordCombination;\n//# sourceMappingURL=WordCombination.js.map"]}