{"version":3,"sources":["../../../js/values/AssessmentResult.js"],"names":["isUndefined","require","isNumber","emptyMarker","AssessmentResult","values","_hasScore","_identifier","_hasMarks","_marker","score","text","setScore","setText","prototype","hasScore","getScore","hasText","getText","setIdentifier","identifier","getIdentifier","setMarker","marker","hasMarker","getMarker","setHasMarks","hasMarks","module","exports"],"mappings":"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","file":"AssessmentResult.js","sourcesContent":["\"use strict\";\nvar isUndefined = require(\"lodash/isUndefined\");\nvar isNumber = require(\"lodash/isNumber\");\n/**\n * A function that only returns an empty that can be used as an empty marker\n *\n * @returns {Array} A list of empty marks.\n */\nvar emptyMarker = function () {\n    return [];\n};\n/**\n * Construct the AssessmentResult value object.\n *\n * @param {Object} [values] The values for this assessment result.\n *\n * @constructor\n */\nvar AssessmentResult = function (values) {\n    this._hasScore = false;\n    this._identifier = \"\";\n    this._hasMarks = false;\n    this._marker = emptyMarker;\n    this.score = 0;\n    this.text = \"\";\n    if (isUndefined(values)) {\n        values = {};\n    }\n    if (!isUndefined(values.score)) {\n        this.setScore(values.score);\n    }\n    if (!isUndefined(values.text)) {\n        this.setText(values.text);\n    }\n};\n/**\n * Check if a score is available.\n * @returns {boolean} Whether or not a score is available.\n */\nAssessmentResult.prototype.hasScore = function () {\n    return this._hasScore;\n};\n/**\n * Get the available score\n * @returns {number} The score associated with the AssessmentResult.\n */\nAssessmentResult.prototype.getScore = function () {\n    return this.score;\n};\n/**\n * Set the score for the assessment.\n * @param {number} score The score to be used for the score property\n * @returns {void}\n */\nAssessmentResult.prototype.setScore = function (score) {\n    if (isNumber(score)) {\n        this.score = score;\n        this._hasScore = true;\n    }\n};\n/**\n * Check if a text is available.\n * @returns {boolean} Whether or not a text is available.\n */\nAssessmentResult.prototype.hasText = function () {\n    return this.text !== \"\";\n};\n/**\n * Get the available text\n * @returns {string} The text associated with the AssessmentResult.\n */\nAssessmentResult.prototype.getText = function () {\n    return this.text;\n};\n/**\n * Set the text for the assessment.\n * @param {string} text The text to be used for the text property\n * @returns {void}\n */\nAssessmentResult.prototype.setText = function (text) {\n    if (isUndefined(text)) {\n        text = \"\";\n    }\n    this.text = text;\n};\n/**\n * Sets the identifier\n *\n * @param {string} identifier An alphanumeric identifier for this result.\n * @returns {void}\n */\nAssessmentResult.prototype.setIdentifier = function (identifier) {\n    this._identifier = identifier;\n};\n/**\n * Gets the identifier\n *\n * @returns {string} An alphanumeric identifier for this result.\n */\nAssessmentResult.prototype.getIdentifier = function () {\n    return this._identifier;\n};\n/**\n * Sets the marker, a pure function that can return the marks for a given Paper\n *\n * @param {Function} marker The marker to set.\n * @returns {void}\n */\nAssessmentResult.prototype.setMarker = function (marker) {\n    this._marker = marker;\n};\n/**\n * Returns whether or not this result has a marker that can be used to mark for a given Paper\n *\n * @returns {boolean} Whether or this result has a marker.\n */\nAssessmentResult.prototype.hasMarker = function () {\n    return this._hasMarks && this._marker !== emptyMarker;\n};\n/**\n * Gets the marker, a pure function that can return the marks for a given Paper\n *\n * @returns {Function} The marker.\n */\nAssessmentResult.prototype.getMarker = function () {\n    return this._marker;\n};\n/**\n * Sets the value of _hasMarks to determine if there is something to mark.\n *\n * @param {boolean} hasMarks Is there something to mark.\n * @returns {void}\n */\nAssessmentResult.prototype.setHasMarks = function (hasMarks) {\n    this._hasMarks = hasMarks;\n};\n/**\n * Returns the value of _hasMarks to determine if there is something to mark.\n *\n * @returns {boolean} Is there something to mark.\n */\nAssessmentResult.prototype.hasMarks = function () {\n    return this._hasMarks;\n};\nmodule.exports = AssessmentResult;\n//# sourceMappingURL=AssessmentResult.js.map"]}