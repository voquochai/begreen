{"version":3,"sources":["../../js/snippetPreviewToggler.js"],"names":["forEach","require","domManipulation","previewModes","desktop","mobile","minimumDesktopWidth","SnippetPreviewToggler","previewMode","previewToggles","viewElement","document","getElementById","prototype","initialize","_setPreviewMode","_findElementByMode","bindClickEvent","previewToggle","addEventListener","getAttribute","removeTooltipAbility","bind","bindMouseleaveEvent","bindBlurEvent","restoreTooltipAbility","bindMouseenterEvent","bindEvents","getElementsByClassName","toggleElement","_removeActiveStates","_setActiveState","removeClass","addClass","setDesktopMode","setMobileMode","setVisibility","previewWidth","setScrollHintVisibility","_removeActiveState","setAttribute","elementToActivate","module","exports"],"mappings":"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","file":"snippetPreviewToggler.js","sourcesContent":["\"use strict\";\nvar forEach = require(\"lodash/forEach\");\nvar domManipulation = require(\"./helpers/domManipulation.js\");\nvar previewModes = {\n    desktop: \"snippet-editor__view--desktop\",\n    mobile: \"snippet-editor__view--mobile\",\n};\nvar minimumDesktopWidth = 640;\n/**\n * Constructs the snippet preview toggle.\n *\n * @param {string}    previewMode    The default preview mode.\n * @param {Element[]} previewToggles Array with toggle elements.\n *\n * @property {string}    previewMode    The current preview mode.\n * @property {Element[]} previewToggles The array with toggle elements.\n * @property {Element}   viewElement    The target element.\n * @constructor\n */\nvar SnippetPreviewToggler = function (previewMode, previewToggles) {\n    this.previewMode = previewMode;\n    this.previewToggles = previewToggles;\n    this.viewElement = document.getElementById(\"snippet-preview-view\");\n};\n/**\n * Initializes the object by setting the current previewMode as the active one.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.initialize = function () {\n    this._setPreviewMode(this.previewMode, this._findElementByMode(this.previewMode));\n};\n/**\n * Binds a function on the click event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the click event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindClickEvent = function (previewToggle) {\n    previewToggle.addEventListener(\"click\", function () {\n        this._setPreviewMode(previewToggle.getAttribute(\"data-type\"), previewToggle);\n        this.removeTooltipAbility(previewToggle);\n    }.bind(this));\n};\n/**\n * Binds a function on the mouseleave event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the mouseleave event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindMouseleaveEvent = function (previewToggle) {\n    previewToggle.addEventListener(\"mouseleave\", function () {\n        this.removeTooltipAbility(previewToggle);\n    }.bind(this));\n};\n/**\n * Binds a function on the blur event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the blur event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindBlurEvent = function (previewToggle) {\n    previewToggle.addEventListener(\"blur\", function () {\n        this.restoreTooltipAbility(previewToggle);\n    }.bind(this));\n};\n/**\n * Binds a function on the mouseenter event of the preview toggle.\n *\n * @param {string} previewToggle The previewToggle to bind the mouseenter event on.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindMouseenterEvent = function (previewToggle) {\n    previewToggle.addEventListener(\"mouseenter\", function () {\n        this.restoreTooltipAbility(previewToggle);\n    }.bind(this));\n};\n/**\n * Sets the events for the preview toggles to switch between the preview modes and handle the tooltips.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.bindEvents = function () {\n    forEach(this.previewToggles, function (previewToggle) {\n        this.bindClickEvent(previewToggle);\n        this.bindMouseleaveEvent(previewToggle);\n        this.bindBlurEvent(previewToggle);\n        this.bindMouseenterEvent(previewToggle);\n    }.bind(this));\n};\n/**\n * Returns the element by given mode.\n *\n * @param {string} previewMode The mode used to find the element.\n * @returns {Element} The found element.\n * @private\n */\nSnippetPreviewToggler.prototype._findElementByMode = function (previewMode) {\n    return document.getElementsByClassName(\"snippet-editor__view-icon-\" + previewMode)[0];\n};\n/**\n * Sets the preview mode.\n *\n * @param {string}  previewMode   The preview mode that has to be set.\n * @param {Element} toggleElement The element that has been triggered.\n *\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._setPreviewMode = function (previewMode, toggleElement) {\n    this._removeActiveStates();\n    this._setActiveState(toggleElement);\n    domManipulation.removeClass(this.viewElement, previewModes[this.previewMode]);\n    domManipulation.addClass(this.viewElement, previewModes[previewMode]);\n    this.previewMode = previewMode;\n};\n/**\n * Sets the Snippet Preview Toggler to desktop mode.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setDesktopMode = function () {\n    this._setPreviewMode(\"desktop\", this._findElementByMode(\"desktop\"));\n};\n/**\n * Sets the Snippet Preview Toggler to mobile mode.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setMobileMode = function () {\n    this._setPreviewMode(\"mobile\", this._findElementByMode(\"mobile\"));\n};\n/**\n * Sets the initial view to desktop or mobile based on the width of the Snippet Preview container.\n *\n * @param {number} previewWidth the width of the Snippet Preview container.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setVisibility = function (previewWidth) {\n    if (previewWidth < minimumDesktopWidth) {\n        this.setMobileMode();\n        // At this point the desktop view is scrollable: set a CSS class to show the Scroll Hint message.\n        domManipulation.addClass(this.viewElement, \"snippet-editor__view--desktop-has-scroll\");\n    }\n    else {\n        this.setDesktopMode();\n    }\n};\n/**\n * When the window is resized, sets the visibilty of the Scroll Hint message.\n *\n * @param {number} previewWidth the width of the Snippet Preview container.\n *\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.setScrollHintVisibility = function (previewWidth) {\n    domManipulation.removeClass(this.viewElement, \"snippet-editor__view--desktop-has-scroll\");\n    if (previewWidth < minimumDesktopWidth) {\n        domManipulation.addClass(this.viewElement, \"snippet-editor__view--desktop-has-scroll\");\n    }\n};\n/**\n * Removes all active state for the preview toggles.\n *\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._removeActiveStates = function () {\n    forEach(this.previewToggles, this._removeActiveState.bind(this));\n};\n/**\n * Removes the active state for the given element.\n *\n * @param {Element} previewToggle The element to remove its state for.\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._removeActiveState = function (previewToggle) {\n    domManipulation.removeClass(previewToggle, \"snippet-editor__view-icon-\" + previewToggle.getAttribute(\"data-type\") + \"--active\");\n    domManipulation.removeClass(previewToggle, \"snippet-editor__view-icon--active\");\n    previewToggle.setAttribute(\"aria-pressed\", \"false\");\n};\n/**\n * Makes an element tooltip hidden.\n *\n * @param {Element} previewToggle The element on which the tooltip should be hidden.\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.removeTooltipAbility = function (previewToggle) {\n    domManipulation.addClass(previewToggle, \"yoast-tooltip-hidden\");\n};\n/**\n * Makes an element tooltip visible.\n *\n * @param {Element} previewToggle The element on which the tooltip should be visible.\n * @returns {void}\n */\nSnippetPreviewToggler.prototype.restoreTooltipAbility = function (previewToggle) {\n    domManipulation.removeClass(previewToggle, \"yoast-tooltip-hidden\");\n};\n/**\n * Adds active state to the given element.\n *\n * @param {Element} elementToActivate The element that will be activated.\n * @returns {void}\n * @private\n */\nSnippetPreviewToggler.prototype._setActiveState = function (elementToActivate) {\n    domManipulation.addClass(elementToActivate, \"snippet-editor__view-icon-\" + elementToActivate.getAttribute(\"data-type\") + \"--active\");\n    domManipulation.addClass(elementToActivate, \"snippet-editor__view-icon--active\");\n    elementToActivate.setAttribute(\"aria-pressed\", \"true\");\n};\nmodule.exports = SnippetPreviewToggler;\n//# sourceMappingURL=snippetPreviewToggler.js.map"]}