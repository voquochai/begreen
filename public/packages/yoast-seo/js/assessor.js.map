{"version":3,"sources":["../../js/assessor.js"],"names":["Researcher","require","MissingArgument","removeDuplicateMarks","AssessmentResult","showTrace","isUndefined","isFunction","forEach","filter","map","findIndex","find","ScoreRating","Assessor","i18n","options","setI18n","_assessments","_options","prototype","getAvailableAssessments","isApplicable","assessment","paper","researcher","hasOwnProperty","hasMarker","window","yoastHideMarkers","marker","getMarks","getSpecificMarker","getPaper","_lastPaper","getMarker","specificMarker","marks","assess","assessments","results","bind","setHasMarkers","executeAssessment","hasMarkers","_hasMarkers","result","getResult","setIdentifier","identifier","hasMarks","setMarker","assessmentError","setScore","setText","sprintf","dgettext","getValidResults","isValidResult","assessmentResult","hasScore","hasText","calculateOverallScore","totalScore","getScore","Math","round","length","addAssessment","name","push","removeAssessment","toDelete","splice","getAssessment","getApplicableAssessments","availableAssessments","availableAssessment","module","exports"],"mappings":"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","file":"assessor.js","sourcesContent":["\"use strict\";\nvar Researcher = require(\"./researcher.js\");\nvar MissingArgument = require(\"./errors/missingArgument\");\nvar removeDuplicateMarks = require(\"./markers/removeDuplicateMarks\");\nvar AssessmentResult = require(\"./values/AssessmentResult.js\");\nvar showTrace = require(\"./helpers/errors.js\").showTrace;\nvar isUndefined = require(\"lodash/isUndefined\");\nvar isFunction = require(\"lodash/isFunction\");\nvar forEach = require(\"lodash/forEach\");\nvar filter = require(\"lodash/filter\");\nvar map = require(\"lodash/map\");\nvar findIndex = require(\"lodash/findIndex\");\nvar find = require(\"lodash/find\");\nvar ScoreRating = 9;\n/**\n * Creates the Assessor.\n *\n * @param {Object} i18n The i18n object used for translations.\n * @param {Object} options The options for this assessor.\n * @param {Object} options.marker The marker to pass the list of marks to.\n *\n * @constructor\n */\nvar Assessor = function (i18n, options) {\n    this.setI18n(i18n);\n    this._assessments = [];\n    this._options = options || {};\n};\n/**\n * Checks if the i18n object is defined and sets it.\n *\n * @param {Object} i18n The i18n object used for translations.\n * @throws {MissingArgument} Parameter needs to be a valid i18n object.\n * @returns {void}\n */\nAssessor.prototype.setI18n = function (i18n) {\n    if (isUndefined(i18n)) {\n        throw new MissingArgument(\"The assessor requires an i18n object.\");\n    }\n    this.i18n = i18n;\n};\n/**\n * Gets all available assessments.\n * @returns {object} assessment\n */\nAssessor.prototype.getAvailableAssessments = function () {\n    return this._assessments;\n};\n/**\n * Checks whether or not the Assessment is applicable.\n *\n * @param {Object} assessment The Assessment object that needs to be checked.\n * @param {Paper} paper The Paper object to check against.\n * @param {Researcher} [researcher] The Researcher object containing additional information.\n * @returns {boolean} Whether or not the Assessment is applicable.\n */\nAssessor.prototype.isApplicable = function (assessment, paper, researcher) {\n    if (assessment.hasOwnProperty(\"isApplicable\") || typeof assessment.isApplicable === \"function\") {\n        return assessment.isApplicable(paper, researcher);\n    }\n    return true;\n};\n/**\n * Determines whether or not an assessment has a marker.\n *\n * @param {Object} assessment The assessment to check for.\n * @returns {boolean} Whether or not the assessment has a marker.\n */\nAssessor.prototype.hasMarker = function (assessment) {\n    if (!isUndefined(window) && !isUndefined(window.yoastHideMarkers) && window.yoastHideMarkers) {\n        return false;\n    }\n    return isFunction(this._options.marker) && (assessment.hasOwnProperty(\"getMarks\") || typeof assessment.getMarks === \"function\");\n};\n/**\n * Returns the specific marker for this assessor.\n *\n * @returns {Function} The specific marker for this assessor.\n */\nAssessor.prototype.getSpecificMarker = function () {\n    return this._options.marker;\n};\n/**\n * Returns the paper that was most recently assessed.\n *\n * @returns {Paper} The paper that was most recently assessed.\n */\nAssessor.prototype.getPaper = function () {\n    return this._lastPaper;\n};\n/**\n * Returns the marker for a given assessment, composes the specific marker with the assessment getMarks function.\n *\n * @param {Object} assessment The assessment for which we are retrieving the composed marker.\n * @param {Paper} paper The paper to retrieve the marker for.\n * @param {Researcher} researcher The researcher for the paper.\n * @returns {Function} A function that can mark the given paper according to the given assessment.\n */\nAssessor.prototype.getMarker = function (assessment, paper, researcher) {\n    var specificMarker = this._options.marker;\n    return function () {\n        var marks = assessment.getMarks(paper, researcher);\n        marks = removeDuplicateMarks(marks);\n        specificMarker(paper, marks);\n    };\n};\n/**\n * Runs the researches defined in the tasklist or the default researches.\n *\n * @param {Paper} paper The paper to run assessments on.\n * @returns {void}\n */\nAssessor.prototype.assess = function (paper) {\n    var researcher = new Researcher(paper);\n    var assessments = this.getAvailableAssessments();\n    this.results = [];\n    assessments = filter(assessments, function (assessment) {\n        return this.isApplicable(assessment, paper, researcher);\n    }.bind(this));\n    this.setHasMarkers(false);\n    this.results = map(assessments, this.executeAssessment.bind(this, paper, researcher));\n    this._lastPaper = paper;\n};\n/**\n * Sets the value of has markers with a boolean to determine if there are markers.\n *\n * @param {boolean} hasMarkers True when there are markers, otherwise it is false.\n * @returns {void}\n */\nAssessor.prototype.setHasMarkers = function (hasMarkers) {\n    this._hasMarkers = hasMarkers;\n};\n/**\n * Returns true when there are markers.\n *\n * @returns {boolean} Are there markers\n */\nAssessor.prototype.hasMarkers = function () {\n    return this._hasMarkers;\n};\n/**\n * Executes an assessment and returns the AssessmentResult.\n *\n * @param {Paper} paper The paper to pass to the assessment.\n * @param {Researcher} researcher The researcher to pass to the assessment.\n * @param {Object} assessment The assessment to execute.\n * @returns {AssessmentResult} The result of the assessment.\n */\nAssessor.prototype.executeAssessment = function (paper, researcher, assessment) {\n    var result;\n    try {\n        result = assessment.getResult(paper, researcher, this.i18n);\n        result.setIdentifier(assessment.identifier);\n        if (result.hasMarks() && this.hasMarker(assessment)) {\n            this.setHasMarkers(true);\n            result.setMarker(this.getMarker(assessment, paper, researcher));\n        }\n    }\n    catch (assessmentError) {\n        showTrace(assessmentError);\n        result = new AssessmentResult();\n        result.setScore(-1);\n        result.setText(this.i18n.sprintf(\n        /* Translators: %1$s expands to the name of the assessment. */\n        this.i18n.dgettext(\"js-text-analysis\", \"An error occurred in the '%1$s' assessment\"), assessment.identifier, assessmentError));\n    }\n    return result;\n};\n/**\n * Filters out all assessmentresults that have no score and no text.\n *\n * @returns {Array<AssessmentResult>} The array with all the valid assessments.\n */\nAssessor.prototype.getValidResults = function () {\n    return filter(this.results, function (result) {\n        return this.isValidResult(result);\n    }.bind(this));\n};\n/**\n * Returns if an assessmentResult is valid.\n *\n * @param {object} assessmentResult The assessmentResult to validate.\n * @returns {boolean} whether or not the result is valid.\n */\nAssessor.prototype.isValidResult = function (assessmentResult) {\n    return assessmentResult.hasScore() && assessmentResult.hasText();\n};\n/**\n * Returns the overallscore. Calculates the totalscore by adding all scores and dividing these\n * by the number of results times the ScoreRating.\n *\n * @returns {number} The overallscore\n */\nAssessor.prototype.calculateOverallScore = function () {\n    var results = this.getValidResults();\n    var totalScore = 0;\n    forEach(results, function (assessmentResult) {\n        totalScore += assessmentResult.getScore();\n    });\n    return Math.round(totalScore / (results.length * ScoreRating) * 100) || 0;\n};\n/**\n * Register an assessment to add it to the internal assessments object.\n *\n * @param {string} name The name of the assessment.\n * @param {object} assessment The object containing function to run as an assessment and it's requirements.\n * @returns {boolean} Whether registering the assessment was successful.\n * @private\n */\nAssessor.prototype.addAssessment = function (name, assessment) {\n    if (!assessment.hasOwnProperty(\"identifier\")) {\n        assessment.identifier = name;\n    }\n    this._assessments.push(assessment);\n    return true;\n};\n/**\n * Remove a specific Assessment from the list of Assessments.\n *\n * @param {string} name The Assessment to remove from the list of assessments.\n * @returns {void}\n */\nAssessor.prototype.removeAssessment = function (name) {\n    var toDelete = findIndex(this._assessments, function (assessment) {\n        return assessment.hasOwnProperty(\"identifier\") && name === assessment.identifier;\n    });\n    if (-1 !== toDelete) {\n        this._assessments.splice(toDelete, 1);\n    }\n};\n/**\n * Returns an assessment by identifier\n *\n * @param {string} identifier The identifier of the assessment.\n * @returns {undefined|Object} The object if found, otherwise undefined.\n */\nAssessor.prototype.getAssessment = function (identifier) {\n    return find(this._assessments, function (assessment) {\n        return assessment.hasOwnProperty(\"identifier\") && identifier === assessment.identifier;\n    });\n};\n/**\n * Checks which of the available assessments are applicable and returns an array with applicable assessments.\n *\n * @returns {Array} The array with applicable assessments.\n */\nAssessor.prototype.getApplicableAssessments = function () {\n    var availableAssessments = this.getAvailableAssessments();\n    return filter(availableAssessments, function (availableAssessment) {\n        return this.isApplicable(availableAssessment, this.getPaper());\n    }.bind(this));\n};\nmodule.exports = Assessor;\n//# sourceMappingURL=assessor.js.map"]}