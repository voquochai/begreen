{"version":3,"sources":["../../js/pluggable.js"],"names":["isUndefined","require","forEach","reduce","isString","isObject","InvalidTypeError","Pluggable","app","loaded","preloadThreshold","plugins","modifications","customTests","setTimeout","_pollLoadingPlugins","bind","prototype","_registerPlugin","pluginName","options","console","error","_validateUniqueness","_ready","status","_reloaded","refresh","_registerModification","modification","callable","priority","_validateOrigin","prio","callableObject","origin","push","_registerTest","_registerAssessment","assessor","name","assessment","addAssessment","pollTime","_allReady","pluginsLoaded","_pollTimeExceeded","allReady","plugin","_applyModifications","data","context","callChain","Array","length","_stripIllegalModifications","sort","a","b","newData","_addPluginTests","analyzer","map","customTest","_addPluginTest","pluginTest","addAnalysis","analysis","analyzeScorer","addScoring","scoring","index","module","exports"],"mappings":"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","file":"pluggable.js","sourcesContent":["\"use strict\";\nvar isUndefined = require(\"lodash/isUndefined\");\nvar forEach = require(\"lodash/forEach\");\nvar reduce = require(\"lodash/reduce\");\nvar isString = require(\"lodash/isString\");\nvar isObject = require(\"lodash/isObject\");\nvar InvalidTypeError = require(\"./errors/invalidType\");\n/**\n * The plugins object takes care of plugin registrations, preloading and managing data modifications.\n *\n * A plugin for YoastSEO.js is basically a piece of JavaScript that hooks into YoastSEO.js by registering modifications.\n * In order to do so, it must first register itself as a plugin with YoastSEO.js. To keep our content analysis fast, we\n * don't allow asynchronous modifications. That's why we require plugins to preload all data they need in order to modify\n * the content. If plugins need to preload data, they can first register, then preload using AJAX and call `ready` once\n * preloaded.\n *\n * To minimize client side memory usage, we request plugins to preload as little data as possible. If you need to dynamically\n * fetch more data in the process of content creation, you can reload your data set and let YoastSEO.js know you've reloaded\n * by calling `reloaded`.\n *\n * @todo: add list of supported modifications and compare on registration of modification\n */\n/**\n * Setup Pluggable and set its default values.\n *\n * @constructor\n * @param       {App}       app                 The App object to attach to.\n * @property    {number}    preloadThreshold\tThe maximum time plugins are allowed to preload before we load our content analysis.\n * @property    {object}    plugins             The plugins that have been registered.\n * @property    {object}    modifications \t    The modifications that have been registered. Every modification contains an array with callables.\n * @property    {Array}     customTests         All tests added by plugins.\n */\nvar Pluggable = function (app) {\n    this.app = app;\n    this.loaded = false;\n    this.preloadThreshold = 3000;\n    this.plugins = {};\n    this.modifications = {};\n    this.customTests = [];\n    // Allow plugins 1500 ms to register before we start polling their\n    setTimeout(this._pollLoadingPlugins.bind(this), 1500);\n};\n//  ***** DSL IMPLEMENTATION ***** //\n/**\n * Register a plugin with YoastSEO. A plugin can be declared \"ready\" right at registration or later using `this.ready`.\n *\n * @param {string}  pluginName      The name of the plugin to be registered.\n * @param {object}  options         The options passed by the plugin.\n * @param {string}  options.status  The status of the plugin being registered. Can either be \"loading\" or \"ready\".\n * @returns {boolean}               Whether or not the plugin was successfully registered.\n */\nPluggable.prototype._registerPlugin = function (pluginName, options) {\n    if (typeof pluginName !== \"string\") {\n        console.error(\"Failed to register plugin. Expected parameter `pluginName` to be a string.\");\n        return false;\n    }\n    if (!isUndefined(options) && typeof options !== \"object\") {\n        console.error(\"Failed to register plugin \" + pluginName + \". Expected parameters `options` to be a object.\");\n        return false;\n    }\n    if (this._validateUniqueness(pluginName) === false) {\n        console.error(\"Failed to register plugin. Plugin with name \" + pluginName + \" already exists\");\n        return false;\n    }\n    this.plugins[pluginName] = options;\n    return true;\n};\n/**\n * Declare a plugin \"ready\". Use this if you need to preload data with AJAX.\n *\n * @param {string} pluginName\tThe name of the plugin to be declared as ready.\n * @returns {boolean}           Whether or not the plugin was successfully declared ready.\n */\nPluggable.prototype._ready = function (pluginName) {\n    if (typeof pluginName !== \"string\") {\n        console.error(\"Failed to modify status for plugin \" + pluginName + \". Expected parameter `pluginName` to be a string.\");\n        return false;\n    }\n    if (isUndefined(this.plugins[pluginName])) {\n        console.error(\"Failed to modify status for plugin \" + pluginName + \". The plugin was not properly registered.\");\n        return false;\n    }\n    this.plugins[pluginName].status = \"ready\";\n    return true;\n};\n/**\n * Used to declare a plugin has been reloaded. If an analysis is currently running. We will reset it to ensure running the latest modifications.\n *\n * @param {string} pluginName   The name of the plugin to be declared as reloaded.\n * @returns {boolean}           Whether or not the plugin was successfully declared as reloaded.\n */\nPluggable.prototype._reloaded = function (pluginName) {\n    if (typeof pluginName !== \"string\") {\n        console.error(\"Failed to reload Content Analysis for \" + pluginName + \". Expected parameter `pluginName` to be a string.\");\n        return false;\n    }\n    if (isUndefined(this.plugins[pluginName])) {\n        console.error(\"Failed to reload Content Analysis for plugin \" + pluginName + \". The plugin was not properly registered.\");\n        return false;\n    }\n    this.app.refresh();\n    return true;\n};\n/**\n * Enables hooking a callable to a specific data filter supported by YoastSEO. Can only be performed for plugins that have finished loading.\n *\n * @param {string}      modification\tThe name of the filter\n * @param {function}    callable \t    The callable\n * @param {string}      pluginName \t    The plugin that is registering the modification.\n * @param {number}      priority\t    (optional) Used to specify the order in which the callables associated with a particular filter are called.\n * \t\t\t\t\t\t\t\t\t    Lower numbers correspond with earlier execution.\n * @returns {boolean}                   Whether or not applying the hook was successfull.\n */\nPluggable.prototype._registerModification = function (modification, callable, pluginName, priority) {\n    if (typeof modification !== \"string\") {\n        console.error(\"Failed to register modification for plugin \" + pluginName + \". Expected parameter `modification` to be a string.\");\n        return false;\n    }\n    if (typeof callable !== \"function\") {\n        console.error(\"Failed to register modification for plugin \" + pluginName + \". Expected parameter `callable` to be a function.\");\n        return false;\n    }\n    if (typeof pluginName !== \"string\") {\n        console.error(\"Failed to register modification for plugin \" + pluginName + \". Expected parameter `pluginName` to be a string.\");\n        return false;\n    }\n    // Validate origin\n    if (this._validateOrigin(pluginName) === false) {\n        console.error(\"Failed to register modification for plugin \" + pluginName + \". The integration has not finished loading yet.\");\n        return false;\n    }\n    // Default priority to 10\n    var prio = typeof priority === \"number\" ? priority : 10;\n    var callableObject = {\n        callable: callable,\n        origin: pluginName,\n        priority: prio,\n    };\n    // Make sure modification is defined on modifications object\n    if (isUndefined(this.modifications[modification])) {\n        this.modifications[modification] = [];\n    }\n    this.modifications[modification].push(callableObject);\n    return true;\n};\n/**\n * Register test for a specific plugin\n *\n * @returns {void}\n *\n * @deprecated\n */\nPluggable.prototype._registerTest = function () {\n    console.error(\"This function is deprecated, please use _registerAssessment\");\n};\n/**\n * Register an assessment for a specific plugin\n *\n * @param {object} assessor The assessor object where the assessments needs to be added.\n * @param {string} name The name of the assessment.\n * @param {function} assessment The function to run as an assessment.\n * @param {string} pluginName The name of the plugin associated with the assessment.\n * @returns {boolean} Whether registering the assessment was successful.\n * @private\n */\nPluggable.prototype._registerAssessment = function (assessor, name, assessment, pluginName) {\n    if (!isString(name)) {\n        throw new InvalidTypeError(\"Failed to register test for plugin \" + pluginName + \". Expected parameter `name` to be a string.\");\n    }\n    if (!isObject(assessment)) {\n        throw new InvalidTypeError(\"Failed to register assessment for plugin \" + pluginName +\n            \". Expected parameter `assessment` to be a function.\");\n    }\n    if (!isString(pluginName)) {\n        throw new InvalidTypeError(\"Failed to register assessment for plugin \" + pluginName +\n            \". Expected parameter `pluginName` to be a string.\");\n    }\n    // Prefix the name with the pluginName so the test name is always unique.\n    name = pluginName + \"-\" + name;\n    assessor.addAssessment(name, assessment);\n    return true;\n};\n// ***** PRIVATE HANDLERS *****//\n/**\n * Poller to handle loading of plugins. Plugins can register with our app to let us know they are going to hook into our Javascript. They are allowed\n * 5 seconds of pre-loading time to fetch all the data they need to be able to perform their data modifications. We will only apply data modifications\n * from plugins that have declared ready within the pre-loading time in order to safeguard UX and data integrity.\n *\n * @param   {number} pollTime (optional) The accumulated time to compare with the pre-load threshold.\n * @returns {void}\n * @private\n */\nPluggable.prototype._pollLoadingPlugins = function (pollTime) {\n    pollTime = isUndefined(pollTime) ? 0 : pollTime;\n    if (this._allReady() === true) {\n        this.loaded = true;\n        this.app.pluginsLoaded();\n    }\n    else if (pollTime >= this.preloadThreshold) {\n        this._pollTimeExceeded();\n    }\n    else {\n        pollTime += 50;\n        setTimeout(this._pollLoadingPlugins.bind(this, pollTime), 50);\n    }\n};\n/**\n * Checks if all registered plugins have finished loading\n *\n * @returns {boolean} Whether or not all registered plugins are loaded.\n * @private\n */\nPluggable.prototype._allReady = function () {\n    return reduce(this.plugins, function (allReady, plugin) {\n        return allReady && plugin.status === \"ready\";\n    }, true);\n};\n/**\n * Removes the plugins that were not loaded within time and calls `pluginsLoaded` on the app.\n *\n * @returns {void}\n * @private\n */\nPluggable.prototype._pollTimeExceeded = function () {\n    forEach(this.plugins, function (plugin, pluginName) {\n        if (!isUndefined(plugin.options) && plugin.options.status !== \"ready\") {\n            console.error(\"Error: Plugin \" + pluginName + \". did not finish loading in time.\");\n            delete this.plugins[pluginName];\n        }\n    });\n    this.loaded = true;\n    this.app.pluginsLoaded();\n};\n/**\n * Calls the callables added to a modification hook. See the YoastSEO.js Readme for a list of supported modification hooks.\n *\n * @param\t{string}    modification\tThe name of the filter\n * @param   {*}         data \t\t    The data to filter\n * @param   {*}         context\t\t    (optional) Object for passing context parameters to the callable.\n * @returns {*} \t\t                The filtered data\n * @private\n */\nPluggable.prototype._applyModifications = function (modification, data, context) {\n    var callChain = this.modifications[modification];\n    if (callChain instanceof Array && callChain.length > 0) {\n        callChain = this._stripIllegalModifications(callChain);\n        callChain.sort(function (a, b) {\n            return a.priority - b.priority;\n        });\n        forEach(callChain, function (callableObject) {\n            var callable = callableObject.callable;\n            var newData = callable(data, context);\n            if (typeof newData === typeof data) {\n                data = newData;\n            }\n            else {\n                console.error(\"Modification with name \" + modification + \" performed by plugin with name \" +\n                    callableObject.origin +\n                    \" was ignored because the data that was returned by it was of a different type than the data we had passed it.\");\n            }\n        });\n    }\n    return data;\n};\n/**\n * Adds new tests to the analyzer and it's scoring object.\n *\n * @param {YoastSEO.Analyzer} analyzer The analyzer object to add the tests to\n * @returns {void}\n * @private\n */\nPluggable.prototype._addPluginTests = function (analyzer) {\n    this.customTests.map(function (customTest) {\n        this._addPluginTest(analyzer, customTest);\n    }, this);\n};\n/**\n * Adds one new test to the analyzer and it's scoring object.\n *\n * @param {YoastSEO.Analyzer} analyzer              The analyzer that the test will be added to.\n * @param {Object}            pluginTest            The test to be added.\n * @param {string}            pluginTest.name       The name of the test.\n * @param {function}          pluginTest.callable   The function associated with the test.\n * @param {function}          pluginTest.analysis   The function associated with the analyzer.\n * @param {Object}            pluginTest.scoring    The scoring object to be used.\n * @returns {void}\n * @private\n */\nPluggable.prototype._addPluginTest = function (analyzer, pluginTest) {\n    analyzer.addAnalysis({\n        name: pluginTest.name,\n        callable: pluginTest.analysis,\n    });\n    analyzer.analyzeScorer.addScoring({\n        name: pluginTest.name,\n        scoring: pluginTest.scoring,\n    });\n};\n/**\n * Strips modifications from a callChain if they were not added with a valid origin.\n *\n * @param   {Array} callChain\t The callChain that contains items with possible invalid origins.\n * @returns {Array} callChain \t The stripped version of the callChain.\n * @private\n */\nPluggable.prototype._stripIllegalModifications = function (callChain) {\n    forEach(callChain, function (callableObject, index) {\n        if (this._validateOrigin(callableObject.origin) === false) {\n            delete callChain[index];\n        }\n    }.bind(this));\n    return callChain;\n};\n/**\n * Validates if origin of a modification has been registered and finished preloading.\n *\n * @param \t{string}    pluginName      The name of the plugin that needs to be validated.\n * @returns {boolean}                   Whether or not the origin is valid.\n * @private\n */\nPluggable.prototype._validateOrigin = function (pluginName) {\n    if (this.plugins[pluginName].status !== \"ready\") {\n        return false;\n    }\n    return true;\n};\n/**\n * Validates if registered plugin has a unique name.\n *\n * @param \t{string}    pluginName      The name of the plugin that needs to be validated for uniqueness.\n * @returns {boolean}                   Whether or not the plugin has a unique name.\n * @private\n */\nPluggable.prototype._validateUniqueness = function (pluginName) {\n    if (!isUndefined(this.plugins[pluginName])) {\n        return false;\n    }\n    return true;\n};\nmodule.exports = Pluggable;\n//# sourceMappingURL=pluggable.js.map"]}