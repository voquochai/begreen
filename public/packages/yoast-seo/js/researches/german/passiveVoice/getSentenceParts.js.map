{"version":3,"sources":["../../../../../js/researches/german/passiveVoice/getSentenceParts.js"],"names":["stopwords","require","arrayToRegex","stripSpaces","SentencePart","auxiliaries","allAuxiliaries","forEach","isEmpty","map","stopwordRegex","auxiliaryRegex","sanitizeMatches","matches","match","splitOnWords","sentence","splitSentences","stopword","splitSentence","split","push","startIndex","indexOf","endIndex","length","substr","createSentenceParts","sentences","sentenceParts","part","foundAuxiliaries","module","exports"],"mappings":"AAAA;;AACA,IAAIA,YAAYC,QAAQ,gBAAR,GAAhB;AACA,IAAIC,eAAeD,QAAQ,mDAAR,CAAnB;AACA,IAAIE,cAAcF,QAAQ,0CAAR,CAAlB;AACA,IAAIG,eAAeH,QAAQ,mBAAR,CAAnB;AACA,IAAII,cAAcJ,QAAQ,kBAAR,IAA8BK,cAAhD;AACA,IAAIC,UAAUN,QAAQ,gBAAR,CAAd;AACA,IAAIO,UAAUP,QAAQ,gBAAR,CAAd;AACA,IAAIQ,MAAMR,QAAQ,YAAR,CAAV;AACA,IAAIS,gBAAgBR,aAAaF,SAAb,CAApB;AACA,IAAIW,iBAAiBT,aAAaG,WAAb,CAArB;AACA;;;;;;AAMA,SAASO,eAAT,CAAyBC,OAAzB,EAAkC;AAC9B,WAAOJ,IAAII,OAAJ,EAAa,UAAUC,KAAV,EAAiB;AACjC,eAAOX,YAAYW,KAAZ,CAAP;AACH,KAFM,CAAP;AAGH;AACD;;;;;;;AAOA,SAASC,YAAT,CAAsBC,QAAtB,EAAgChB,SAAhC,EAA2C;AACvC,QAAIiB,iBAAiB,EAArB;AACA;AACAV,YAAQP,SAAR,EAAmB,UAAUkB,QAAV,EAAoB;AACnC,YAAIC,gBAAgBH,SAASI,KAAT,CAAeF,QAAf,CAApB;AACA,YAAI,CAACV,QAAQW,cAAc,CAAd,CAAR,CAAL,EAAgC;AAC5BF,2BAAeI,IAAf,CAAoBF,cAAc,CAAd,CAApB;AACH;AACD,YAAIG,aAAaN,SAASO,OAAT,CAAiBL,QAAjB,CAAjB;AACA,YAAIM,WAAWR,SAASS,MAAxB;AACAT,mBAAWb,YAAYa,SAASU,MAAT,CAAgBJ,UAAhB,EAA4BE,QAA5B,CAAZ,CAAX;AACH,KARD;AASA;AACAP,mBAAeI,IAAf,CAAoBL,QAApB;AACA,WAAOC,cAAP;AACH;AACD;;;;;;AAMA,SAASU,mBAAT,CAA6BC,SAA7B,EAAwC;AACpC,QAAIC,gBAAgB,EAApB;AACAtB,YAAQqB,SAAR,EAAmB,UAAUE,IAAV,EAAgB;AAC/B,YAAIC,mBAAmBnB,gBAAgBkB,KAAKhB,KAAL,CAAWH,kBAAkB,EAA7B,CAAhB,CAAvB;AACAkB,sBAAcR,IAAd,CAAmB,IAAIjB,YAAJ,CAAiB0B,IAAjB,EAAuBC,gBAAvB,EAAyC,OAAzC,CAAnB;AACH,KAHD;AAIA,WAAOF,aAAP;AACH;AACD;;;;;;AAMA,SAASV,aAAT,CAAuBH,QAAvB,EAAiC;AAC7B,QAAIhB,YAAYgB,SAASF,KAAT,CAAeJ,aAAf,KAAiC,EAAjD;AACA,QAAIO,iBAAiBF,aAAaC,QAAb,EAAuBhB,SAAvB,CAArB;AACA,WAAO2B,oBAAoBV,cAApB,CAAP;AACH;AACD;;;;;;AAMAe,OAAOC,OAAP,GAAiB,UAAUjB,QAAV,EAAoB;AACjC,WAAOG,cAAcH,QAAd,CAAP;AACH,CAFD;AAGA","file":"getSentenceParts.js","sourcesContent":["\"use strict\";\nvar stopwords = require(\"./stopwords.js\")();\nvar arrayToRegex = require(\"../../../stringProcessing/createRegexFromArray.js\");\nvar stripSpaces = require(\"../../../stringProcessing/stripSpaces.js\");\nvar SentencePart = require(\"./SentencePart.js\");\nvar auxiliaries = require(\"./auxiliaries.js\")().allAuxiliaries;\nvar forEach = require(\"lodash/forEach\");\nvar isEmpty = require(\"lodash/isEmpty\");\nvar map = require(\"lodash/map\");\nvar stopwordRegex = arrayToRegex(stopwords);\nvar auxiliaryRegex = arrayToRegex(auxiliaries);\n/**\n * Strips spaces from the auxiliary matches.\n *\n * @param {Array} matches A list with matches of auxiliaries.\n * @returns {Array} A list with matches with spaces removed.\n */\nfunction sanitizeMatches(matches) {\n    return map(matches, function (match) {\n        return stripSpaces(match);\n    });\n}\n/**\n * Splits sentences into sentence parts based on stopwords.\n *\n * @param {string} sentence The sentence to split.\n * @param {Array} stopwords The array with matched stopwords.\n * @returns {Array} The array with sentence parts.\n */\nfunction splitOnWords(sentence, stopwords) {\n    var splitSentences = [];\n    // Split the sentence on each found stopword and push this part in an array.\n    forEach(stopwords, function (stopword) {\n        var splitSentence = sentence.split(stopword);\n        if (!isEmpty(splitSentence[0])) {\n            splitSentences.push(splitSentence[0]);\n        }\n        var startIndex = sentence.indexOf(stopword);\n        var endIndex = sentence.length;\n        sentence = stripSpaces(sentence.substr(startIndex, endIndex));\n    });\n    // Push the remainder of the sentence in the sentence parts array.\n    splitSentences.push(sentence);\n    return splitSentences;\n}\n/**\n * Creates sentence parts based on split sentences.\n *\n * @param {Array} sentences The array with split sentences.\n * @returns {Array} The array with sentence parts.\n */\nfunction createSentenceParts(sentences) {\n    var sentenceParts = [];\n    forEach(sentences, function (part) {\n        var foundAuxiliaries = sanitizeMatches(part.match(auxiliaryRegex || []));\n        sentenceParts.push(new SentencePart(part, foundAuxiliaries, \"de_DE\"));\n    });\n    return sentenceParts;\n}\n/**\n * Splits the sentence into sentence parts based on stopwords.\n *\n * @param {string} sentence The text to split into sentence parts.\n * @returns {Array} The array with sentence parts.\n */\nfunction splitSentence(sentence) {\n    var stopwords = sentence.match(stopwordRegex) || [];\n    var splitSentences = splitOnWords(sentence, stopwords);\n    return createSentenceParts(splitSentences);\n}\n/**\n * Splits up the sentence in parts based on German stopwords.\n *\n * @param {string} sentence The sentence to split up in parts.\n * @returns {Array} The array with the sentence parts.\n */\nmodule.exports = function (sentence) {\n    return splitSentence(sentence);\n};\n//# sourceMappingURL=getSentenceParts.js.map"]}