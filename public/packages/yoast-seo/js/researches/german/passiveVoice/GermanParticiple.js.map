{"version":3,"sources":["../../../../../js/researches/german/passiveVoice/GermanParticiple.js"],"names":["Participle","require","getIndices","getIndicesByWord","getIndicesOfList","getIndicesByWordList","exceptionsParticiplesActive","auxiliaries","participleLike","exceptionsRegex","includes","map","GermanParticiple","participle","sentencePart","attributes","call","setSentencePartPassiveness","isPassive","inherits","prototype","hasNounSuffix","isInExceptionList","hasHabenSeinException","isAuxiliary","getParticiple","match","participleIndices","getSentencePart","habenSeinIndices","length","currentParticiple","index","module","exports"],"mappings":"AAAA;;AACA,IAAIA,aAAaC,QAAQ,+BAAR,CAAjB;AACA,IAAIC,aAAaD,QAAQ,sCAAR,EAAgDE,gBAAjE;AACA,IAAIC,mBAAmBH,QAAQ,sCAAR,EAAgDI,oBAAvE;AACA,IAAIC,8BAA8BL,QAAQ,kCAAR,GAAlC;AACA,IAAIM,cAAcN,QAAQ,kBAAR,IAA8BO,cAAhD;AACA,IAAIC,kBAAkB,mIAAtB;AACA,IAAIC,WAAWT,QAAQ,iBAAR,CAAf;AACA,IAAIU,MAAMV,QAAQ,YAAR,CAAV;AACA;;;;;;;;;AASA,IAAIW,mBAAmB,SAAnBA,gBAAmB,CAAUC,UAAV,EAAsBC,YAAtB,EAAoCC,UAApC,EAAgD;AACnEf,eAAWgB,IAAX,CAAgB,IAAhB,EAAsBH,UAAtB,EAAkCC,YAAlC,EAAgDC,UAAhD;AACA,SAAKE,0BAAL,CAAgC,KAAKC,SAAL,EAAhC;AACH,CAHD;AAIAjB,QAAQ,MAAR,EAAgBkB,QAAhB,CAAyBP,gBAAzB,EAA2CZ,UAA3C;AACA;;;;;AAKAY,iBAAiBQ,SAAjB,CAA2BF,SAA3B,GAAuC,YAAY;AAC/C,WAAO,CAAC,KAAKG,aAAL,EAAD,IACH,CAAC,KAAKC,iBAAL,EADE,IAEH,CAAC,KAAKC,qBAAL,EAFE,IAGH,CAAC,KAAKC,WAAL,EAHL;AAIH,CALD;AAMA;;;;;;AAMAZ,iBAAiBQ,SAAjB,CAA2BE,iBAA3B,GAA+C,YAAY;AACvD,WAAOZ,SAASJ,2BAAT,EAAsC,KAAKmB,aAAL,EAAtC,CAAP;AACH,CAFD;AAGA;;;;;;AAMAb,iBAAiBQ,SAAjB,CAA2BC,aAA3B,GAA2C,YAAY;AACnD,WAAO,KAAKI,aAAL,GAAqBC,KAArB,CAA2BjB,eAA3B,MAAgD,IAAvD;AACH,CAFD;AAGA;;;;;;AAMAG,iBAAiBQ,SAAjB,CAA2BG,qBAA3B,GAAmD,YAAY;AAC3D,QAAII,oBAAoBzB,WAAW,KAAKuB,aAAL,EAAX,EAAiC,KAAKG,eAAL,EAAjC,CAAxB;AACA,QAAIC,mBAAmBzB,iBAAiB,CAAC,OAAD,EAAU,MAAV,CAAjB,EAAoC,KAAKwB,eAAL,EAApC,CAAvB;AACA,QAAID,kBAAkBG,MAAlB,GAA2B,CAA3B,IAAgCD,iBAAiBC,MAAjB,KAA4B,CAAhE,EAAmE;AAC/D,eAAO,KAAP;AACH;AACDD,uBAAmBlB,IAAIkB,gBAAJ,EAAsB,OAAtB,CAAnB;AACA,QAAIE,oBAAoBJ,kBAAkB,CAAlB,CAAxB;AACA,WAAOjB,SAASmB,gBAAT,EAA2BE,kBAAkBC,KAAlB,GAA0BD,kBAAkBL,KAAlB,CAAwBI,MAAlD,GAA2D,CAAtF,CAAP;AACH,CATD;AAUA;;;;;;AAMAlB,iBAAiBQ,SAAjB,CAA2BI,WAA3B,GAAyC,YAAY;AACjD,WAAOd,SAASH,WAAT,EAAsB,KAAKkB,aAAL,EAAtB,CAAP;AACH,CAFD;AAGAQ,OAAOC,OAAP,GAAiBtB,gBAAjB;AACA","file":"GermanParticiple.js","sourcesContent":["\"use strict\";\nvar Participle = require(\"../../../values/Participle.js\");\nvar getIndices = require(\"../../../stringProcessing/indices.js\").getIndicesByWord;\nvar getIndicesOfList = require(\"../../../stringProcessing/indices.js\").getIndicesByWordList;\nvar exceptionsParticiplesActive = require(\"./exceptionsParticiplesActive.js\")();\nvar auxiliaries = require(\"./auxiliaries.js\")().participleLike;\nvar exceptionsRegex = /\\S+(apparat|arbeit|dienst|haft|halt|keit|kraft|not|pflicht|schaft|schrift|tät|wert|zeit)($|[ \\n\\r\\t\\.,'\\(\\)\\\"\\+\\-;!?:\\/»«‹›<>])/ig;\nvar includes = require(\"lodash/includes\");\nvar map = require(\"lodash/map\");\n/**\n * Creates an Participle object for the German language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {object} attributes  The attributes object.\n *\n * @constructor\n */\nvar GermanParticiple = function (participle, sentencePart, attributes) {\n    Participle.call(this, participle, sentencePart, attributes);\n    this.setSentencePartPassiveness(this.isPassive());\n};\nrequire(\"util\").inherits(GermanParticiple, Participle);\n/**\n * Checks if the text is passive based on the participle exceptions.\n *\n * @returns {boolean} Returns true if there is no exception, and the sentence is passive.\n */\nGermanParticiple.prototype.isPassive = function () {\n    return !this.hasNounSuffix() &&\n        !this.isInExceptionList() &&\n        !this.hasHabenSeinException() &&\n        !this.isAuxiliary();\n};\n/**\n * Checks whether a found participle is in the exception list.\n * If a word is in the exceptionsParticiplesActive list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list, otherwise returns false.\n */\nGermanParticiple.prototype.isInExceptionList = function () {\n    return includes(exceptionsParticiplesActive, this.getParticiple());\n};\n/**\n * Checks whether a found participle ends in a noun suffix.\n * If a word ends in a noun suffix from the exceptionsRegex, it isn't a participle.\n *\n * @returns {boolean} Returns true if it ends in a noun suffix, otherwise returns false.\n */\nGermanParticiple.prototype.hasNounSuffix = function () {\n    return this.getParticiple().match(exceptionsRegex) !== null;\n};\n/**\n * Checks whether a participle is followed by 'haben' or 'sein'.\n * If a participle is followed by one of these, the sentence is not passive.\n *\n * @returns {boolean} Returns true if it is an exception, otherwise returns false.\n */\nGermanParticiple.prototype.hasHabenSeinException = function () {\n    var participleIndices = getIndices(this.getParticiple(), this.getSentencePart());\n    var habenSeinIndices = getIndicesOfList([\"haben\", \"sein\"], this.getSentencePart());\n    if (participleIndices.length > 0 && habenSeinIndices.length === 0) {\n        return false;\n    }\n    habenSeinIndices = map(habenSeinIndices, \"index\");\n    var currentParticiple = participleIndices[0];\n    return includes(habenSeinIndices, currentParticiple.index + currentParticiple.match.length + 1);\n};\n/**\n * Checks whether a found participle is an auxiliary.\n * If a word is an auxiliary, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is an auxiliary, otherwise returns false.\n */\nGermanParticiple.prototype.isAuxiliary = function () {\n    return includes(auxiliaries, this.getParticiple());\n};\nmodule.exports = GermanParticiple;\n//# sourceMappingURL=GermanParticiple.js.map"]}