{"version":3,"sources":["../../../js/researches/getLinkStatistics.js"],"names":["getAnchors","require","findKeywordInUrl","getLinkType","checkNofollow","urlHelper","escapeRegExp","keywordInAnchor","keyword","anchor","locale","countLinkTypes","paper","getKeyword","getLocale","anchors","getText","permalink","getPermalink","linkCount","total","length","totalNaKeyword","totalKeyword","matchedAnchors","internalTotal","internalDofollow","internalNofollow","externalTotal","externalDofollow","externalNofollow","otherTotal","otherDofollow","otherNofollow","i","currentAnchor","anchorLink","getFromAnchorTag","linkToSelf","areEqual","push","linkType","linkFollow","module","exports"],"mappings":"AAAA;AACA;;AACA,IAAIA,aAAaC,QAAQ,2CAAR,CAAjB;AACA,IAAIC,mBAAmBD,QAAQ,yCAAR,CAAvB;AACA,IAAIE,cAAcF,QAAQ,oCAAR,CAAlB;AACA,IAAIG,gBAAgBH,QAAQ,sCAAR,CAApB;AACA,IAAII,YAAYJ,QAAQ,4BAAR,CAAhB;AACA,IAAIK,eAAeL,QAAQ,qBAAR,CAAnB;AACA;;;;;;;AAOA,IAAIM,kBAAkB,SAAlBA,eAAkB,CAAUC,OAAV,EAAmBC,MAAnB,EAA2BC,MAA3B,EAAmC;AACrD,QAAIF,YAAY,EAAhB,EAAoB;AAChB,eAAO,KAAP;AACH;AACD,WAAON,iBAAiBO,MAAjB,EAAyBD,OAAzB,EAAkCE,MAAlC,CAAP;AACH,CALD;AAMA;;;;;;;;;;;;;;;;;;;;AAoBA,IAAIC,iBAAiB,SAAjBA,cAAiB,CAAUC,KAAV,EAAiB;AAClC,QAAIJ,UAAUF,aAAaM,MAAMC,UAAN,EAAb,CAAd;AACA,QAAIH,SAASE,MAAME,SAAN,EAAb;AACA,QAAIC,UAAUf,WAAWY,MAAMI,OAAN,EAAX,CAAd;AACA,QAAIC,YAAYL,MAAMM,YAAN,EAAhB;AACA,QAAIC,YAAY;AACZC,eAAOL,QAAQM,MADH;AAEZC,wBAAgB,CAFJ;AAGZd,iBAAS;AACLe,0BAAc,CADT;AAELC,4BAAgB;AAFX,SAHG;AAOZC,uBAAe,CAPH;AAQZC,0BAAkB,CARN;AASZC,0BAAkB,CATN;AAUZC,uBAAe,CAVH;AAWZC,0BAAkB,CAXN;AAYZC,0BAAkB,CAZN;AAaZC,oBAAY,CAbA;AAcZC,uBAAe,CAdH;AAeZC,uBAAe;AAfH,KAAhB;AAiBA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAInB,QAAQM,MAA5B,EAAoCa,GAApC,EAAyC;AACrC,YAAIC,gBAAgBpB,QAAQmB,CAAR,CAApB;AACA,YAAIE,aAAa/B,UAAUgC,gBAAV,CAA2BF,aAA3B,CAAjB;AACA,YAAIG,aAAajC,UAAUkC,QAAV,CAAmBH,UAAnB,EAA+BnB,SAA/B,CAAjB;AACA,YAAIV,gBAAgBC,OAAhB,EAAyB2B,aAAzB,EAAwCzB,MAAxC,KAAmD,CAAC4B,UAAxD,EAAoE;AAChEnB,sBAAUX,OAAV,CAAkBe,YAAlB;AACAJ,sBAAUX,OAAV,CAAkBgB,cAAlB,CAAiCgB,IAAjC,CAAsCL,aAAtC;AACH;AACD,YAAIM,WAAWtC,YAAYgC,aAAZ,EAA2BlB,SAA3B,CAAf;AACA,YAAIyB,aAAatC,cAAc+B,aAAd,CAAjB;AACAhB,kBAAUsB,WAAW,OAArB;AACAtB,kBAAUsB,WAAWC,UAArB;AACH;AACD,WAAOvB,SAAP;AACH,CApCD;AAqCA;;;;;;AAMAwB,OAAOC,OAAP,GAAiB,UAAUhC,KAAV,EAAiB;AAC9B,WAAOD,eAAeC,KAAf,CAAP;AACH,CAFD;AAGA","file":"getLinkStatistics.js","sourcesContent":["\"use strict\";\n/** @module analyses/getLinkStatistics */\nvar getAnchors = require(\"../stringProcessing/getAnchorsFromText.js\");\nvar findKeywordInUrl = require(\"../stringProcessing/findKeywordInUrl.js\");\nvar getLinkType = require(\"../stringProcessing/getLinkType.js\");\nvar checkNofollow = require(\"../stringProcessing/checkNofollow.js\");\nvar urlHelper = require(\"../stringProcessing/url.js\");\nvar escapeRegExp = require(\"lodash/escapeRegExp\");\n/**\n * Checks whether or not an anchor contains the passed keyword.\n * @param {string} keyword The keyword to look for.\n * @param {string} anchor The anchor to check against.\n * @param {string} locale The locale used for transliteration.\n * @returns {boolean} Whether or not the keyword was found.\n */\nvar keywordInAnchor = function (keyword, anchor, locale) {\n    if (keyword === \"\") {\n        return false;\n    }\n    return findKeywordInUrl(anchor, keyword, locale);\n};\n/**\n * Counts the links found in the text.\n *\n * @param {object} paper The paper object containing text, keyword and url.\n * @returns {object} The object containing all linktypes.\n * total: the total number of links found.\n * totalNaKeyword: the total number of links if keyword is not available.\n * keyword: Object containing all the keyword related counts and matches.\n * keyword.totalKeyword: the total number of links with the keyword.\n * keyword.matchedAnchors: Array with the anchors that contain the keyword.\n * internalTotal: the total number of links that are internal.\n * internalDofollow: the internal links without a nofollow attribute.\n * internalNofollow: the internal links with a nofollow attribute.\n * externalTotal: the total number of links that are external.\n * externalDofollow: the external links without a nofollow attribute.\n * externalNofollow: the internal links with a dofollow attribute.\n * otherTotal: all links that are not HTTP or HTTPS.\n * otherDofollow: other links without a nofollow attribute.\n * otherNofollow: other links with a nofollow attribute.\n */\nvar countLinkTypes = function (paper) {\n    var keyword = escapeRegExp(paper.getKeyword());\n    var locale = paper.getLocale();\n    var anchors = getAnchors(paper.getText());\n    var permalink = paper.getPermalink();\n    var linkCount = {\n        total: anchors.length,\n        totalNaKeyword: 0,\n        keyword: {\n            totalKeyword: 0,\n            matchedAnchors: [],\n        },\n        internalTotal: 0,\n        internalDofollow: 0,\n        internalNofollow: 0,\n        externalTotal: 0,\n        externalDofollow: 0,\n        externalNofollow: 0,\n        otherTotal: 0,\n        otherDofollow: 0,\n        otherNofollow: 0,\n    };\n    for (var i = 0; i < anchors.length; i++) {\n        var currentAnchor = anchors[i];\n        var anchorLink = urlHelper.getFromAnchorTag(currentAnchor);\n        var linkToSelf = urlHelper.areEqual(anchorLink, permalink);\n        if (keywordInAnchor(keyword, currentAnchor, locale) && !linkToSelf) {\n            linkCount.keyword.totalKeyword++;\n            linkCount.keyword.matchedAnchors.push(currentAnchor);\n        }\n        var linkType = getLinkType(currentAnchor, permalink);\n        var linkFollow = checkNofollow(currentAnchor);\n        linkCount[linkType + \"Total\"]++;\n        linkCount[linkType + linkFollow]++;\n    }\n    return linkCount;\n};\n/**\n * Checks a text for anchors and returns an object with all linktypes found.\n *\n * @param {Paper} paper The paper object containing text, keyword and url.\n * @returns {Object} The object containing all linktypes.\n */\nmodule.exports = function (paper) {\n    return countLinkTypes(paper);\n};\n//# sourceMappingURL=getLinkStatistics.js.map"]}