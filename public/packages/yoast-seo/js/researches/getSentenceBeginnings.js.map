{"version":3,"sources":["../../../js/researches/getSentenceBeginnings.js"],"names":["getWords","require","stripSpaces","stripTags","stripFullTags","getFirstWordExceptions","isEmpty","forEach","filter","startsWithSameWord","currentSentenceBeginning","nextSentenceBeginning","compareFirstWords","sentenceBeginnings","sentences","consecutiveFirstWords","foundSentences","sameBeginnings","beginning","i","push","word","count","sanitizeSentence","sentence","replace","getSentenceBeginning","firstWordExceptions","words","length","firstWord","toLocaleLowerCase","indexOf","module","exports","paper","researcher","getResearch","getLocale","map"],"mappings":"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","file":"getSentenceBeginnings.js","sourcesContent":["\"use strict\";\nlet getWords = require(\"../stringProcessing/getWords.js\");\nlet stripSpaces = require(\"../stringProcessing/stripSpaces.js\");\nlet stripTags = require(\"../stringProcessing/stripHTMLTags.js\").stripFullTags;\nlet getFirstWordExceptions = require(\"../helpers/getFirstWordExceptions.js\");\nlet isEmpty = require(\"lodash/isEmpty\");\nlet forEach = require(\"lodash/forEach\");\nlet filter = require(\"lodash/filter\");\n/**\n * Compares the first word of each sentence with the first word of the following sentence.\n *\n * @param {string} currentSentenceBeginning The first word of the current sentence.\n * @param {string} nextSentenceBeginning The first word of the next sentence.\n * @returns {boolean} Returns true if sentence beginnings match.\n */\nlet startsWithSameWord = function (currentSentenceBeginning, nextSentenceBeginning) {\n    if (!isEmpty(currentSentenceBeginning) && currentSentenceBeginning === nextSentenceBeginning) {\n        return true;\n    }\n    return false;\n};\n/**\n * Counts the number of similar sentence beginnings.\n *\n * @param {Array} sentenceBeginnings The array containing the first word of each sentence.\n * @param {Array} sentences The array containing all sentences.\n * @returns {Array} The array containing the objects containing the first words and the corresponding counts.\n */\nlet compareFirstWords = function (sentenceBeginnings, sentences) {\n    let consecutiveFirstWords = [];\n    let foundSentences = [];\n    let sameBeginnings = 1;\n    forEach(sentenceBeginnings, function (beginning, i) {\n        let currentSentenceBeginning = beginning;\n        let nextSentenceBeginning = sentenceBeginnings[i + 1];\n        foundSentences.push(sentences[i]);\n        if (startsWithSameWord(currentSentenceBeginning, nextSentenceBeginning)) {\n            sameBeginnings++;\n        }\n        else {\n            consecutiveFirstWords.push({ word: currentSentenceBeginning, count: sameBeginnings, sentences: foundSentences });\n            sameBeginnings = 1;\n            foundSentences = [];\n        }\n    });\n    return consecutiveFirstWords;\n};\n/**\n * Sanitizes the sentence.\n *\n * @param {string} sentence The sentence to sanitize.\n * @returns {string} The sanitized sentence.\n */\nfunction sanitizeSentence(sentence) {\n    sentence = stripTags(sentence);\n    sentence = sentence.replace(/^[^A-Za-z0-9]/, \"\");\n    return sentence;\n}\n/**\n * Retrieves the first word from the sentence.\n *\n * @param {string} sentence The sentence to retrieve the first word from.\n * @param {Array} firstWordExceptions Exceptions to match against.\n * @returns {string} The first word of the sentence.\n */\nfunction getSentenceBeginning(sentence, firstWordExceptions) {\n    sentence = sanitizeSentence(sentence);\n    let words = getWords(stripSpaces(sentence));\n    if (words.length === 0) {\n        return \"\";\n    }\n    let firstWord = words[0].toLocaleLowerCase();\n    if (firstWordExceptions.indexOf(firstWord) > -1 && words.length > 1) {\n        firstWord += \" \" + words[1];\n    }\n    return firstWord;\n}\n/**\n * Gets the first word of each sentence from the text, and returns an object containing the first word of each sentence and the corresponding counts.\n *\n * @param {Paper} paper The Paper object to get the text from.\n * @param {Researcher} researcher The researcher this research is a part of.\n * @returns {Object} The object containing the first word of each sentence and the corresponding counts.\n */\nmodule.exports = function (paper, researcher) {\n    let sentences = researcher.getResearch(\"sentences\");\n    let firstWordExceptions = getFirstWordExceptions(paper.getLocale())();\n    let sentenceBeginnings = sentences.map(function (sentence) {\n        return getSentenceBeginning(sentence, firstWordExceptions);\n    });\n    sentences = sentences.filter(function (sentence) {\n        return getWords(stripSpaces(sentence)).length > 0;\n    });\n    sentenceBeginnings = filter(sentenceBeginnings);\n    return compareFirstWords(sentenceBeginnings, sentences);\n};\n//# sourceMappingURL=getSentenceBeginnings.js.map"]}