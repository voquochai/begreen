{"version":3,"sources":["../../../js/researches/getPassiveVoice.js"],"names":["getSentences","require","stripHTMLTags","stripFullTags","getLanguage","Sentence","getSentencePartsDefault","determinePassivesDefault","getSentencePartsGerman","determinePassivesGerman","forEach","getSentenceParts","sentence","language","sentenceParts","determinePassives","sentencePart","setPassive","getSentencePartText","getAuxiliaries","module","exports","paper","text","getText","locale","getLocale","sentences","sentenceObjects","push","passiveSentences","strippedSentence","getSentenceText","toLocaleLowerCase","passive","isPassive","total","length","passives"],"mappings":"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","file":"getPassiveVoice.js","sourcesContent":["\"use strict\";\nvar getSentences = require(\"../stringProcessing/getSentences.js\");\nvar stripHTMLTags = require(\"../stringProcessing/stripHTMLTags.js\").stripFullTags;\nvar getLanguage = require(\"../helpers/getLanguage.js\");\nvar Sentence = require(\"../values/Sentence.js\");\n// Imports used for English, French and Spanish.\nvar getSentencePartsDefault = require(\"./passiveVoice/getSentenceParts.js\");\nvar determinePassivesDefault = require(\"./passiveVoice/determinePassives\");\n// Imports used for German.\nvar getSentencePartsGerman = require(\"./german/passiveVoice/getSentenceParts.js\");\nvar determinePassivesGerman = require(\"./german/passiveVoice/determinePassives.js\");\nvar forEach = require(\"lodash/forEach\");\n/**\n * Gets the sentence parts from a sentence by determining sentence breakers.\n *\n * @param {string} sentence The sentence to split up in sentence parts.\n * @param {string} language The language to use for determining how to get sentence parts.\n * @returns {Array} The array with all parts of a sentence that have an auxiliary.\n */\nvar getSentenceParts = function (sentence, language) {\n    var sentenceParts = [];\n    switch (language) {\n        case \"de\":\n            sentenceParts = getSentencePartsGerman(sentence);\n            break;\n        case \"fr\":\n            sentenceParts = getSentencePartsDefault(sentence, \"fr\");\n            break;\n        case \"es\":\n            sentenceParts = getSentencePartsDefault(sentence, \"es\");\n            break;\n        case \"en\":\n        default:\n            sentenceParts = getSentencePartsDefault(sentence, \"en\");\n            break;\n    }\n    return sentenceParts;\n};\n/**\n * Checks the sentence part for any passive verb.\n *\n * @param {object} sentencePart The sentence part object to check for passives.\n * @param {string} language The language to use for finding passive verbs.\n * @returns {boolean} True if passive is found, false if no passive is found.\n */\nvar determinePassives = function (sentencePart, language) {\n    switch (language) {\n        case \"de\":\n            sentencePart.setPassive(determinePassivesGerman(sentencePart.getSentencePartText(), sentencePart.getAuxiliaries()));\n            break;\n        case \"fr\":\n            sentencePart.setPassive(determinePassivesDefault(sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), \"fr\"));\n            break;\n        case \"es\":\n            sentencePart.setPassive(determinePassivesDefault(sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), \"es\"));\n            break;\n        case \"en\":\n        default:\n            sentencePart.setPassive(determinePassivesDefault(sentencePart.getSentencePartText(), sentencePart.getAuxiliaries(), \"en\"));\n            break;\n    }\n};\n/**\n * Determines the number of passive sentences in the text.\n *\n * @param {Paper} paper The paper object to get the text from.\n * @returns {object} The number of passives found in the text and the passive sentences.\n */\nmodule.exports = function (paper) {\n    var text = paper.getText();\n    var locale = paper.getLocale();\n    var language = getLanguage(locale);\n    var sentences = getSentences(text);\n    var sentenceObjects = [];\n    forEach(sentences, function (sentence) {\n        sentenceObjects.push(new Sentence(sentence, locale));\n    });\n    var passiveSentences = [];\n    // Get sentence parts for each sentence.\n    forEach(sentenceObjects, function (sentence) {\n        var strippedSentence = stripHTMLTags(sentence.getSentenceText()).toLocaleLowerCase();\n        var sentenceParts = getSentenceParts(strippedSentence, language);\n        var passive = false;\n        forEach(sentenceParts, function (sentencePart) {\n            determinePassives(sentencePart, language);\n            passive = passive || sentencePart.isPassive();\n        });\n        if (passive === true) {\n            passiveSentences.push(sentence.getSentenceText());\n        }\n    });\n    return {\n        total: sentences.length,\n        passives: passiveSentences,\n    };\n};\n//# sourceMappingURL=getPassiveVoice.js.map"]}