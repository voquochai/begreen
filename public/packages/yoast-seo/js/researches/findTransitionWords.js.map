{"version":3,"sources":["../../../js/researches/findTransitionWords.js"],"names":["createRegexFromDoubleArray","require","getSentences","normalizeSingleQuotes","normalizeSingle","getTransitionWords","matchWordInSentence","isWordInSentence","forEach","filter","memoize","createRegexFromDoubleArrayCached","matchTwoPartTransitionWords","sentence","twoPartTransitionWords","twoPartTransitionWordsRegex","match","matchTransitionWords","transitionWords","matchedTransitionWords","word","checkSentencesForTransitionWords","sentences","results","twoPartMatches","push","transitionWordMatches","length","module","exports","paper","locale","getLocale","getText","sentenceResults","totalSentences","transitionWordSentences"],"mappings":"AAAA;;AACA,IAAIA,6BAA6BC,QAAQ,mDAAR,CAAjC;AACA,IAAIC,eAAeD,QAAQ,qCAAR,CAAnB;AACA,IAAIE,wBAAwBF,QAAQ,+BAAR,EAAyCG,eAArE;AACA,IAAIC,qBAAqBJ,QAAQ,kCAAR,CAAzB;AACA,IAAIK,sBAAsBL,QAAQ,4CAAR,EAAsDM,gBAAhF;AACA,IAAIC,UAAUP,QAAQ,gBAAR,CAAd;AACA,IAAIQ,SAASR,QAAQ,eAAR,CAAb;AACA,IAAIS,UAAUT,QAAQ,gBAAR,CAAd;AACA,IAAIU,mCAAmCD,QAAQV,0BAAR,CAAvC;AACA;;;;;;;AAOA,IAAIY,8BAA8B,SAA9BA,2BAA8B,CAAUC,QAAV,EAAoBC,sBAApB,EAA4C;AAC1ED,eAAWV,sBAAsBU,QAAtB,CAAX;AACA,QAAIE,8BAA8BJ,iCAAiCG,sBAAjC,CAAlC;AACA,WAAOD,SAASG,KAAT,CAAeD,2BAAf,CAAP;AACH,CAJD;AAKA;;;;;;;AAOA,IAAIE,uBAAuB,SAAvBA,oBAAuB,CAAUJ,QAAV,EAAoBK,eAApB,EAAqC;AAC5DL,eAAWV,sBAAsBU,QAAtB,CAAX;AACA,QAAIM,yBAAyBV,OAAOS,eAAP,EAAwB,UAAUE,IAAV,EAAgB;AACjE,eAAOd,oBAAoBc,IAApB,EAA0BP,QAA1B,CAAP;AACH,KAF4B,CAA7B;AAGA,WAAOM,sBAAP;AACH,CAND;AAOA;;;;;;;AAOA,IAAIE,mCAAmC,SAAnCA,gCAAmC,CAAUC,SAAV,EAAqBJ,eAArB,EAAsC;AACzE,QAAIK,UAAU,EAAd;AACAf,YAAQc,SAAR,EAAmB,UAAUT,QAAV,EAAoB;AACnC,YAAIW,iBAAiBZ,4BAA4BC,QAA5B,EAAsCK,gBAAgBJ,sBAAhB,EAAtC,CAArB;AACA,YAAIU,mBAAmB,IAAvB,EAA6B;AACzBD,oBAAQE,IAAR,CAAa;AACTZ,0BAAUA,QADD;AAETK,iCAAiBM;AAFR,aAAb;AAIA;AACH;AACD,YAAIE,wBAAwBT,qBAAqBJ,QAArB,EAA+BK,gBAAgBA,eAA/C,CAA5B;AACA,YAAIQ,sBAAsBC,MAAtB,KAAiC,CAArC,EAAwC;AACpCJ,oBAAQE,IAAR,CAAa;AACTZ,0BAAUA,QADD;AAETK,iCAAiBQ;AAFR,aAAb;AAIA;AACH;AACJ,KAjBD;AAkBA,WAAOH,OAAP;AACH,CArBD;AAsBA;;;;;;;;AAQAK,OAAOC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAC9B,QAAIC,SAASD,MAAME,SAAN,EAAb;AACA,QAAId,kBAAkBb,mBAAmB0B,MAAnB,CAAtB;AACA,QAAIT,YAAYpB,aAAa4B,MAAMG,OAAN,EAAb,CAAhB;AACA,QAAIC,kBAAkBb,iCAAiCC,SAAjC,EAA4CJ,eAA5C,CAAtB;AACA,WAAO;AACHiB,wBAAgBb,UAAUK,MADvB;AAEHO,yBAAiBA,eAFd;AAGHE,iCAAyBF,gBAAgBP;AAHtC,KAAP;AAKH,CAVD;AAWA","file":"findTransitionWords.js","sourcesContent":["\"use strict\";\nvar createRegexFromDoubleArray = require(\"../stringProcessing/createRegexFromDoubleArray.js\");\nvar getSentences = require(\"../stringProcessing/getSentences.js\");\nvar normalizeSingleQuotes = require(\"../stringProcessing/quotes.js\").normalizeSingle;\nvar getTransitionWords = require(\"../helpers/getTransitionWords.js\");\nvar matchWordInSentence = require(\"../stringProcessing/matchWordInSentence.js\").isWordInSentence;\nvar forEach = require(\"lodash/forEach\");\nvar filter = require(\"lodash/filter\");\nvar memoize = require(\"lodash/memoize\");\nvar createRegexFromDoubleArrayCached = memoize(createRegexFromDoubleArray);\n/**\n * Matches the sentence against two part transition words.\n *\n * @param {string} sentence The sentence to match against.\n * @param {Array} twoPartTransitionWords The array containing two-part transition words.\n * @returns {Array} The found transitional words.\n */\nvar matchTwoPartTransitionWords = function (sentence, twoPartTransitionWords) {\n    sentence = normalizeSingleQuotes(sentence);\n    var twoPartTransitionWordsRegex = createRegexFromDoubleArrayCached(twoPartTransitionWords);\n    return sentence.match(twoPartTransitionWordsRegex);\n};\n/**\n * Matches the sentence against transition words.\n *\n * @param {string} sentence The sentence to match against.\n * @param {Array} transitionWords The array containing transition words.\n * @returns {Array} The found transitional words.\n */\nvar matchTransitionWords = function (sentence, transitionWords) {\n    sentence = normalizeSingleQuotes(sentence);\n    var matchedTransitionWords = filter(transitionWords, function (word) {\n        return matchWordInSentence(word, sentence);\n    });\n    return matchedTransitionWords;\n};\n/**\n * Checks the passed sentences to see if they contain transition words.\n *\n * @param {Array} sentences The sentences to match against.\n * @param {Object} transitionWords The object containing both transition words and two part transition words.\n * @returns {Array} Array of sentence objects containing the complete sentence and the transition words.\n */\nvar checkSentencesForTransitionWords = function (sentences, transitionWords) {\n    var results = [];\n    forEach(sentences, function (sentence) {\n        var twoPartMatches = matchTwoPartTransitionWords(sentence, transitionWords.twoPartTransitionWords());\n        if (twoPartMatches !== null) {\n            results.push({\n                sentence: sentence,\n                transitionWords: twoPartMatches,\n            });\n            return;\n        }\n        var transitionWordMatches = matchTransitionWords(sentence, transitionWords.transitionWords);\n        if (transitionWordMatches.length !== 0) {\n            results.push({\n                sentence: sentence,\n                transitionWords: transitionWordMatches,\n            });\n            return;\n        }\n    });\n    return results;\n};\n/**\n * Checks how many sentences from a text contain at least one transition word or two-part transition word\n * that are defined in the transition words config and two part transition words config.\n *\n * @param {Paper} paper The Paper object to get text from.\n * @returns {object} An object with the total number of sentences in the text\n * and the total number of sentences containing one or more transition words.\n */\nmodule.exports = function (paper) {\n    var locale = paper.getLocale();\n    var transitionWords = getTransitionWords(locale);\n    var sentences = getSentences(paper.getText());\n    var sentenceResults = checkSentencesForTransitionWords(sentences, transitionWords);\n    return {\n        totalSentences: sentences.length,\n        sentenceResults: sentenceResults,\n        transitionWordSentences: sentenceResults.length,\n    };\n};\n//# sourceMappingURL=findTransitionWords.js.map"]}