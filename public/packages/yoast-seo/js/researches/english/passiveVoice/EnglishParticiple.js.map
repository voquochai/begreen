{"version":3,"sources":["../../../../../js/researches/english/passiveVoice/EnglishParticiple.js"],"names":["Participle","require","checkException","nonVerbsEndingEd","directPrecedenceException","precedenceException","includes","isEmpty","intersection","irregularExclusionArray","EnglishParticiple","participle","sentencePart","attributes","call","inherits","prototype","isPassive","getSentencePart","participleIndex","indexOf","getParticiple","isNonVerbEndingEd","hasRidException","getType","auxiliaries","getAuxiliaries","module","exports"],"mappings":"AAAA;;AACA,IAAIA,aAAaC,QAAQ,+BAAR,CAAjB;AACA,IAAIC,iBAAiBD,QAAQ,sCAAR,CAArB;AACA,IAAIE,mBAAmBF,QAAQ,yBAAR,GAAvB;AACA,IAAIG,4BAA4BH,QAAQ,qDAAR,CAAhC;AACA,IAAII,sBAAsBJ,QAAQ,+CAAR,CAA1B;AACA,IAAIK,WAAWL,QAAQ,iBAAR,CAAf;AACA,IAAIM,UAAUN,QAAQ,gBAAR,CAAd;AACA,IAAIO,eAAeP,QAAQ,qBAAR,CAAnB;AACA,IAAIQ,0BAA0B,CAAC,KAAD,EAAQ,MAAR,EAAgB,SAAhB,EAA2B,KAA3B,EAAkC,QAAlC,CAA9B;AACA;;;;;;;;;AASA,IAAIC,oBAAoB,SAApBA,iBAAoB,CAAUC,UAAV,EAAsBC,YAAtB,EAAoCC,UAApC,EAAgD;AACpEb,eAAWc,IAAX,CAAgB,IAAhB,EAAsBH,UAAtB,EAAkCC,YAAlC,EAAgDC,UAAhD;AACAX,mBAAeY,IAAf,CAAoB,IAApB;AACH,CAHD;AAIAb,QAAQ,MAAR,EAAgBc,QAAhB,CAAyBL,iBAAzB,EAA4CV,UAA5C;AACA;;;;;;AAMAU,kBAAkBM,SAAlB,CAA4BC,SAA5B,GAAwC,YAAY;AAChD,QAAIL,eAAe,KAAKM,eAAL,EAAnB;AACA,QAAIC,kBAAkBP,aAAaQ,OAAb,CAAqB,KAAKC,aAAL,EAArB,CAAtB;AACA,WAAO,CAAC,KAAKC,iBAAL,EAAD,IACH,CAAC,KAAKC,eAAL,EADE,IAEH,CAAC,KAAKnB,yBAAL,CAA+BQ,YAA/B,EAA6CO,eAA7C,CAFE,IAGH,CAAC,KAAKd,mBAAL,CAAyBO,YAAzB,EAAuCO,eAAvC,CAHL;AAIH,CAPD;AAQA;;;;;;;AAOAT,kBAAkBM,SAAlB,CAA4BM,iBAA5B,GAAgD,YAAY;AACxD,QAAI,KAAKE,OAAL,OAAmB,WAAvB,EAAoC;AAChC,eAAO,KAAP;AACH;AACD,WAAOlB,SAASH,gBAAT,EAA2B,KAAKkB,aAAL,EAA3B,CAAP;AACH,CALD;AAMA;;;;;;;AAOAX,kBAAkBM,SAAlB,CAA4BO,eAA5B,GAA8C,YAAY;AACtD,QAAI,KAAKF,aAAL,OAAyB,KAA7B,EAAoC;AAChC,YAAII,cAAc,KAAKC,cAAL,EAAlB;AACA,eAAO,CAACnB,QAAQC,aAAaC,uBAAb,EAAsCgB,WAAtC,CAAR,CAAR;AACH;AACD,WAAO,KAAP;AACH,CAND;AAOAf,kBAAkBM,SAAlB,CAA4BZ,yBAA5B,GAAwDA,yBAAxD;AACAM,kBAAkBM,SAAlB,CAA4BX,mBAA5B,GAAkDA,mBAAlD;AACAsB,OAAOC,OAAP,GAAiBlB,iBAAjB;AACA","file":"EnglishParticiple.js","sourcesContent":["\"use strict\";\nvar Participle = require(\"../../../values/Participle.js\");\nvar checkException = require(\"../../passiveVoice/checkException.js\");\nvar nonVerbsEndingEd = require(\"./non-verb-ending-ed.js\")();\nvar directPrecedenceException = require(\"../../../stringProcessing/directPrecedenceException\");\nvar precedenceException = require(\"../../../stringProcessing/precedenceException\");\nvar includes = require(\"lodash/includes\");\nvar isEmpty = require(\"lodash/isEmpty\");\nvar intersection = require(\"lodash/intersection\");\nvar irregularExclusionArray = [\"get\", \"gets\", \"getting\", \"got\", \"gotten\"];\n/**\n * Creates an Participle object for the English language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes  The attributes object.\n *\n * @constructor\n */\nvar EnglishParticiple = function (participle, sentencePart, attributes) {\n    Participle.call(this, participle, sentencePart, attributes);\n    checkException.call(this);\n};\nrequire(\"util\").inherits(EnglishParticiple, Participle);\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nEnglishParticiple.prototype.isPassive = function () {\n    let sentencePart = this.getSentencePart();\n    let participleIndex = sentencePart.indexOf(this.getParticiple());\n    return !this.isNonVerbEndingEd() &&\n        !this.hasRidException() &&\n        !this.directPrecedenceException(sentencePart, participleIndex) &&\n        !this.precedenceException(sentencePart, participleIndex);\n};\n/**\n * Checks whether a found participle is in the nonVerbsEndingEd list.\n * If a word is in the nonVerbsEndingEd list, it isn't a participle.\n * Irregular participles do not end in -ed, and therefore cannot be in the nonVerbsEndingEd list.\n *\n * @returns {boolean} Returns true if it is in the nonVerbsEndingEd list, otherwise returns false.\n */\nEnglishParticiple.prototype.isNonVerbEndingEd = function () {\n    if (this.getType() === \"irregular\") {\n        return false;\n    }\n    return includes(nonVerbsEndingEd, this.getParticiple());\n};\n/**\n * Checks whether the participle is 'rid' in combination with 'get', 'gets', 'getting', 'got' or 'gotten'.\n * If this is true, the participle is not passive.\n *\n * @returns {boolean} Returns true if 'rid' is found in combination with a form of 'get'\n * otherwise returns false.\n */\nEnglishParticiple.prototype.hasRidException = function () {\n    if (this.getParticiple() === \"rid\") {\n        var auxiliaries = this.getAuxiliaries();\n        return !isEmpty(intersection(irregularExclusionArray, auxiliaries));\n    }\n    return false;\n};\nEnglishParticiple.prototype.directPrecedenceException = directPrecedenceException;\nEnglishParticiple.prototype.precedenceException = precedenceException;\nmodule.exports = EnglishParticiple;\n//# sourceMappingURL=EnglishParticiple.js.map"]}