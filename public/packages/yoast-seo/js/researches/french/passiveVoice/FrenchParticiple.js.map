{"version":3,"sources":["../../../../../js/researches/french/passiveVoice/FrenchParticiple.js"],"names":["Participle","require","checkException","directPrecedenceException","precedenceException","exceptionsParticiplesAdjectivesVerbs","adjectivesVerbs","exceptionsParticiplesNounsVowel","nounsStartingWithVowel","exceptionsParticiplesNounsConsonant","nounsStartingWithConsonant","exceptionsParticiplesOthers","others","includes","forEach","memoize","FrenchParticiple","participle","sentencePart","attributes","call","inherits","checkIrregular","getType","prototype","isPassive","getSentencePart","participleIndex","indexOf","getParticiple","isOnAdjectivesVerbsExceptionList","isOnNounsExceptionList","isOnOthersExceptionList","getExceptionsParticiplesAdjectivesVerbsRegexes","exceptionsParticiplesAdjectivesVerbsRegexes","exceptionParticiplesAdjectivesVerbs","push","RegExp","getExceptionsParticiplesNounsRegexes","exceptionsParticiplesNounsRegexes","exceptionParticipleNounVowel","exceptionParticipleNounConsonant","checkParticipleExceptionRegexes","participleExceptionRegexes","match","participleExceptionRegex","exceptionMatch","length","exceptionsParticiplesNouns","module","exports"],"mappings":"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","file":"FrenchParticiple.js","sourcesContent":["\"use strict\";\nvar Participle = require(\"../../../values/Participle.js\");\nvar checkException = require(\"../../passiveVoice/checkException.js\");\nvar directPrecedenceException = require(\"../../../stringProcessing/directPrecedenceException\");\nvar precedenceException = require(\"../../../stringProcessing/precedenceException\");\nvar exceptionsParticiplesAdjectivesVerbs = require(\"./exceptionsParticiples.js\")().adjectivesVerbs;\nvar exceptionsParticiplesNounsVowel = require(\"./exceptionsParticiples.js\")().nounsStartingWithVowel;\nvar exceptionsParticiplesNounsConsonant = require(\"./exceptionsParticiples.js\")().nounsStartingWithConsonant;\nvar exceptionsParticiplesOthers = require(\"./exceptionsParticiples.js\")().others;\nvar includes = require(\"lodash/includes\");\nvar forEach = require(\"lodash/forEach\");\nvar memoize = require(\"lodash/memoize\");\n/**\n * Creates an Participle object for the French language.\n *\n * @param {string} participle The participle.\n * @param {string} sentencePart The sentence part that contains the participle.\n * @param {Object} attributes  The attributes object.\n *\n * @constructor\n */\nvar FrenchParticiple = function (participle, sentencePart, attributes) {\n    Participle.call(this, participle, sentencePart, attributes);\n    checkException.call(this);\n};\nrequire(\"util\").inherits(FrenchParticiple, Participle);\n/**\n * Checks whether the participle is irregular.\n *\n * @returns {boolean} Returns true if the passive is irregular.\n */\nvar checkIrregular = function () {\n    if (this.getType() === \"irregular\") {\n        return true;\n    }\n};\n/**\n * Checks if any exceptions are applicable to this participle that would result in the sentence part not being passive.\n * If no exceptions are found, the sentence part is passive.\n *\n * @returns {boolean} Returns true if no exception is found.\n */\nFrenchParticiple.prototype.isPassive = function () {\n    let sentencePart = this.getSentencePart();\n    let participleIndex = sentencePart.indexOf(this.getParticiple());\n    // Only check precedence exceptions for irregular participles.\n    if (checkIrregular.call(this)) {\n        return !this.directPrecedenceException(sentencePart, participleIndex) &&\n            !this.precedenceException(sentencePart, participleIndex);\n    }\n    // Check precedence exceptions and exception lists for regular participles.\n    return !this.isOnAdjectivesVerbsExceptionList() &&\n        !this.isOnNounsExceptionList() &&\n        !this.isOnOthersExceptionList() &&\n        !this.directPrecedenceException(sentencePart, participleIndex) &&\n        !this.precedenceException(sentencePart, participleIndex);\n};\n/**\n * Creates regexes to match adjective and verb participle exceptions (including suffixes) and memoizes them.\n *\n * @returns {Array} Returns an array with all adjective and verb participle exceptions.\n */\nvar getExceptionsParticiplesAdjectivesVerbsRegexes = memoize(function () {\n    let exceptionsParticiplesAdjectivesVerbsRegexes = [];\n    forEach(exceptionsParticiplesAdjectivesVerbs, function (exceptionParticiplesAdjectivesVerbs) {\n        exceptionsParticiplesAdjectivesVerbsRegexes.push(new RegExp(\"^\" + exceptionParticiplesAdjectivesVerbs + \"(e|s|es)?$\", \"ig\"));\n    });\n    return exceptionsParticiplesAdjectivesVerbsRegexes;\n});\n/**\n * Creates regexes to match noun participle exceptions (including suffixes) and memoizes them.\n *\n * @returns {Array} Returns an array with all noun participle exceptions.\n */\nvar getExceptionsParticiplesNounsRegexes = memoize(function () {\n    let exceptionsParticiplesNounsRegexes = [];\n    // Nouns starting with a vowel are checked with -s suffix and l' and d' prefixes.\n    forEach(exceptionsParticiplesNounsVowel, function (exceptionParticipleNounVowel) {\n        exceptionsParticiplesNounsRegexes.push(new RegExp(\"^(l'|d')?\" + exceptionParticipleNounVowel + \"(s)?$\", \"ig\"));\n    });\n    // Nouns starting with a consonant are checked with -s suffix.\n    forEach(exceptionsParticiplesNounsConsonant, function (exceptionParticipleNounConsonant) {\n        exceptionsParticiplesNounsRegexes.push(new RegExp(\"^\" + exceptionParticipleNounConsonant + \"(s)?$\", \"ig\"));\n    });\n    return exceptionsParticiplesNounsRegexes;\n});\n/**\n * Checks whether a given participle matches a list of regex exceptions.\n *\n * @param {Array} participleExceptionRegexes The array of regexes to check.\n * @returns {boolean} Returns true if the participle matches a regex.\n */\nvar checkParticipleExceptionRegexes = function (participleExceptionRegexes) {\n    var participle = this.getParticiple();\n    var match = [];\n    forEach(participleExceptionRegexes, function (participleExceptionRegex) {\n        var exceptionMatch = participle.match(participleExceptionRegex);\n        if (exceptionMatch) {\n            match.push(exceptionMatch[0]);\n        }\n    });\n    if (match.length > 0) {\n        return true;\n    }\n    return false;\n};\n/**\n * Checks whether a found participle is in the exception list of adjectives and verbs.\n * These words are checked with e/s/es as possible suffixes.\n * If a word is on the list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list of adjectives and verbs, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnAdjectivesVerbsExceptionList = function () {\n    var exceptionParticiplesAdjectivesVerbs = getExceptionsParticiplesAdjectivesVerbsRegexes();\n    return checkParticipleExceptionRegexes.call(this, exceptionParticiplesAdjectivesVerbs);\n};\n/**\n * Checks whether a found participle is in the exception list of nouns.\n * These words are checked with s as a possible suffix.\n * If a word is on the list, it isn't a participle.\n *\n * @returns {boolean} Returns true if it is in the exception list of nouns, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnNounsExceptionList = function () {\n    var exceptionsParticiplesNouns = getExceptionsParticiplesNounsRegexes();\n    return checkParticipleExceptionRegexes.call(this, exceptionsParticiplesNouns);\n};\n/**\n * Checks whether a found participle is in the exception list in the 'other' category.\n * If a word is on the list, it isn't a participle.\n * Irregular participles do not end in -é and therefore can't be on the list.\n *\n * @returns {boolean} Returns true if it is in the exception list of nouns, otherwise returns false.\n */\nFrenchParticiple.prototype.isOnOthersExceptionList = function () {\n    return includes(exceptionsParticiplesOthers, this.getParticiple());\n};\nFrenchParticiple.prototype.directPrecedenceException = directPrecedenceException;\nFrenchParticiple.prototype.precedenceException = precedenceException;\nmodule.exports = FrenchParticiple;\n//# sourceMappingURL=FrenchParticiple.js.map"]}