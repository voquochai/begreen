{"version":3,"sources":["../../../../js/researches/passiveVoice/matchParticiples.js"],"names":["find","require","forEach","memoize","includes","irregularsEnglish","irregularsRegularFrench","irregularsRegular","irregularsIrregularFrench","irregularsIrregular","irregularsEndingInSFrench","irregularsEndingInS","spanishParticiples","languageVariables","en","regularParticiplesRegex","fr","regularParticiples","word","language","match","matchFrenchParticipleWithSuffix","irregulars","suffixes","matches","irregular","irregularParticiplesRegex","RegExp","participleMatch","push","irregularParticiples","concat","irregularParticiple","module","exports"],"mappings":"AAAA;;AACA,IAAIA,OAAOC,QAAQ,aAAR,CAAX;AACA,IAAIC,UAAUD,QAAQ,gBAAR,CAAd;AACA,IAAIE,UAAUF,QAAQ,gBAAR,CAAd;AACA,IAAIG,WAAWH,QAAQ,iBAAR,CAAf;AACA,IAAII,oBAAoBJ,QAAQ,oCAAR,GAAxB;AACA,IAAIK,0BAA0BL,QAAQ,mCAAR,IAA+CM,iBAA7E;AACA,IAAIC,4BAA4BP,QAAQ,mCAAR,IAA+CQ,mBAA/E;AACA,IAAIC,4BAA4BT,QAAQ,mCAAR,IAA+CU,mBAA/E;AACA,IAAIC,qBAAqBX,QAAQ,qCAAR,GAAzB;AACA;AACA,IAAIY,oBAAoB;AACpBC,QAAI;AACAC,iCAAyB;AADzB,KADgB;AAIpBC,QAAI;AACAD,iCAAyB;AADzB;AAJgB,CAAxB;AAQA;;;;;;;;AAQA,IAAIE,qBAAqB,SAArBA,kBAAqB,CAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AAC/C;AACA,QAAIA,aAAa,IAAjB,EAAuB;AACnB,eAAO,EAAP;AACH;AACD;AACA,QAAIJ,0BAA0BF,kBAAkBM,QAAlB,EAA4BJ,uBAA1D;AACA,WAAOG,KAAKE,KAAL,CAAWL,uBAAX,KAAuC,EAA9C;AACH,CARD;AASA;;;;;;;;;AASA,IAAIM,kCAAkC,SAAlCA,+BAAkC,CAAUH,IAAV,EAAgBI,UAAhB,EAA4BC,QAA5B,EAAsC;AACxE,QAAIC,UAAU,EAAd;AACAtB,YAAQoB,UAAR,EAAoB,UAAUG,SAAV,EAAqB;AACrC,YAAIC,4BAA4B,IAAIC,MAAJ,CAAW,MAAMF,SAAN,GAAkBF,QAAlB,GAA6B,IAAxC,EAA8C,IAA9C,CAAhC;AACA,YAAIK,kBAAkBV,KAAKE,KAAL,CAAWM,yBAAX,CAAtB;AACA,YAAIE,eAAJ,EAAqB;AACjBJ,oBAAQK,IAAR,CAAaD,gBAAgB,CAAhB,CAAb;AACH;AACJ,KAND;AAOA,WAAOJ,OAAP;AACH,CAVD;AAWA;;;;;;;;AAQA,IAAIM,uBAAuB,SAAvBA,oBAAuB,CAAUZ,IAAV,EAAgBC,QAAhB,EAA0B;AACjD,QAAIK,UAAU,EAAd;AACA,YAAQL,QAAR;AACI,aAAK,IAAL;AACI;AACAK,sBAAUA,QAAQO,MAAR,CAAeV,gCAAgCH,IAAhC,EAAsCZ,uBAAtC,EAA+D,UAA/D,CAAf,CAAV;AACAkB,sBAAUA,QAAQO,MAAR,CAAeV,gCAAgCH,IAAhC,EAAsCR,yBAAtC,EAAiE,QAAjE,CAAf,CAAV;AACA;AACAV,iBAAKQ,yBAAL,EAAgC,UAAUwB,mBAAV,EAA+B;AAC3D,oBAAIA,wBAAwBd,IAA5B,EAAkC;AAC9BM,4BAAQK,IAAR,CAAaG,mBAAb;AACH;AACJ,aAJD;AAKA;AACJ,aAAK,IAAL;AACI;AACA,gBAAI5B,SAASQ,kBAAT,EAA6BM,IAA7B,CAAJ,EAAwC;AACpCM,wBAAQK,IAAR,CAAaX,IAAb;AACH;AACD;AACJ,aAAK,IAAL;AACA;AACIlB,iBAAKK,iBAAL,EAAwB,UAAU2B,mBAAV,EAA+B;AACnD,oBAAIA,wBAAwBd,IAA5B,EAAkC;AAC9BM,4BAAQK,IAAR,CAAaG,mBAAb;AACH;AACJ,aAJD;AAKA;AAzBR;AA2BA,WAAOR,OAAP;AACH,CA9BD;AA+BAS,OAAOC,OAAP,GAAiB,YAAY;AACzB,WAAO;AACHjB,4BAAoBd,QAAQc,kBAAR,CADjB;AAEHa,8BAAsB3B,QAAQ2B,oBAAR;AAFnB,KAAP;AAIH,CALD;AAMA","file":"matchParticiples.js","sourcesContent":["\"use strict\";\nvar find = require(\"lodash/find\");\nvar forEach = require(\"lodash/forEach\");\nvar memoize = require(\"lodash/memoize\");\nvar includes = require(\"lodash/includes\");\nvar irregularsEnglish = require(\"../english/passiveVoice/irregulars\")();\nvar irregularsRegularFrench = require(\"../french/passiveVoice/irregulars\")().irregularsRegular;\nvar irregularsIrregularFrench = require(\"../french/passiveVoice/irregulars\")().irregularsIrregular;\nvar irregularsEndingInSFrench = require(\"../french/passiveVoice/irregulars\")().irregularsEndingInS;\nvar spanishParticiples = require(\"../spanish/passiveVoice/participles\")();\n// The language-specific participle regexes.\nvar languageVariables = {\n    en: {\n        regularParticiplesRegex: /\\w+ed($|[ \\n\\r\\t\\.,'\\(\\)\\\"\\+\\-;!?:\\/»«‹›<>])/ig,\n    },\n    fr: {\n        regularParticiplesRegex: /\\S+(é|ée|és|ées)($|[ \\n\\r\\t\\.,'\\(\\)\\\"\\+\\-;!?:\\/»«‹›<>])/ig,\n    },\n};\n/**\n * Returns words that have been determined to be a regular participle.\n *\n * @param {string} word The word to check.\n * @param {string} language The language in which to match.\n *\n * @returns {Array} A list with the matches.\n */\nvar regularParticiples = function (word, language) {\n    // In Spanish we don't match participles with a regular regex pattern.\n    if (language === \"es\") {\n        return [];\n    }\n    // Matches all words with a language-specific participle suffix.\n    var regularParticiplesRegex = languageVariables[language].regularParticiplesRegex;\n    return word.match(regularParticiplesRegex) || [];\n};\n/**\n * Returns an array of matches of irregular participles with suffixes.\n *\n * @param {string} word The word to match on.\n * @param {Array} irregulars The list of irregulars to match.\n * @param {string} suffixes The suffixes to match the word with.\n * @param {Array} matches The array into which to push the matches.\n * @returns {Array} A list with matched irregular participles.\n */\nvar matchFrenchParticipleWithSuffix = function (word, irregulars, suffixes) {\n    var matches = [];\n    forEach(irregulars, function (irregular) {\n        var irregularParticiplesRegex = new RegExp(\"^\" + irregular + suffixes + \"?$\", \"ig\");\n        var participleMatch = word.match(irregularParticiplesRegex);\n        if (participleMatch) {\n            matches.push(participleMatch[0]);\n        }\n    });\n    return matches;\n};\n/**\n * Returns the matches for a word in the list of irregulars.\n *\n * @param {string} word The word to match in the list.\n * @param {string} language The language for which to match.\n *\n * @returns {Array} A list with the matches.\n */\nvar irregularParticiples = function (word, language) {\n    var matches = [];\n    switch (language) {\n        case \"fr\":\n            // Match different classes of participles with suffixes.\n            matches = matches.concat(matchFrenchParticipleWithSuffix(word, irregularsRegularFrench, \"(e|s|es)\"));\n            matches = matches.concat(matchFrenchParticipleWithSuffix(word, irregularsEndingInSFrench, \"(e|es)\"));\n            // Match irregular participles that don't require adding a suffix.\n            find(irregularsIrregularFrench, function (irregularParticiple) {\n                if (irregularParticiple === word) {\n                    matches.push(irregularParticiple);\n                }\n            });\n            break;\n        case \"es\":\n            // In Spanish, we only match passives from a word list.\n            if (includes(spanishParticiples, word)) {\n                matches.push(word);\n            }\n            break;\n        case \"en\":\n        default:\n            find(irregularsEnglish, function (irregularParticiple) {\n                if (irregularParticiple === word) {\n                    matches.push(irregularParticiple);\n                }\n            });\n            break;\n    }\n    return matches;\n};\nmodule.exports = function () {\n    return {\n        regularParticiples: memoize(regularParticiples),\n        irregularParticiples: memoize(irregularParticiples),\n    };\n};\n//# sourceMappingURL=matchParticiples.js.map"]}