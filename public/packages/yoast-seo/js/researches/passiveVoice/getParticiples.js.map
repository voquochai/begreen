{"version":3,"sources":["../../../../js/researches/passiveVoice/getParticiples.js"],"names":["getWords","require","matchParticiples","regularParticipleRegex","regularParticiples","irregularParticipleRegex","irregularParticiples","EnglishParticiple","FrenchParticiple","SpanishParticiple","forEach","module","exports","sentencePartText","auxiliaries","language","words","foundParticiples","word","type","length","push"],"mappings":"AAAA;;AACA,IAAIA,WAAWC,QAAQ,oCAAR,CAAf;AACA,IAAIC,mBAAmBD,QAAQ,qBAAR,GAAvB;AACA,IAAIE,yBAAyBD,iBAAiBE,kBAA9C;AACA,IAAIC,2BAA2BH,iBAAiBI,oBAAhD;AACA,IAAIC,oBAAoBN,QAAQ,8CAAR,CAAxB;AACA,IAAIO,mBAAmBP,QAAQ,4CAAR,CAAvB;AACA,IAAIQ,oBAAoBR,QAAQ,8CAAR,CAAxB;AACA,IAAIS,UAAUT,QAAQ,gBAAR,CAAd;AACA;;;;;;;;AAQAU,OAAOC,OAAP,GAAiB,UAAUC,gBAAV,EAA4BC,WAA5B,EAAyCC,QAAzC,EAAmD;AAChE,QAAIC,QAAQhB,SAASa,gBAAT,CAAZ;AACA,QAAII,mBAAmB,EAAvB;AACAP,YAAQM,KAAR,EAAe,UAAUE,IAAV,EAAgB;AAC3B,YAAIC,OAAO,EAAX;AACA,YAAIhB,uBAAuBe,IAAvB,EAA6BH,QAA7B,EAAuCK,MAAvC,KAAkD,CAAtD,EAAyD;AACrDD,mBAAO,SAAP;AACH;AACD,YAAId,yBAAyBa,IAAzB,EAA+BH,QAA/B,EAAyCK,MAAzC,KAAoD,CAAxD,EAA2D;AACvDD,mBAAO,WAAP;AACH;AACD,YAAIA,SAAS,EAAb,EAAiB;AACb,oBAAQJ,QAAR;AACI,qBAAK,IAAL;AACIE,qCAAiBI,IAAjB,CAAsB,IAAIb,gBAAJ,CAAqBU,IAArB,EAA2BL,gBAA3B,EAA6C,EAAEC,aAAaA,WAAf,EAA4BK,MAAMA,IAAlC,EAA7C,CAAtB;AACA;AACJ,qBAAK,IAAL;AACIF,qCAAiBI,IAAjB,CAAsB,IAAIZ,iBAAJ,CAAsBS,IAAtB,EAA4BL,gBAA5B,EAA8C,EAAEC,aAAaA,WAAf,EAA4BK,MAAMA,IAAlC,EAA9C,CAAtB;AACA;AACJ,qBAAK,IAAL;AACA;AACIF,qCAAiBI,IAAjB,CAAsB,IAAId,iBAAJ,CAAsBW,IAAtB,EAA4BL,gBAA5B,EAA8C,EAAEC,aAAaA,WAAf,EAA4BK,MAAMA,IAAlC,EAA9C,CAAtB;AACA;AAVR;AAYH;AACJ,KAtBD;AAuBA,WAAOF,gBAAP;AACH,CA3BD;AA4BA","file":"getParticiples.js","sourcesContent":["\"use strict\";\nvar getWords = require(\"../../stringProcessing/getWords.js\");\nvar matchParticiples = require(\".//matchParticiples\")();\nvar regularParticipleRegex = matchParticiples.regularParticiples;\nvar irregularParticipleRegex = matchParticiples.irregularParticiples;\nvar EnglishParticiple = require(\"../english/passiveVoice/EnglishParticiple.js\");\nvar FrenchParticiple = require(\"../french/passiveVoice/FrenchParticiple.js\");\nvar SpanishParticiple = require(\"../spanish/passiveVoice/SpanishParticiple.js\");\nvar forEach = require(\"lodash/forEach\");\n/**\n * Creates participle objects for the participles found in a sentence part.\n *\n * @param {string} sentencePartText The sentence part to find participles in.\n * @param {Array} auxiliaries The list of auxiliaries from the sentence part.\n * @param {string} language The language to find the participles for.\n * @returns {Array} The list with participle objects.\n */\nmodule.exports = function (sentencePartText, auxiliaries, language) {\n    var words = getWords(sentencePartText);\n    var foundParticiples = [];\n    forEach(words, function (word) {\n        var type = \"\";\n        if (regularParticipleRegex(word, language).length !== 0) {\n            type = \"regular\";\n        }\n        if (irregularParticipleRegex(word, language).length !== 0) {\n            type = \"irregular\";\n        }\n        if (type !== \"\") {\n            switch (language) {\n                case \"fr\":\n                    foundParticiples.push(new FrenchParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: type }));\n                    break;\n                case \"es\":\n                    foundParticiples.push(new SpanishParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: type }));\n                    break;\n                case \"en\":\n                default:\n                    foundParticiples.push(new EnglishParticiple(word, sentencePartText, { auxiliaries: auxiliaries, type: type }));\n                    break;\n            }\n        }\n    });\n    return foundParticiples;\n};\n//# sourceMappingURL=getParticiples.js.map"]}