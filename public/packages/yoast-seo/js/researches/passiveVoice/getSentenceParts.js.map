{"version":3,"sources":["../../../../js/researches/passiveVoice/getSentenceParts.js"],"names":["indices","require","getIndicesOfList","getIndicesByWordList","filterIndices","sortIndices","stripSpaces","normalizeSingleQuotes","normalizeSingle","arrayToRegex","getWordIndices","includesIndex","followsIndex","filter","isUndefined","includes","map","forEach","SentencePartEnglish","auxiliariesEnglish","all","stopwordsEnglish","stopCharacterRegexEnglish","verbEndingInIngRegex","ingExclusionArray","SentencePartFrench","auxiliariesFrench","stopwordsFrench","stopCharacterRegexFrench","followingAuxiliaryExceptionWordsFrench","reflexivePronounsFrench","directPrecedenceExceptionRegex","elisionAuxiliaryExceptionWords","elisionAuxiliaryExceptionRegex","SentencePartSpanish","auxiliariesSpanish","stopwordsSpanish","stopCharacterRegexSpanish","followingAuxiliaryExceptionWordsSpanish","languageVariables","en","stopwords","auxiliaryRegex","SentencePart","auxiliaries","stopCharacterRegex","fr","followingAuxiliaryExceptionRegex","es","getVerbsEndingInIng","sentence","matches","match","getStopCharacters","language","lastIndex","exec","push","index","auxiliaryPrecedenceExceptionFilter","text","auxiliaryMatches","directPrecedenceExceptionMatches","auxiliaryMatch","auxiliaryObject","followingAuxiliaryExceptionFilter","followingAuxiliaryExceptionMatches","elisionAuxiliaryExceptionFilter","elisionAuxiliaryExceptionMatches","getSentenceBreakers","toLocaleLowerCase","auxiliaryIndices","stopwordIndices","stopCharacterIndices","concat","ingVerbs","ingVerbsIndices","getAuxiliaryMatches","sentencePart","auxiliaryMatchIndices","auxiliaryMatchWords","auxiliaryMatchIndex","getSentenceParts","sentenceParts","i","length","endIndex","substr","module","exports"],"mappings":"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","file":"getSentenceParts.js","sourcesContent":["\"use strict\";\nvar indices = require(\"../../stringProcessing/indices\");\nvar getIndicesOfList = indices.getIndicesByWordList;\nvar filterIndices = indices.filterIndices;\nvar sortIndices = indices.sortIndices;\nvar stripSpaces = require(\"../../stringProcessing/stripSpaces.js\");\nvar normalizeSingleQuotes = require(\"../../stringProcessing/quotes.js\").normalizeSingle;\nvar arrayToRegex = require(\"../../stringProcessing/createRegexFromArray.js\");\nvar getWordIndices = require(\"./getIndicesWithRegex.js\");\nvar includesIndex = require(\"../../stringProcessing/includesIndex\");\nvar followsIndex = require(\"../../stringProcessing/followsIndex\");\nvar filter = require(\"lodash/filter\");\nvar isUndefined = require(\"lodash/isUndefined\");\nvar includes = require(\"lodash/includes\");\nvar map = require(\"lodash/map\");\nvar forEach = require(\"lodash/forEach\");\n// English-specific variables and imports.\nvar SentencePartEnglish = require(\"../english/passiveVoice/SentencePart\");\nvar auxiliariesEnglish = require(\"../english/passiveVoice/auxiliaries.js\")().all;\nvar stopwordsEnglish = require(\"../english/passiveVoice/stopwords.js\")();\nvar stopCharacterRegexEnglish = /([:,]|('ll)|('ve))(?=[ \\n\\r\\t\\'\\\"\\+\\-»«‹›<>])/ig;\nvar verbEndingInIngRegex = /\\w+ing(?=$|[ \\n\\r\\t\\.,'\\(\\)\\\"\\+\\-;!?:\\/»«‹›<>])/ig;\nvar ingExclusionArray = [\"king\", \"cling\", \"ring\", \"being\", \"thing\", \"something\", \"anything\"];\n// French-specific variables and imports.\nvar SentencePartFrench = require(\"../french/passiveVoice/SentencePart\");\nvar auxiliariesFrench = require(\"../french/passiveVoice/auxiliaries.js\")();\nvar stopwordsFrench = require(\"../french/passiveVoice/stopwords.js\")();\nvar stopCharacterRegexFrench = /(,)(?=[ \\n\\r\\t\\'\\\"\\+\\-»«‹›<>])/ig;\nvar followingAuxiliaryExceptionWordsFrench = [\"le\", \"la\", \"les\", \"une\", \"l'un\", \"l'une\"];\nvar reflexivePronounsFrench = [\"se\", \"me\", \"te\", \"s'y\", \"m'y\", \"t'y\", \"nous nous\", \"vous vous\"];\nvar directPrecedenceExceptionRegex = arrayToRegex(reflexivePronounsFrench);\nvar elisionAuxiliaryExceptionWords = [\"c'\", \"s'\", \"peut-\"];\nvar elisionAuxiliaryExceptionRegex = arrayToRegex(elisionAuxiliaryExceptionWords, true);\n// Spanish-specific variables and imports.\nvar SentencePartSpanish = require(\"../spanish/passiveVoice/SentencePart\");\nvar auxiliariesSpanish = require(\"../spanish/passiveVoice/auxiliaries.js\")();\nvar stopwordsSpanish = require(\"../spanish/passiveVoice/stopwords.js\")();\nvar stopCharacterRegexSpanish = /([:,])(?=[ \\n\\r\\t\\'\\\"\\+\\-»«‹›<>])/ig;\nvar followingAuxiliaryExceptionWordsSpanish = [\"el\", \"la\", \"los\", \"las\", \"una\"];\n// The language-specific variables used to split sentences into sentence parts.\nvar languageVariables = {\n    en: {\n        stopwords: stopwordsEnglish,\n        auxiliaryRegex: arrayToRegex(auxiliariesEnglish),\n        SentencePart: SentencePartEnglish,\n        auxiliaries: auxiliariesEnglish,\n        stopCharacterRegex: stopCharacterRegexEnglish,\n    },\n    fr: {\n        stopwords: stopwordsFrench,\n        auxiliaryRegex: arrayToRegex(auxiliariesFrench),\n        SentencePart: SentencePartFrench,\n        auxiliaries: auxiliariesFrench,\n        stopCharacterRegex: stopCharacterRegexFrench,\n        followingAuxiliaryExceptionRegex: arrayToRegex(followingAuxiliaryExceptionWordsFrench),\n    },\n    es: {\n        stopwords: stopwordsSpanish,\n        auxiliaryRegex: arrayToRegex(auxiliariesSpanish),\n        SentencePart: SentencePartSpanish,\n        auxiliaries: auxiliariesSpanish,\n        stopCharacterRegex: stopCharacterRegexSpanish,\n        followingAuxiliaryExceptionRegex: arrayToRegex(followingAuxiliaryExceptionWordsSpanish),\n    },\n};\n/**\n * Gets active verbs (ending in ing) to determine sentence breakers in English.\n *\n * @param {string} sentence The sentence to get the active verbs from.\n * @returns {Array} The array with valid matches.\n */\nvar getVerbsEndingInIng = function (sentence) {\n    // Matches the sentences with words ending in ing.\n    var matches = sentence.match(verbEndingInIngRegex) || [];\n    // Filters out words ending in -ing that aren't verbs.\n    return filter(matches, function (match) {\n        return !includes(ingExclusionArray, stripSpaces(match));\n    });\n};\n/**\n * Gets stop characters to determine sentence breakers.\n *\n * @param {string} sentence The sentence to get the stop characters from.\n * @param {string} language The language for which to get the stop characters.\n * @returns {Array} The array with stop characters.\n */\nvar getStopCharacters = function (sentence, language) {\n    var stopCharacterRegex = languageVariables[language].stopCharacterRegex;\n    var match;\n    var matches = [];\n    stopCharacterRegex.lastIndex = 0;\n    while ((match = stopCharacterRegex.exec(sentence)) !== null) {\n        matches.push({\n            index: match.index,\n            match: match[0],\n        });\n    }\n    return matches;\n};\n/**\n * Filters auxiliaries preceded by a reflexive pronoun.\n *\n * @param {string} text The text part in which to check.\n * @param {Array} auxiliaryMatches The auxiliary matches for which to check.\n * @returns {Array} The filtered list of auxiliary indices.\n */\nvar auxiliaryPrecedenceExceptionFilter = function (text, auxiliaryMatches) {\n    var directPrecedenceExceptionMatches = getWordIndices(text, directPrecedenceExceptionRegex);\n    forEach(auxiliaryMatches, function (auxiliaryMatch) {\n        if (includesIndex(directPrecedenceExceptionMatches, auxiliaryMatch.index)) {\n            auxiliaryMatches = auxiliaryMatches.filter(function (auxiliaryObject) {\n                return auxiliaryObject.index !== auxiliaryMatch.index;\n            });\n        }\n    });\n    return auxiliaryMatches;\n};\n/**\n * Filters auxiliaries followed by a word on the followingAuxiliaryExceptionWords list.\n *\n * @param {string} text The text part in which to check.\n * @param {Array} auxiliaryMatches The auxiliary matches for which to check.\n * @param {string} language The language for which to filter the auxiliaries.\n * @returns {Array} The filtered list of auxiliary indices.\n */\nvar followingAuxiliaryExceptionFilter = function (text, auxiliaryMatches, language) {\n    var followingAuxiliaryExceptionRegex = languageVariables[language].followingAuxiliaryExceptionRegex;\n    var followingAuxiliaryExceptionMatches = getWordIndices(text, followingAuxiliaryExceptionRegex);\n    forEach(auxiliaryMatches, function (auxiliaryMatch) {\n        if (followsIndex(followingAuxiliaryExceptionMatches, auxiliaryMatch)) {\n            auxiliaryMatches = auxiliaryMatches.filter(function (auxiliaryObject) {\n                return auxiliaryObject.index !== auxiliaryMatch.index;\n            });\n        }\n    });\n    return auxiliaryMatches;\n};\n/**\n * Filters auxiliaries preceded by an elided word (e.g., s') on the elisionAuxiliaryExceptionWords list.\n *\n * @param {string} text The text part in which to check.\n * @param {Array} auxiliaryMatches The auxiliary matches for which to check.\n * @returns {Array} The filtered list of auxiliary indices.\n */\nvar elisionAuxiliaryExceptionFilter = function (text, auxiliaryMatches) {\n    var elisionAuxiliaryExceptionMatches = getWordIndices(text, elisionAuxiliaryExceptionRegex);\n    forEach(auxiliaryMatches, function (auxiliaryMatch) {\n        if (includesIndex(elisionAuxiliaryExceptionMatches, auxiliaryMatch.index, false)) {\n            auxiliaryMatches = auxiliaryMatches.filter(function (auxiliaryObject) {\n                return auxiliaryObject.index !== auxiliaryMatch.index;\n            });\n        }\n    });\n    return auxiliaryMatches;\n};\n/**\n * Gets the indexes of sentence breakers (auxiliaries, stopwords and stop characters;\n * in English also active verbs) to determine sentence parts.\n * Indices are filtered because there could be duplicate matches, like \"even though\" and \"though\".\n * In addition, 'having' will be matched both as a -ing verb as well as an auxiliary.\n *\n * @param {string} sentence The sentence to check for indices of sentence breakers.\n * @param {string} language The language for which to match the sentence breakers.\n * @returns {Array} The array with valid indices to use for determining sentence parts.\n */\nvar getSentenceBreakers = function (sentence, language) {\n    sentence = sentence.toLocaleLowerCase();\n    var stopwords = languageVariables[language].stopwords;\n    var auxiliaries = languageVariables[language].auxiliaries;\n    var auxiliaryIndices = getIndicesOfList(auxiliaries, sentence);\n    var stopwordIndices = getIndicesOfList(stopwords, sentence);\n    var stopCharacterIndices = getStopCharacters(sentence, language);\n    var indices;\n    // Concat all indices arrays, filter them and sort them.\n    switch (language) {\n        case \"fr\":\n            // Filters auxiliaries matched in the sentence based on a precedence exception filter.\n            auxiliaryIndices = auxiliaryPrecedenceExceptionFilter(sentence, auxiliaryIndices);\n            // Filters auxiliaries matched in the sentence based on a elision exception filter.\n            auxiliaryIndices = elisionAuxiliaryExceptionFilter(sentence, auxiliaryIndices);\n            indices = [].concat(auxiliaryIndices, stopwordIndices, stopCharacterIndices);\n            break;\n        case \"es\":\n            indices = [].concat(auxiliaryIndices, stopwordIndices, stopCharacterIndices);\n            break;\n        case \"en\":\n        default:\n            var ingVerbs = getVerbsEndingInIng(sentence);\n            var ingVerbsIndices = getIndicesOfList(ingVerbs, sentence);\n            indices = [].concat(auxiliaryIndices, stopwordIndices, ingVerbsIndices, stopCharacterIndices);\n            break;\n    }\n    indices = filterIndices(indices);\n    return sortIndices(indices);\n};\n/**\n * Gets the auxiliaries from a sentence.\n *\n * @param {string} sentencePart The part of the sentence to match for auxiliaries.\n * @param {string} language The language for which to match the auxiliaries.\n * @returns {Array} All formatted matches from the sentence part.\n */\nvar getAuxiliaryMatches = function (sentencePart, language) {\n    var auxiliaryRegex = languageVariables[language].auxiliaryRegex;\n    var auxiliaryMatches = sentencePart.match(auxiliaryRegex) || [];\n    switch (language) {\n        case \"fr\":\n        case \"es\":\n            // An array with the matched auxiliaries and their indices.\n            var auxiliaryMatchIndices = getIndicesOfList(auxiliaryMatches, sentencePart);\n            if (language === \"fr\") {\n                // Filters auxiliaries matched in the sentence part based on a precedence exception filter.\n                auxiliaryMatchIndices = auxiliaryPrecedenceExceptionFilter(sentencePart, auxiliaryMatchIndices);\n            }\n            // Filters auxiliaries matched in the sentence part based on a exception filter for words following the auxiliary.\n            auxiliaryMatchIndices = followingAuxiliaryExceptionFilter(sentencePart, auxiliaryMatchIndices, language);\n            // An array with the matched auxiliary verbs (without indices).\n            var auxiliaryMatchWords = [];\n            forEach(auxiliaryMatchIndices, function (auxiliaryMatchIndex) {\n                auxiliaryMatchWords.push(auxiliaryMatchIndex.match);\n            });\n            return map(auxiliaryMatchWords, function (auxiliaryMatch) {\n                return stripSpaces(auxiliaryMatch);\n            });\n        case \"en\":\n        default:\n            return map(auxiliaryMatches, function (auxiliaryMatch) {\n                return stripSpaces(auxiliaryMatch);\n            });\n    }\n};\n/**\n * Gets the sentence parts from a sentence by determining sentence breakers.\n *\n * @param {string} sentence The sentence to split up in sentence parts.\n * @param {string} language The language for which to get the sentence parts.\n * @returns {Array} The array with all parts of a sentence that have an auxiliary.\n */\nvar getSentenceParts = function (sentence, language) {\n    var sentenceParts = [];\n    var auxiliaryRegex = languageVariables[language].auxiliaryRegex;\n    var SentencePart = languageVariables[language].SentencePart;\n    sentence = normalizeSingleQuotes(sentence);\n    // First check if there is an auxiliary in the sentence.\n    if (sentence.match(auxiliaryRegex) === null) {\n        return sentenceParts;\n    }\n    var indices = getSentenceBreakers(sentence, language);\n    // Get the words after the found auxiliary.\n    for (var i = 0; i < indices.length; i++) {\n        var endIndex = sentence.length;\n        if (!isUndefined(indices[i + 1])) {\n            endIndex = indices[i + 1].index;\n        }\n        // Cut the sentence from the current index to the endIndex (start of next breaker, of end of sentence).\n        var sentencePart = stripSpaces(sentence.substr(indices[i].index, endIndex - indices[i].index));\n        var auxiliaryMatches = getAuxiliaryMatches(sentencePart, language);\n        // If a sentence part doesn't have an auxiliary, we don't need it, so it can be filtered out.\n        if (auxiliaryMatches.length !== 0) {\n            sentenceParts.push(new SentencePart(sentencePart, auxiliaryMatches));\n        }\n    }\n    return sentenceParts;\n};\n/**\n * Split the sentence in sentence parts based on auxiliaries.\n *\n * @param {string} sentence The sentence to split in parts.\n * @param {string} language The language for which to get the sentence parts.\n * @returns {Array} A list with sentence parts.\n */\nmodule.exports = function (sentence, language) {\n    return getSentenceParts(sentence, language);\n};\n//# sourceMappingURL=getSentenceParts.js.map"]}