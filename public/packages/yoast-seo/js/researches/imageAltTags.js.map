{"version":3,"sources":["../../../js/researches/imageAltTags.js"],"names":["imageInText","require","imageAlttag","wordMatch","escapeRegExp","matchAltProperties","imageMatches","keyword","locale","altProperties","noAlt","withAlt","withAltKeyword","withAltNonKeyword","i","length","alttag","module","exports","paper","getKeyword","toLocaleLowerCase","getText","getLocale"],"mappings":"AAAA;AACA;;AACA,IAAIA,cAAcC,QAAQ,iCAAR,CAAlB;AACA,IAAIC,cAAcD,QAAQ,sCAAR,CAAlB;AACA,IAAIE,YAAYF,QAAQ,uCAAR,CAAhB;AACA,IAAIG,eAAeH,QAAQ,qBAAR,CAAnB;AACA;;;;;;;;;AASA,IAAII,qBAAqB,SAArBA,kBAAqB,CAAUC,YAAV,EAAwBC,OAAxB,EAAiCC,MAAjC,EAAyC;AAC9D,QAAIC,gBAAgB;AAChBC,eAAO,CADS;AAEhBC,iBAAS,CAFO;AAGhBC,wBAAgB,CAHA;AAIhBC,2BAAmB;AAJH,KAApB;AAMA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIR,aAAaS,MAAjC,EAAyCD,GAAzC,EAA8C;AAC1C,YAAIE,SAASd,YAAYI,aAAaQ,CAAb,CAAZ,CAAb;AACA;AACA,YAAIE,WAAW,EAAf,EAAmB;AACfP,0BAAcC,KAAd;AACA;AACH;AACD;AACA,YAAIH,YAAY,EAAZ,IAAkBS,WAAW,EAAjC,EAAqC;AACjCP,0BAAcE,OAAd;AACA;AACH;AACD,YAAIR,UAAUa,MAAV,EAAkBT,OAAlB,EAA2BC,MAA3B,MAAuC,CAAvC,IAA4CQ,WAAW,EAA3D,EAA+D;AAC3D;AACAP,0BAAcI,iBAAd;AACA;AACH;AACD,YAAIV,UAAUa,MAAV,EAAkBT,OAAlB,EAA2BC,MAA3B,IAAqC,CAAzC,EAA4C;AACxCC,0BAAcG,cAAd;AACA;AACH;AACJ;AACD,WAAOH,aAAP;AACH,CA9BD;AA+BA;;;;;;AAMAQ,OAAOC,OAAP,GAAiB,UAAUC,KAAV,EAAiB;AAC9B,QAAIZ,UAAUH,aAAae,MAAMC,UAAN,GAAmBC,iBAAnB,EAAb,CAAd;AACA,WAAOhB,mBAAmBL,YAAYmB,MAAMG,OAAN,EAAZ,CAAnB,EAAiDf,OAAjD,EAA0DY,MAAMI,SAAN,EAA1D,CAAP;AACH,CAHD;AAIA","file":"imageAltTags.js","sourcesContent":["\"use strict\";\n/** @module researches/imageAltTags */\nvar imageInText = require(\"../stringProcessing/imageInText\");\nvar imageAlttag = require(\"../stringProcessing/getAlttagContent\");\nvar wordMatch = require(\"../stringProcessing/matchTextWithWord\");\nvar escapeRegExp = require(\"lodash/escapeRegExp\");\n/**\n * Matches the alt-tags in the images found in the text.\n * Returns an object with the totals and different alt-tags.\n *\n * @param {Array} imageMatches Array with all the matched images in the text\n * @param {string} keyword the keyword to check for.\n * @param {string} locale The locale used for transliteration.\n * @returns {object} altProperties Object with all alt-tags that were found.\n */\nvar matchAltProperties = function (imageMatches, keyword, locale) {\n    var altProperties = {\n        noAlt: 0,\n        withAlt: 0,\n        withAltKeyword: 0,\n        withAltNonKeyword: 0,\n    };\n    for (var i = 0; i < imageMatches.length; i++) {\n        var alttag = imageAlttag(imageMatches[i]);\n        // If no alt-tag is set\n        if (alttag === \"\") {\n            altProperties.noAlt++;\n            continue;\n        }\n        // If no keyword is set, but the alt-tag is\n        if (keyword === \"\" && alttag !== \"\") {\n            altProperties.withAlt++;\n            continue;\n        }\n        if (wordMatch(alttag, keyword, locale) === 0 && alttag !== \"\") {\n            // Match for keywords?\n            altProperties.withAltNonKeyword++;\n            continue;\n        }\n        if (wordMatch(alttag, keyword, locale) > 0) {\n            altProperties.withAltKeyword++;\n            continue;\n        }\n    }\n    return altProperties;\n};\n/**\n * Checks the text for images, checks the type of each image and alt attributes for containing keywords\n *\n * @param {Paper} paper The paper to check for images\n * @returns {object} Object containing all types of found images\n */\nmodule.exports = function (paper) {\n    var keyword = escapeRegExp(paper.getKeyword().toLocaleLowerCase());\n    return matchAltProperties(imageInText(paper.getText()), keyword, paper.getLocale());\n};\n//# sourceMappingURL=imageAltTags.js.map"]}