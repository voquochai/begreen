{"version":3,"sources":["../../../js/stringProcessing/findKeywordInUrl.js"],"names":["matchTextWithTransliteration","require","escapeRegExp","module","exports","url","keyword","locale","formatUrl","match","replace","length"],"mappings":"AAAA;AACA;;AACA,IAAIA,+BAA+BC,QAAQ,mCAAR,CAAnC;AACA,IAAIC,eAAeD,QAAQ,qBAAR,CAAnB;AACA;;;;;;;;AAQAE,OAAOC,OAAP,GAAiB,UAAUC,GAAV,EAAeC,OAAf,EAAwBC,MAAxB,EAAgC;AAC7C,QAAIC,YAAYH,IAAII,KAAJ,CAAU,SAAV,CAAhB;AACAH,cAAUJ,aAAaI,OAAb,CAAV;AACA,QAAIE,cAAc,IAAlB,EAAwB;AACpBA,oBAAYA,UAAU,CAAV,EAAaE,OAAb,CAAqB,YAArB,EAAmC,EAAnC,CAAZ;AACA,eAAOV,6BAA6BQ,SAA7B,EAAwCF,OAAxC,EAAiDC,MAAjD,EAAyDI,MAAzD,GAAkE,CAAzE;AACH;AACD,WAAO,KAAP;AACH,CARD;AASA","file":"findKeywordInUrl.js","sourcesContent":["\"use strict\";\n/** @module stringProcessing/findKeywordInUrl */\nvar matchTextWithTransliteration = require(\"./matchTextWithTransliteration.js\");\nvar escapeRegExp = require(\"lodash/escapeRegExp\");\n/**\n * Matches the keyword in the URL.\n *\n * @param {string} url The url to check for keyword\n * @param {string} keyword The keyword to check if it is in the URL\n * @param {string} locale The locale used for transliteration.\n * @returns {boolean} If a keyword is found, returns true\n */\nmodule.exports = function (url, keyword, locale) {\n    var formatUrl = url.match(/>(.*)/ig);\n    keyword = escapeRegExp(keyword);\n    if (formatUrl !== null) {\n        formatUrl = formatUrl[0].replace(/<.*?>\\s?/ig, \"\");\n        return matchTextWithTransliteration(formatUrl, keyword, locale).length > 0;\n    }\n    return false;\n};\n//# sourceMappingURL=findKeywordInUrl.js.map"]}