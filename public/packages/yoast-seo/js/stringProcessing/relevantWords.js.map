{"version":3,"sources":["../../../js/stringProcessing/relevantWords.js"],"names":["getWords","require","getSentences","WordCombination","normalizeQuotes","normalize","germanFunctionWords","englishFunctionWords","dutchFunctionWords","spanishFunctionWords","italianFunctionWords","frenchFunctionWords","getLanguage","filter","map","forEach","has","flatMap","values","take","includes","intersection","isEmpty","densityLowerLimit","densityUpperLimit","relevantWordLimit","wordCountLowerLimit","specialCharacters","getWordCombinations","text","combinationSize","functionWords","sentences","words","combination","sentence","toLocaleLowerCase","word","i","length","slice","calculateOccurrences","wordCombinations","occurrences","wordCombination","getCombination","incrementOccurrences","getRelevantCombinations","getOccurrences","getRelevance","sortCombinations","sort","combinationA","combinationB","difference","getLength","filterOneCharacterWordCombinations","filterFunctionWordsAnywhere","filterFunctionWordsAtBeginning","filterFunctionWordsAtEnding","lastWordIndex","filterFunctionWordsAtBeginningAndEnding","filterOnDensity","wordCount","getDensity","filterFunctionWords","combinations","filteredAnywhere","filteredAtBeginningAndEnding","filteredAtEnding","filteredAtBeginning","filterCombinations","getRelevantWords","locale","all","oneWordCombinations","oneWordRelevanceMap","twoWordCombinations","threeWordCombinations","fourWordCombinations","fiveWordCombinations","concat","setRelevantWords","module","exports"],"mappings":"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","file":"relevantWords.js","sourcesContent":["\"use strict\";\nlet getWords = require(\"../stringProcessing/getWords.js\");\nlet getSentences = require(\"../stringProcessing/getSentences.js\");\nlet WordCombination = require(\"../values/WordCombination.js\");\nlet normalizeQuotes = require(\"../stringProcessing/quotes.js\").normalize;\nlet germanFunctionWords = require(\"../researches/german/functionWords.js\");\nlet englishFunctionWords = require(\"../researches/english/functionWords.js\");\nlet dutchFunctionWords = require(\"../researches/dutch/functionWords.js\");\nlet spanishFunctionWords = require(\"../researches/spanish/functionWords.js\");\nlet italianFunctionWords = require(\"../researches/italian/functionWords.js\");\nlet frenchFunctionWords = require(\"../researches/french/functionWords.js\");\nlet getLanguage = require(\"../helpers/getLanguage.js\");\nlet filter = require(\"lodash/filter\");\nlet map = require(\"lodash/map\");\nlet forEach = require(\"lodash/forEach\");\nlet has = require(\"lodash/has\");\nlet flatMap = require(\"lodash/flatMap\");\nlet values = require(\"lodash/values\");\nlet take = require(\"lodash/take\");\nlet includes = require(\"lodash/includes\");\nlet intersection = require(\"lodash/intersection\");\nlet isEmpty = require(\"lodash/isEmpty\");\nlet densityLowerLimit = 0;\nlet densityUpperLimit = 0.03;\nlet relevantWordLimit = 100;\nlet wordCountLowerLimit = 200;\n// First four characters: en dash, em dash, hyphen-minus, and copyright sign.\nlet specialCharacters = [\"–\", \"—\", \"-\", \"\\u00a9\", \"#\", \"%\", \"/\", \"\\\\\", \"$\", \"€\", \"£\", \"*\", \"•\", \"|\", \"→\", \"←\", \"}\", \"{\", \"//\", \"||\", \"\\u200b\"];\n/**\n * Returns the word combinations for the given text based on the combination size.\n *\n * @param {string} text The text to retrieve combinations for.\n * @param {number} combinationSize The size of the combinations to retrieve.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {WordCombination[]} All word combinations for the given text.\n */\nfunction getWordCombinations(text, combinationSize, functionWords) {\n    let sentences = getSentences(text);\n    let words, combination;\n    return flatMap(sentences, function (sentence) {\n        sentence = sentence.toLocaleLowerCase();\n        sentence = normalizeQuotes(sentence);\n        words = getWords(sentence);\n        return filter(map(words, function (word, i) {\n            // If there are still enough words in the sentence to slice of.\n            if (i + combinationSize - 1 < words.length) {\n                combination = words.slice(i, i + combinationSize);\n                return new WordCombination(combination, 0, functionWords);\n            }\n            return false;\n        }));\n    });\n}\n/**\n * Calculates occurrences for a list of word combinations.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to calculate occurrences for.\n * @returns {WordCombination[]} Word combinations with their respective occurrences.\n */\nfunction calculateOccurrences(wordCombinations) {\n    let occurrences = {};\n    forEach(wordCombinations, function (wordCombination) {\n        let combination = wordCombination.getCombination();\n        if (!has(occurrences, combination)) {\n            occurrences[combination] = wordCombination;\n        }\n        occurrences[combination].incrementOccurrences();\n    });\n    return values(occurrences);\n}\n/**\n * Returns only the relevant combinations from a list of word combinations. Assumes\n * occurrences have already been calculated.\n *\n * @param {WordCombination[]} wordCombinations A list of word combinations.\n * @returns {WordCombination[]} Only relevant word combinations.\n */\nfunction getRelevantCombinations(wordCombinations) {\n    wordCombinations = wordCombinations.filter(function (combination) {\n        return combination.getOccurrences() !== 1 &&\n            combination.getRelevance() !== 0;\n    });\n    return wordCombinations;\n}\n/**\n * Sorts combinations based on their relevance and length.\n *\n * @param {WordCombination[]} wordCombinations The combinations to sort.\n * @returns {void}\n */\nfunction sortCombinations(wordCombinations) {\n    wordCombinations.sort(function (combinationA, combinationB) {\n        let difference = combinationB.getRelevance() - combinationA.getRelevance();\n        // The combination with the highest relevance comes first.\n        if (difference !== 0) {\n            return difference;\n        }\n        // In case of a tie on relevance, the longest combination comes first.\n        return combinationB.getLength() - combinationA.getLength();\n    });\n}\n/**\n * Filters word combinations that consist of a single one-character word.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterOneCharacterWordCombinations(wordCombinations) {\n    return wordCombinations.filter(function (combination) {\n        return !(combination.getLength() === 1 && combination.getWords()[0].length <= 1);\n    });\n}\n/**\n * Filters word combinations containing certain function words at any position.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAnywhere(wordCombinations, functionWords) {\n    return wordCombinations.filter(function (combination) {\n        return isEmpty(intersection(functionWords, combination.getWords()));\n    });\n}\n/**\n * Filters word combinations beginning with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtBeginning(wordCombinations, functionWords) {\n    return wordCombinations.filter(function (combination) {\n        return !includes(functionWords, combination.getWords()[0]);\n    });\n}\n/**\n * Filters word combinations ending with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtEnding(wordCombinations, functionWords) {\n    return wordCombinations.filter(function (combination) {\n        let words = combination.getWords();\n        let lastWordIndex = words.length - 1;\n        return !includes(functionWords, words[lastWordIndex]);\n    });\n}\n/**\n * Filters word combinations beginning and ending with certain function words.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {Array} functionWords The list of function words.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterFunctionWordsAtBeginningAndEnding(wordCombinations, functionWords) {\n    wordCombinations = filterFunctionWordsAtBeginning(wordCombinations, functionWords);\n    wordCombinations = filterFunctionWordsAtEnding(wordCombinations, functionWords);\n    return wordCombinations;\n}\n/**\n * Filters word combinations based on keyword density if the word count is 200 or over.\n *\n * @param {WordCombination[]} wordCombinations The word combinations to filter.\n * @param {number} wordCount The number of words in the total text.\n * @param {number} densityLowerLimit The lower limit of keyword density.\n * @param {number} densityUpperLimit The upper limit of keyword density.\n * @returns {WordCombination[]} Filtered word combinations.\n */\nfunction filterOnDensity(wordCombinations, wordCount, densityLowerLimit, densityUpperLimit) {\n    return wordCombinations.filter(function (combination) {\n        return (combination.getDensity(wordCount) >= densityLowerLimit && combination.getDensity(wordCount) < densityUpperLimit);\n    });\n}\n/**\n * Filters the list of word combination objects based on the language-specific function word filters.\n * Word combinations with specific parts of speech are removed.\n *\n * @param {Array} combinations The list of word combination objects.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {Array} The filtered list of word combination objects.\n */\nfunction filterFunctionWords(combinations, functionWords) {\n    combinations = filterFunctionWordsAnywhere(combinations, functionWords().filteredAnywhere);\n    combinations = filterFunctionWordsAtBeginningAndEnding(combinations, functionWords().filteredAtBeginningAndEnding);\n    combinations = filterFunctionWordsAtEnding(combinations, functionWords().filteredAtEnding);\n    combinations = filterFunctionWordsAtBeginning(combinations, functionWords().filteredAtBeginning);\n    return combinations;\n}\n/**\n * Filters the list of word combination objects based on function word filters, a special character filter and\n * a one-character filter.\n *\n * @param {Array} combinations The list of word combination objects.\n * @param {Function} functionWords The function containing the lists of function words.\n * @returns {Array} The filtered list of word combination objects.\n */\nfunction filterCombinations(combinations, functionWords) {\n    combinations = filterFunctionWordsAnywhere(combinations, specialCharacters);\n    combinations = filterOneCharacterWordCombinations(combinations);\n    combinations = filterFunctionWords(combinations, functionWords);\n    return combinations;\n}\n/**\n * Returns the relevant words in a given text.\n *\n * @param {string} text The text to retrieve the relevant words of.\n * @param {string} locale The paper's locale.\n * @returns {WordCombination[]} All relevant words sorted and filtered for this text.\n */\nfunction getRelevantWords(text, locale) {\n    let functionWords;\n    switch (getLanguage(locale)) {\n        case \"de\":\n            functionWords = germanFunctionWords;\n            break;\n        case \"nl\":\n            functionWords = dutchFunctionWords;\n            break;\n        case \"fr\":\n            functionWords = frenchFunctionWords;\n            break;\n        case \"es\":\n            functionWords = spanishFunctionWords;\n            break;\n        case \"it\":\n            functionWords = italianFunctionWords;\n            break;\n        default:\n        case \"en\":\n            functionWords = englishFunctionWords;\n            break;\n    }\n    let words = getWordCombinations(text, 1, functionWords().all);\n    let wordCount = words.length;\n    let oneWordCombinations = getRelevantCombinations(calculateOccurrences(words));\n    sortCombinations(oneWordCombinations);\n    oneWordCombinations = take(oneWordCombinations, 100);\n    let oneWordRelevanceMap = {};\n    forEach(oneWordCombinations, function (combination) {\n        oneWordRelevanceMap[combination.getCombination()] = combination.getRelevance(functionWords);\n    });\n    let twoWordCombinations = calculateOccurrences(getWordCombinations(text, 2, functionWords().all));\n    let threeWordCombinations = calculateOccurrences(getWordCombinations(text, 3, functionWords().all));\n    let fourWordCombinations = calculateOccurrences(getWordCombinations(text, 4, functionWords().all));\n    let fiveWordCombinations = calculateOccurrences(getWordCombinations(text, 5, functionWords().all));\n    let combinations = oneWordCombinations.concat(twoWordCombinations, threeWordCombinations, fourWordCombinations, fiveWordCombinations);\n    combinations = filterCombinations(combinations, functionWords);\n    forEach(combinations, function (combination) {\n        combination.setRelevantWords(oneWordRelevanceMap);\n    });\n    combinations = getRelevantCombinations(combinations, wordCount);\n    sortCombinations(combinations);\n    if (wordCount >= wordCountLowerLimit) {\n        combinations = filterOnDensity(combinations, wordCount, densityLowerLimit, densityUpperLimit);\n    }\n    return take(combinations, relevantWordLimit);\n}\nmodule.exports = {\n    getWordCombinations: getWordCombinations,\n    getRelevantWords: getRelevantWords,\n    calculateOccurrences: calculateOccurrences,\n    getRelevantCombinations: getRelevantCombinations,\n    sortCombinations: sortCombinations,\n    filterFunctionWordsAtEnding: filterFunctionWordsAtEnding,\n    filterFunctionWordsAtBeginning: filterFunctionWordsAtBeginning,\n    filterFunctionWords: filterFunctionWordsAtBeginningAndEnding,\n    filterFunctionWordsAnywhere: filterFunctionWordsAnywhere,\n    filterOnDensity: filterOnDensity,\n    filterOneCharacterWordCombinations: filterOneCharacterWordCombinations,\n};\n//# sourceMappingURL=relevantWords.js.map"]}