{"version":3,"sources":["../../../js/stringProcessing/url.js"],"names":["urlFromAnchorRegex","urlMethods","require","removeHash","url","split","removeQueryArgs","removeTrailingSlash","replace","addTrailingSlash","getFromAnchorTag","anchorTag","urlMatch","exec","areEqual","urlA","urlB","getHostname","parse","hostname","getProtocol","protocol","isInternalLink","host","parsedUrl","indexOf","protocolIsHttpScheme","isRelativeFragmentURL","module","exports"],"mappings":"AAAA;;AACA,IAAIA,qBAAqB,wBAAzB;AACA,IAAIC,aAAaC,QAAQ,KAAR,CAAjB;AACA;;;;;;AAMA,SAASC,UAAT,CAAoBC,GAApB,EAAyB;AACrB,WAAOA,IAAIC,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP;AACH;AACD;;;;;;AAMA,SAASC,eAAT,CAAyBF,GAAzB,EAA8B;AAC1B,WAAOA,IAAIC,KAAJ,CAAU,GAAV,EAAe,CAAf,CAAP;AACH;AACD;;;;;;AAMA,SAASE,mBAAT,CAA6BH,GAA7B,EAAkC;AAC9B,WAAOA,IAAII,OAAJ,CAAY,KAAZ,EAAmB,EAAnB,CAAP;AACH;AACD;;;;;;AAMA,SAASC,gBAAT,CAA0BL,GAA1B,EAA+B;AAC3B,WAAOG,oBAAoBH,GAApB,IAA2B,GAAlC;AACH;AACD;;;;;;AAMA,SAASM,gBAAT,CAA0BC,SAA1B,EAAqC;AACjC,QAAIC,WAAWZ,mBAAmBa,IAAnB,CAAwBF,SAAxB,CAAf;AACA,WAAQC,aAAa,IAAd,GAAsB,EAAtB,GAA2BA,SAAS,CAAT,CAAlC;AACH;AACD;;;;;;;;AAQA,SAASE,QAAT,CAAkBC,IAAlB,EAAwBC,IAAxB,EAA8B;AAC1B;AACAD,WAAOT,gBAAgBH,WAAWY,IAAX,CAAhB,CAAP;AACAC,WAAOV,gBAAgBH,WAAWa,IAAX,CAAhB,CAAP;AACA,WAAOP,iBAAiBM,IAAjB,MAA2BN,iBAAiBO,IAAjB,CAAlC;AACH;AACD;;;;;;AAMA,SAASC,WAAT,CAAqBb,GAArB,EAA0B;AACtBA,UAAMH,WAAWiB,KAAX,CAAiBd,GAAjB,CAAN;AACA,WAAOA,IAAIe,QAAX;AACH;AACD;;;;;;;;AAQA,SAASC,WAAT,CAAqBhB,GAArB,EAA0B;AACtB,WAAOH,WAAWiB,KAAX,CAAiBd,GAAjB,EAAsBiB,QAA7B;AACH;AACD;;;;;;;;AAQA,SAASC,cAAT,CAAwBlB,GAAxB,EAA6BmB,IAA7B,EAAmC;AAC/B,QAAMC,YAAYvB,WAAWiB,KAAX,CAAiBd,GAAjB,EAAsB,KAAtB,EAA6B,IAA7B,CAAlB;AACA;AACA,QAAIA,IAAIqB,OAAJ,CAAY,IAAZ,MAAsB,CAAC,CAAvB,IAA4BrB,IAAIqB,OAAJ,CAAY,GAAZ,MAAqB,CAArD,EAAwD;AACpD,eAAO,IAAP;AACH;AACD;AACA,QAAIrB,IAAIqB,OAAJ,CAAY,GAAZ,MAAqB,CAAzB,EAA4B;AACxB,eAAO,KAAP;AACH;AACD;AACA,QAAI,CAACD,UAAUD,IAAf,EAAqB;AACjB,eAAO,IAAP;AACH;AACD,WAAOC,UAAUD,IAAV,KAAmBA,IAA1B;AACH;AACD;;;;;;;AAOA,SAASG,oBAAT,CAA8BL,QAA9B,EAAwC;AACpC,QAAI,CAACA,QAAL,EAAe;AACX,eAAO,KAAP;AACH;AACD,WAAQA,aAAa,OAAb,IAAwBA,aAAa,QAA7C;AACH;AACD;;;;;;;AAOA,SAASM,qBAAT,CAA+BvB,GAA/B,EAAoC;AAChC,WAAOA,IAAIqB,OAAJ,CAAY,GAAZ,MAAqB,CAA5B;AACH;AACDG,OAAOC,OAAP,GAAiB;AACb1B,gBAAYA,UADC;AAEbG,qBAAiBA,eAFJ;AAGbC,yBAAqBA,mBAHR;AAIbE,sBAAkBA,gBAJL;AAKbC,sBAAkBA,gBALL;AAMbI,cAAUA,QANG;AAObG,iBAAaA,WAPA;AAQbG,iBAAaA,WARA;AASbE,oBAAgBA,cATH;AAUbI,0BAAsBA,oBAVT;AAWbC,2BAAuBA;AAXV,CAAjB;AAaA","file":"url.js","sourcesContent":["\"use strict\";\nvar urlFromAnchorRegex = /href=([\"'])([^\"']+)\\1/i;\nvar urlMethods = require(\"url\");\n/**\n * Removes a hash from a URL, assumes a well formed URL.\n *\n * @param {string} url The URL to remove a hash from.\n * @returns {string} The URL without the hash.\n */\nfunction removeHash(url) {\n    return url.split(\"#\")[0];\n}\n/**\n * Removes all query args from a URL, assumes a well formed URL.\n *\n * @param {string} url The URL to remove the query args from.\n * @returns {string} The URL without the query args.\n */\nfunction removeQueryArgs(url) {\n    return url.split(\"?\")[0];\n}\n/**\n * Removes the trailing slash of a URL.\n *\n * @param {string} url The URL to remove the trailing slash from.\n * @returns {string} A URL without a trailing slash.\n */\nfunction removeTrailingSlash(url) {\n    return url.replace(/\\/$/, \"\");\n}\n/**\n * Adds a trailing slash to a URL if it is not present.\n *\n * @param {string} url The URL to add a trailing slash to.\n * @returns {string} A URL with a trailing slash.\n */\nfunction addTrailingSlash(url) {\n    return removeTrailingSlash(url) + \"/\";\n}\n/**\n * Retrieves the URL from an anchor tag.\n *\n * @param {string} anchorTag An anchor tag.\n * @returns {string} The URL in the anchor tag.\n */\nfunction getFromAnchorTag(anchorTag) {\n    var urlMatch = urlFromAnchorRegex.exec(anchorTag);\n    return (urlMatch === null) ? \"\" : urlMatch[2];\n}\n/**\n * Returns whether or not the given URLs are equal.\n *\n * @param {string} urlA The first URL to compare.\n * @param {string} urlB The second URL to compare.\n *\n * @returns {boolean} Whether or not the given URLs are equal.\n */\nfunction areEqual(urlA, urlB) {\n    // Make sure we are comparing URLs without query arguments and hashes.\n    urlA = removeQueryArgs(removeHash(urlA));\n    urlB = removeQueryArgs(removeHash(urlB));\n    return addTrailingSlash(urlA) === addTrailingSlash(urlB);\n}\n/**\n * Returns the domain name of a URL.\n *\n * @param {string} url The URL to retrieve the domain name of.\n * @returns {string} The domain name of the URL.\n */\nfunction getHostname(url) {\n    url = urlMethods.parse(url);\n    return url.hostname;\n}\n/**\n * Returns the protocol of a URL.\n *\n * Note that the colon (http:) is also part of the protocol, conform to node's url.parse api.\n *\n * @param {string} url The URL to retrieve the protocol of.\n * @returns {string|null} The protocol of the URL or null if no protocol is present.\n */\nfunction getProtocol(url) {\n    return urlMethods.parse(url).protocol;\n}\n/**\n * Determine whether a URL is internal.\n *\n * @param {string} url The URL to test.\n * @param {string} host The current host.\n *\n * @returns {boolean} Whether or not the URL is internal.\n */\nfunction isInternalLink(url, host) {\n    const parsedUrl = urlMethods.parse(url, false, true);\n    // Check if the URL starts with a single slash.\n    if (url.indexOf(\"//\") === -1 && url.indexOf(\"/\") === 0) {\n        return true;\n    }\n    // Check if the URL starts with a # indicating a fragment.\n    if (url.indexOf(\"#\") === 0) {\n        return false;\n    }\n    // No host indicates an internal link.\n    if (!parsedUrl.host) {\n        return true;\n    }\n    return parsedUrl.host === host;\n}\n/**\n * Checks whether the protocol is either HTTP: or HTTPS:.\n *\n * @param {string} protocol The protocol to test.\n *\n * @returns {boolean} Whether the protocol is http(s):.\n */\nfunction protocolIsHttpScheme(protocol) {\n    if (!protocol) {\n        return false;\n    }\n    return (protocol === \"http:\" || protocol === \"https:\");\n}\n/**\n * Determines whether the link is a relative fragment URL.\n *\n * @param {string} url The URL to test.\n *\n * @returns {boolean} Whether the link is a relative fragment URL.\n */\nfunction isRelativeFragmentURL(url) {\n    return url.indexOf(\"#\") === 0;\n}\nmodule.exports = {\n    removeHash: removeHash,\n    removeQueryArgs: removeQueryArgs,\n    removeTrailingSlash: removeTrailingSlash,\n    addTrailingSlash: addTrailingSlash,\n    getFromAnchorTag: getFromAnchorTag,\n    areEqual: areEqual,\n    getHostname: getHostname,\n    getProtocol: getProtocol,\n    isInternalLink: isInternalLink,\n    protocolIsHttpScheme: protocolIsHttpScheme,\n    isRelativeFragmentURL: isRelativeFragmentURL,\n};\n//# sourceMappingURL=url.js.map"]}