{"version":3,"sources":["../../../../js/stringProcessing/syllables/count.js"],"names":["syllableMatchers","require","getWords","forEach","filter","find","isUndefined","map","sum","memoize","flatMap","SyllableCountIterator","DeviationFragment","countVowelGroups","word","locale","numberOfSyllables","vowelRegex","RegExp","vowels","foundVowels","split","filteredWords","vowel","length","countVowelDeviations","syllableCountIterator","countSyllables","countFullWordDeviations","fullWordDeviations","deviations","words","full","deviation","fullWordDeviation","syllables","createDeviationFragments","syllableConfig","deviationFragments","fragments","fragmentLocation","fragment","location","createDeviationFragmentsMemoized","countPartialWordDeviations","remainingParts","syllableCount","deviationFragment","occursIn","removeFrom","getSyllables","countUsingVowels","countSyllablesInWord","fullWordExclusion","partialExclusions","countSyllablesInText","text","toLocaleLowerCase","syllableCounts","module","exports"],"mappings":"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","file":"count.js","sourcesContent":["\"use strict\";\n/** @module stringProcessing/countSyllables */\nvar syllableMatchers = require(\"../../config/syllables.js\");\nvar getWords = require(\"../getWords.js\");\nvar forEach = require(\"lodash/forEach\");\nvar filter = require(\"lodash/filter\");\nvar find = require(\"lodash/find\");\nvar isUndefined = require(\"lodash/isUndefined\");\nvar map = require(\"lodash/map\");\nvar sum = require(\"lodash/sum\");\nvar memoize = require(\"lodash/memoize\");\nvar flatMap = require(\"lodash/flatMap\");\nvar SyllableCountIterator = require(\"../../helpers/syllableCountIterator.js\");\nvar DeviationFragment = require(\"./DeviationFragment\");\n/**\n * Counts vowel groups inside a word.\n *\n * @param {string} word A text with words to count syllables.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} the syllable count.\n */\nvar countVowelGroups = function (word, locale) {\n    var numberOfSyllables = 0;\n    var vowelRegex = new RegExp(\"[^\" + syllableMatchers(locale).vowels + \"]\", \"ig\");\n    var foundVowels = word.split(vowelRegex);\n    var filteredWords = filter(foundVowels, function (vowel) {\n        return vowel !== \"\";\n    });\n    numberOfSyllables += filteredWords.length;\n    return numberOfSyllables;\n};\n/**\n * Counts the syllables using vowel exclusions. These are used for groups of vowels that are more or less\n * than 1 syllable.\n *\n * @param {String} word The word to count syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found in the given word.\n */\nvar countVowelDeviations = function (word, locale) {\n    var syllableCountIterator = new SyllableCountIterator(syllableMatchers(locale));\n    return syllableCountIterator.countSyllables(word);\n};\n/**\n * Returns the number of syllables for the word if it is in the list of full word deviations.\n *\n * @param {String} word The word to retrieve the syllables for.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found.\n */\nvar countFullWordDeviations = function (word, locale) {\n    var fullWordDeviations = syllableMatchers(locale).deviations.words.full;\n    var deviation = find(fullWordDeviations, function (fullWordDeviation) {\n        return fullWordDeviation.word === word;\n    });\n    if (!isUndefined(deviation)) {\n        return deviation.syllables;\n    }\n    return 0;\n};\n/**\n * Creates an array of deviation fragments for a certain locale.\n *\n * @param {Object} syllableConfig Syllable config for a certain locale.\n * @returns {DeviationFragment[]} A list of deviation fragments\n */\nfunction createDeviationFragments(syllableConfig) {\n    var deviationFragments = [];\n    var deviations = syllableConfig.deviations;\n    if (!isUndefined(deviations.words) && !isUndefined(deviations.words.fragments)) {\n        deviationFragments = flatMap(deviations.words.fragments, function (fragments, fragmentLocation) {\n            return map(fragments, function (fragment) {\n                fragment.location = fragmentLocation;\n                return new DeviationFragment(fragment);\n            });\n        });\n    }\n    return deviationFragments;\n}\nvar createDeviationFragmentsMemoized = memoize(createDeviationFragments);\n/**\n * Counts syllables in partial exclusions. If these are found, returns the number of syllables  found, and the modified word.\n * The word is modified so the excluded part isn't counted by the normal syllable counter.\n *\n * @param {String} word The word to count syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {object} The number of syllables found and the modified word.\n */\nvar countPartialWordDeviations = function (word, locale) {\n    var deviationFragments = createDeviationFragmentsMemoized(syllableMatchers(locale));\n    var remainingParts = word;\n    var syllableCount = 0;\n    forEach(deviationFragments, function (deviationFragment) {\n        if (deviationFragment.occursIn(remainingParts)) {\n            remainingParts = deviationFragment.removeFrom(remainingParts);\n            syllableCount += deviationFragment.getSyllables();\n        }\n    });\n    return { word: remainingParts, syllableCount: syllableCount };\n};\n/**\n * Count the number of syllables in a word, using vowels and exceptions.\n *\n * @param {String} word The word to count the number of syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {number} The number of syllables found in a word.\n */\nvar countUsingVowels = function (word, locale) {\n    var syllableCount = 0;\n    syllableCount += countVowelGroups(word, locale);\n    syllableCount += countVowelDeviations(word, locale);\n    return syllableCount;\n};\n/**\n * Counts the number of syllables in a word.\n *\n * @param {string} word The word to count syllables of.\n * @param {string} locale The locale of the word.\n * @returns {number} The syllable count for the word.\n */\nvar countSyllablesInWord = function (word, locale) {\n    var syllableCount = 0;\n    var fullWordExclusion = countFullWordDeviations(word, locale);\n    if (fullWordExclusion !== 0) {\n        return fullWordExclusion;\n    }\n    var partialExclusions = countPartialWordDeviations(word, locale);\n    word = partialExclusions.word;\n    syllableCount += partialExclusions.syllableCount;\n    syllableCount += countUsingVowels(word, locale);\n    return syllableCount;\n};\n/**\n * Counts the number of syllables in a text per word based on vowels.\n * Uses exclusion words for words that cannot be matched with vowel matching.\n *\n * @param {String} text The text to count the syllables of.\n * @param {String} locale The locale to use for counting syllables.\n * @returns {int} The total number of syllables found in the text.\n */\nvar countSyllablesInText = function (text, locale) {\n    text = text.toLocaleLowerCase();\n    var words = getWords(text);\n    var syllableCounts = map(words, function (word) {\n        return countSyllablesInWord(word, locale);\n    });\n    return sum(syllableCounts);\n};\nmodule.exports = countSyllablesInText;\n//# sourceMappingURL=count.js.map"]}