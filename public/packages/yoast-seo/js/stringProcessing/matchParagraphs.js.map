{"version":3,"sources":["../../../js/stringProcessing/matchParagraphs.js"],"names":["map","require","flatMap","filter","getBlocks","getParagraphsInTags","text","paragraphs","regex","match","exec","push","paragraph","module","exports","length","blocks","block","indexOf","split"],"mappings":"AAAA;;AACA,IAAIA,MAAMC,QAAQ,YAAR,CAAV;AACA,IAAIC,UAAUD,QAAQ,gBAAR,CAAd;AACA,IAAIE,SAASF,QAAQ,eAAR,CAAb;AACA,IAAIG,YAAYH,QAAQ,iBAAR,EAA2BG,SAA3C;AACA;;;;;AAKA,IAAIC,sBAAsB,SAAtBA,mBAAsB,CAAUC,IAAV,EAAgB;AACtC,QAAIC,aAAa,EAAjB;AACA;AACA,QAAIC,QAAQ,2BAAZ;AACA,QAAIC,KAAJ;AACA,WAAO,CAACA,QAAQD,MAAME,IAAN,CAAWJ,IAAX,CAAT,MAA+B,IAAtC,EAA4C;AACxCC,mBAAWI,IAAX,CAAgBF,KAAhB;AACH;AACD;AACA,WAAOT,IAAIO,UAAJ,EAAgB,UAAUK,SAAV,EAAqB;AACxC,eAAOA,UAAU,CAAV,CAAP;AACH,KAFM,CAAP;AAGH,CAZD;AAaA;;;;;AAKAC,OAAOC,OAAP,GAAiB,UAAUR,IAAV,EAAgB;AAC7B,QAAIC,aAAaF,oBAAoBC,IAApB,CAAjB;AACA,QAAIC,WAAWQ,MAAX,GAAoB,CAAxB,EAA2B;AACvB,eAAOR,UAAP;AACH;AACD;AACA,QAAIS,SAASZ,UAAUE,IAAV,CAAb;AACAU,aAASb,OAAOa,MAAP,EAAe,UAAUC,KAAV,EAAiB;AACrC;AACA,eAAO,MAAMA,MAAMC,OAAN,CAAc,IAAd,CAAb;AACH,KAHQ,CAAT;AAIAX,iBAAaL,QAAQc,MAAR,EAAgB,UAAUC,KAAV,EAAiB;AAC1C,eAAOA,MAAME,KAAN,CAAY,MAAZ,CAAP;AACH,KAFY,CAAb;AAGA,QAAIZ,WAAWQ,MAAX,GAAoB,CAAxB,EAA2B;AACvB,eAAOR,UAAP;AACH;AACD;AACA,WAAO,CAACD,IAAD,CAAP;AACH,CAnBD;AAoBA","file":"matchParagraphs.js","sourcesContent":["\"use strict\";\nvar map = require(\"lodash/map\");\nvar flatMap = require(\"lodash/flatMap\");\nvar filter = require(\"lodash/filter\");\nvar getBlocks = require(\"../helpers/html\").getBlocks;\n/**\n * Matches the paragraphs in <p>-tags and returns the text in them.\n * @param {string} text The text to match paragraph in.\n * @returns {array} An array containing all paragraphs texts.\n */\nvar getParagraphsInTags = function (text) {\n    var paragraphs = [];\n    // Matches everything between the <p> and </p> tags.\n    var regex = /<p(?:[^>]+)?>(.*?)<\\/p>/ig;\n    var match;\n    while ((match = regex.exec(text)) !== null) {\n        paragraphs.push(match);\n    }\n    // Returns only the text from within the paragraph tags.\n    return map(paragraphs, function (paragraph) {\n        return paragraph[1];\n    });\n};\n/**\n * Returns an array with all paragraphs from the text.\n * @param {string} text The text to match paragraph in.\n * @returns {Array} The array containing all paragraphs from the text.\n */\nmodule.exports = function (text) {\n    var paragraphs = getParagraphsInTags(text);\n    if (paragraphs.length > 0) {\n        return paragraphs;\n    }\n    // If no <p> tags found, split on double linebreaks.\n    var blocks = getBlocks(text);\n    blocks = filter(blocks, function (block) {\n        // Match explicit paragraph tags, or if a block has no HTML tags.\n        return 0 !== block.indexOf(\"<h\");\n    });\n    paragraphs = flatMap(blocks, function (block) {\n        return block.split(\"\\n\\n\");\n    });\n    if (paragraphs.length > 0) {\n        return paragraphs;\n    }\n    // If no paragraphs are found, return an array containing the entire text.\n    return [text];\n};\n//# sourceMappingURL=matchParagraphs.js.map"]}