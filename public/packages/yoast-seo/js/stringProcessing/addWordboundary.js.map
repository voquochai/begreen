{"version":3,"sources":["../../../js/stringProcessing/addWordboundary.js"],"names":["module","exports","matchString","positiveLookAhead","extraWordBoundary","wordBoundary","wordBoundaryStart","wordBoundaryEnd"],"mappings":"AAAA;AACA;AACA;;;;;;;;;;AASAA,OAAOC,OAAP,GAAiB,UAAUC,WAAV,EAA0E;AAAA,QAAnDC,iBAAmD,uEAA/B,KAA+B;AAAA,QAAxBC,iBAAwB,uEAAJ,EAAI;;AACvF,QAAIC,YAAJ,EAAkBC,iBAAlB,EAAqCC,eAArC;AACAF,mBAAe,6DAAgDD,iBAAhD,GAAoE,KAAnF;AACAE,wBAAoB,QAAQD,YAAR,GAAuB,GAA3C;AACA,QAAIF,iBAAJ,EAAuB;AACnBE,uBAAe,QAAQA,YAAR,GAAuB,GAAtC;AACH;AACDE,sBAAkB,QAAQF,YAAR,GAAuB,GAAzC;AACA,WAAOC,oBAAoBJ,WAApB,GAAkCK,eAAzC;AACH,CATD;AAUA","file":"addWordboundary.js","sourcesContent":["\"use strict\";\n/** @module stringProcessing/addWordboundary */\n/**\n * Returns a string that can be used in a regex to match a matchString with word boundaries.\n *\n * @param {string} matchString The string to generate a regex string for.\n * @param {boolean} [positiveLookAhead] Boolean indicating whether or not to include a positive look ahead\n * for the word boundaries at the end.\n * @param {string} [extraWordBoundary] Extra characters to match a word boundary on.\n * @returns {string} A regex string that matches the matchString with word boundaries.\n */\nmodule.exports = function (matchString, positiveLookAhead = false, extraWordBoundary = \"\") {\n    var wordBoundary, wordBoundaryStart, wordBoundaryEnd;\n    wordBoundary = \"[ \\\\u00a0 \\\\n\\\\r\\\\t\\.,'\\(\\)\\\"\\+\\-;!?:\\/»«‹›\" + extraWordBoundary + \"<>]\";\n    wordBoundaryStart = \"(^|\" + wordBoundary + \")\";\n    if (positiveLookAhead) {\n        wordBoundary = \"(?=\" + wordBoundary + \")\";\n    }\n    wordBoundaryEnd = \"($|\" + wordBoundary + \")\";\n    return wordBoundaryStart + matchString + wordBoundaryEnd;\n};\n//# sourceMappingURL=addWordboundary.js.map"]}