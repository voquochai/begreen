{"version":3,"sources":["../../../js/stringProcessing/createRegexFromDoubleArray.js"],"names":["addWordBoundary","require","wordCombinationToRegexString","array","map","word","join","module","exports","wordCombination","regexString","RegExp"],"mappings":"AAAA;AACA;;AACA,IAAIA,kBAAkBC,QAAQ,wCAAR,CAAtB;AACA;;;;;AAKA,IAAIC,+BAA+B,SAA/BA,4BAA+B,CAAUC,KAAV,EAAiB;AAChDA,YAAQA,MAAMC,GAAN,CAAU,UAAUC,IAAV,EAAgB;AAC9B,eAAOL,gBAAgBK,IAAhB,CAAP;AACH,KAFO,CAAR;AAGA,WAAOF,MAAMG,IAAN,CAAW,OAAX,CAAP;AACH,CALD;AAMA;;;;;AAKAC,OAAOC,OAAP,GAAiB,UAAUL,KAAV,EAAiB;AAC9BA,YAAQA,MAAMC,GAAN,CAAU,UAAUK,eAAV,EAA2B;AACzC,eAAOP,6BAA6BO,eAA7B,CAAP;AACH,KAFO,CAAR;AAGA,QAAIC,cAAc,MAAMP,MAAMG,IAAN,CAAW,KAAX,CAAN,GAA0B,GAA5C;AACA,WAAO,IAAIK,MAAJ,CAAWD,WAAX,EAAwB,IAAxB,CAAP;AACH,CAND;AAOA","file":"createRegexFromDoubleArray.js","sourcesContent":["\"use strict\";\n/** @module stringProcessing/createRegexFromDoubleArray */\nvar addWordBoundary = require(\"../stringProcessing/addWordboundary.js\");\n/**\n * Creates a regex string of combined strings from the input array.\n * @param {array} array The array containing the various parts of a transition word combination.\n * @returns {array} The array with replaced entries.\n */\nvar wordCombinationToRegexString = function (array) {\n    array = array.map(function (word) {\n        return addWordBoundary(word);\n    });\n    return array.join(\"(.*?)\");\n};\n/**\n * Creates a regex of combined strings from the input array, containing arrays with two entries.\n * @param {array} array The array containing arrays.\n * @returns {RegExp} The regex created from the array.\n */\nmodule.exports = function (array) {\n    array = array.map(function (wordCombination) {\n        return wordCombinationToRegexString(wordCombination);\n    });\n    var regexString = \"(\" + array.join(\")|(\") + \")\";\n    return new RegExp(regexString, \"ig\");\n};\n//# sourceMappingURL=createRegexFromDoubleArray.js.map"]}