{"version":3,"sources":["../../../js/stringProcessing/matchWordInSentence.js"],"names":["wordBoundaries","require","includes","addWordBoundary","characterInBoundary","character","isWordInSentence","word","sentence","toLocaleLowerCase","wordWithBoundaries","occurrenceStart","search","RegExp","occurrenceEnd","length","previousCharacter","nextCharacter","module","exports"],"mappings":"AAAA;;AACA,IAAIA,iBAAiBC,QAAQ,6BAAR,GAArB;AACA,IAAIC,WAAWD,QAAQ,iBAAR,CAAf;AACA,IAAIE,kBAAkBF,QAAQ,sBAAR,CAAtB;AACA;;;;;;AAMA,IAAIG,sBAAsB,SAAtBA,mBAAsB,CAAUC,SAAV,EAAqB;AAC3C,WAAOH,SAASF,cAAT,EAAyBK,SAAzB,CAAP;AACH,CAFD;AAGA;;;;;;;AAOA,IAAIC,mBAAmB,SAAnBA,gBAAmB,CAAUC,IAAV,EAAgBC,QAAhB,EAA0B;AAC7C;AACAD,WAAOA,KAAKE,iBAAL,EAAP;AACAD,eAAWA,SAASC,iBAAT,EAAX;AACA,QAAIC,qBAAqBP,gBAAgBI,IAAhB,CAAzB;AACA,QAAII,kBAAkBH,SAASI,MAAT,CAAgB,IAAIC,MAAJ,CAAWH,kBAAX,EAA+B,IAA/B,CAAhB,CAAtB;AACA;AACA,QAAIC,oBAAoB,CAAC,CAAzB,EAA4B;AACxB,eAAO,KAAP;AACH;AACD;;;;;;AAMA,QAAIA,kBAAkB,CAAtB,EAAyB;AACrBA,2BAAmB,CAAnB;AACH;AACD,QAAIG,gBAAgBH,kBAAkBJ,KAAKQ,MAA3C;AACA;AACA,QAAIC,oBAAoBZ,oBAAoBI,SAASG,kBAAkB,CAA3B,CAApB,KAAsDA,oBAAoB,CAAlG;AACA,QAAIM,gBAAgBb,oBAAoBI,SAASM,aAAT,CAApB,KAAgDA,kBAAkBN,SAASO,MAA/F;AACA,WAASC,iBAAD,IAAwBC,aAAhC;AACH,CAxBD;AAyBAC,OAAOC,OAAP,GAAiB;AACbf,yBAAqBA,mBADR;AAEbE,sBAAkBA;AAFL,CAAjB;AAIA","file":"matchWordInSentence.js","sourcesContent":["\"use strict\";\nvar wordBoundaries = require(\"../config/wordBoundaries.js\")();\nvar includes = require(\"lodash/includes\");\nvar addWordBoundary = require(\"./addWordboundary.js\");\n/**\n * Checks whether a character is present in the list of word boundaries.\n *\n * @param {string} character The character to look for.\n * @returns {boolean} Whether or not the character is present in the list of word boundaries.\n */\nvar characterInBoundary = function (character) {\n    return includes(wordBoundaries, character);\n};\n/**\n * Checks whether a word is present in a sentence.\n *\n * @param {string} word The word to search for in the sentence.\n * @param {string} sentence The sentence to look through.\n * @returns {boolean} Whether or not the word is present in the sentence.\n */\nvar isWordInSentence = function (word, sentence) {\n    // To ensure proper matching, make everything lowercase.\n    word = word.toLocaleLowerCase();\n    sentence = sentence.toLocaleLowerCase();\n    var wordWithBoundaries = addWordBoundary(word);\n    var occurrenceStart = sentence.search(new RegExp(wordWithBoundaries, \"ig\"));\n    // Return false if no match has been found.\n    if (occurrenceStart === -1) {\n        return false;\n    }\n    /*\n    If there is a word boundary before the matched word, the regex includes this word boundary in the match.\n    This means that occurrenceStart is the index of the word boundary before the match. Therefore 1 has to\n    be added to occurrenceStart, except when there is no word boundary before the match (i.e. at the start\n    of a sentence).\n     */\n    if (occurrenceStart > 0) {\n        occurrenceStart += 1;\n    }\n    var occurrenceEnd = occurrenceStart + word.length;\n    // Check if the previous and next character are word boundaries to determine if a complete word was detected\n    var previousCharacter = characterInBoundary(sentence[occurrenceStart - 1]) || occurrenceStart === 0;\n    var nextCharacter = characterInBoundary(sentence[occurrenceEnd]) || occurrenceEnd === sentence.length;\n    return ((previousCharacter) && (nextCharacter));\n};\nmodule.exports = {\n    characterInBoundary: characterInBoundary,\n    isWordInSentence: isWordInSentence,\n};\n//# sourceMappingURL=matchWordInSentence.js.map"]}