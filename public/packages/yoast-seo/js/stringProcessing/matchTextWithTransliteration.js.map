{"version":3,"sources":["../../../js/stringProcessing/matchTextWithTransliteration.js"],"names":["map","require","addWordBoundary","stripSpaces","transliterate","toRegex","keyword","RegExp","module","exports","text","locale","keywordRegex","matches","match","replace","transliterateKeyword","transliterateKeywordRegex","transliterateMatches","combinedArray","concat"],"mappings":"AAAA;;AACA,IAAIA,MAAMC,QAAQ,YAAR,CAAV;AACA,IAAIC,kBAAkBD,QAAQ,sBAAR,CAAtB;AACA,IAAIE,cAAcF,QAAQ,kBAAR,CAAlB;AACA,IAAIG,gBAAgBH,QAAQ,oBAAR,CAApB;AACA;;;;;AAKA,IAAII,UAAU,SAAVA,OAAU,CAAUC,OAAV,EAAmB;AAC7BA,cAAUJ,gBAAgBI,OAAhB,CAAV;AACA,WAAO,IAAIC,MAAJ,CAAWD,OAAX,EAAoB,IAApB,CAAP;AACH,CAHD;AAIA;;;;;;;AAOAE,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAAgBJ,OAAhB,EAAyBK,MAAzB,EAAiC;AAC9C,QAAIC,eAAeP,QAAQC,OAAR,CAAnB;AACA,QAAIO,UAAUH,KAAKI,KAAL,CAAWF,YAAX,KAA4B,EAA1C;AACAF,WAAOA,KAAKK,OAAL,CAAaH,YAAb,EAA2B,EAA3B,CAAP;AACA,QAAII,uBAAuBZ,cAAcE,OAAd,EAAuBK,MAAvB,CAA3B;AACA,QAAIM,4BAA4BZ,QAAQW,oBAAR,CAAhC;AACA,QAAIE,uBAAuBR,KAAKI,KAAL,CAAWG,yBAAX,KAAyC,EAApE;AACA,QAAIE,gBAAgBN,QAAQO,MAAR,CAAeF,oBAAf,CAApB;AACA,WAAOlB,IAAImB,aAAJ,EAAmB,UAAUb,OAAV,EAAmB;AACzC,eAAOH,YAAYG,OAAZ,CAAP;AACH,KAFM,CAAP;AAGH,CAXD;AAYA","file":"matchTextWithTransliteration.js","sourcesContent":["\"use strict\";\nvar map = require(\"lodash/map\");\nvar addWordBoundary = require(\"./addWordboundary.js\");\nvar stripSpaces = require(\"./stripSpaces.js\");\nvar transliterate = require(\"./transliterate.js\");\n/**\n * Creates a regex from the keyword with included wordboundaries.\n * @param {string} keyword The keyword to create a regex from.\n * @returns {RegExp} Regular expression of the keyword with wordboundaries.\n */\nvar toRegex = function (keyword) {\n    keyword = addWordBoundary(keyword);\n    return new RegExp(keyword, \"ig\");\n};\n/**\n * Matches a string with and without transliteration.\n * @param {string} text The text to match.\n * @param {string} keyword The keyword to match in the text.\n * @param {string} locale The locale used for transliteration.\n * @returns {Array} All matches from the original as the transliterated text and keyword.\n */\nmodule.exports = function (text, keyword, locale) {\n    var keywordRegex = toRegex(keyword);\n    var matches = text.match(keywordRegex) || [];\n    text = text.replace(keywordRegex, \"\");\n    var transliterateKeyword = transliterate(keyword, locale);\n    var transliterateKeywordRegex = toRegex(transliterateKeyword);\n    var transliterateMatches = text.match(transliterateKeywordRegex) || [];\n    var combinedArray = matches.concat(transliterateMatches);\n    return map(combinedArray, function (keyword) {\n        return stripSpaces(keyword);\n    });\n};\n//# sourceMappingURL=matchTextWithTransliteration.js.map"]}