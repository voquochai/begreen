{"version":3,"sources":["../../../js/stringProcessing/createWordRegex.js"],"names":["isUndefined","require","replaceDiacritics","addWordBoundary","sanitizeString","escapeRegExp","memoize","module","exports","string","extraBoundary","doReplaceDiacritics","RegExp"],"mappings":"AAAA;AACA;;AACA,IAAIA,cAAcC,QAAQ,oBAAR,CAAlB;AACA,IAAIC,oBAAoBD,QAAQ,0CAAR,CAAxB;AACA,IAAIE,kBAAkBF,QAAQ,wCAAR,CAAtB;AACA,IAAIG,iBAAiBH,QAAQ,oCAAR,CAArB;AACA,IAAII,eAAeJ,QAAQ,qBAAR,CAAnB;AACA,IAAIK,UAAUL,QAAQ,gBAAR,CAAd;AACA;;;;;;;;AAQAM,OAAOC,OAAP,GAAiBF,QAAQ,UAAUG,MAAV,EAAkBC,aAAlB,EAAiCC,mBAAjC,EAAsD;AAC3E,QAAIX,YAAYU,aAAZ,CAAJ,EAAgC;AAC5BA,wBAAgB,EAAhB;AACH;AACD,QAAIV,YAAYW,mBAAZ,KAAoCA,wBAAwB,IAAhE,EAAsE;AAClEF,iBAASP,kBAAkBO,MAAlB,CAAT;AACH;AACDA,aAASL,eAAeK,MAAf,CAAT;AACAA,aAASJ,aAAaI,MAAb,CAAT;AACAA,aAASN,gBAAgBM,MAAhB,EAAwB,KAAxB,EAA+BC,aAA/B,CAAT;AACA,WAAO,IAAIE,MAAJ,CAAWH,MAAX,EAAmB,IAAnB,CAAP;AACH,CAXgB,CAAjB;AAYA","file":"createWordRegex.js","sourcesContent":["\"use strict\";\n/** @module stringProcessing/stringToRegex */\nvar isUndefined = require(\"lodash/isUndefined\");\nvar replaceDiacritics = require(\"../stringProcessing/replaceDiacritics.js\");\nvar addWordBoundary = require(\"../stringProcessing/addWordboundary.js\");\nvar sanitizeString = require(\"../stringProcessing/sanitizeString\");\nvar escapeRegExp = require(\"lodash/escapeRegExp\");\nvar memoize = require(\"lodash/memoize\");\n/**\n * Creates a regex from a string so it can be matched everywhere in the same way.\n *\n * @param {string} string The string to make a regex from.\n * @param {string} [extraBoundary=\"\"] A string that is used as extra boundary for the regex.\n * @param {boolean} [doReplaceDiacritics=true] If set to false, it doesn't replace diacritics. Defaults to true.\n * @returns {RegExp} regex The regex made from the keyword\n */\nmodule.exports = memoize(function (string, extraBoundary, doReplaceDiacritics) {\n    if (isUndefined(extraBoundary)) {\n        extraBoundary = \"\";\n    }\n    if (isUndefined(doReplaceDiacritics) || doReplaceDiacritics === true) {\n        string = replaceDiacritics(string);\n    }\n    string = sanitizeString(string);\n    string = escapeRegExp(string);\n    string = addWordBoundary(string, false, extraBoundary);\n    return new RegExp(string, \"ig\");\n});\n//# sourceMappingURL=createWordRegex.js.map"]}