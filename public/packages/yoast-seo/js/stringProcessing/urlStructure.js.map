{"version":3,"sources":["../../../js/stringProcessing/urlStructure.js"],"names":["core","require","urlTokenizer","tokens","staticRegex","variableRegex","createTokenizer","token","push","addRule","UrlStructure","structure","_structure","data","reduce","url","urlPart","type","_buildVariablePart","value","urlPartConfig","hasOwnProperty","name","TypeError","onText","end","map","src","substr","length","module","exports"],"mappings":"AAAA;;;;;;AACA,IAAIA,OAAOC,QAAQ,iBAAR,CAAX;AACA;;;;;AAKA,IAAIC,YAAJ;AACA;;;;;AAKA,IAAIC,eAAJ;AACA;;;;;AAKA,IAAIC,cAAc,SAAlB;AACA;;;;;AAKA,IAAIC,gBAAgB,aAApB;AACA;;;;;;;AAOA,SAASC,eAAT,GAA2B;AACvBH,aAAS,EAAT;AACAD,mBAAeF,KAAK,UAAUO,KAAV,EAAiB;AACjCJ,eAAOK,IAAP,CAAYD,KAAZ;AACH,KAFc,CAAf;AAGAL,iBAAaO,OAAb,CAAqBL,WAArB,EAAkC,QAAlC;AACAF,iBAAaO,OAAb,CAAqBJ,aAArB,EAAoC,UAApC;AACH;AACD;;;;;;IAKMK,Y;AACF;;;;;;;AAOA,0BAAYC,SAAZ,EAAuB;AAAA;;AACnB,aAAKC,UAAL,GAAkBD,SAAlB;AACH;AACD;;;;;;;;;;;;iCAQSE,I,EAAM;AAAA;;AACX,mBAAO,KAAKD,UAAL,CAAgBE,MAAhB,CAAuB,UAACC,GAAD,EAAMC,OAAN,EAAkB;AAC5C,oBAAI,eAAeA,QAAQC,IAA3B,EAAiC;AAC7BD,8BAAU,MAAKE,kBAAL,CAAwBL,IAAxB,EAA8BG,OAA9B,CAAV;AACH,iBAFD,MAGK;AACDA,8BAAUA,QAAQG,KAAlB;AACH;AACD,uBAAOJ,MAAMC,OAAb;AACH,aARM,EAQJ,EARI,CAAP;AASH;AACD;;;;;;;;;;;;;;2CAWmBH,I,EAAMO,a,EAAe;AACpC,gBAAI,CAACP,KAAKQ,cAAL,CAAoBD,cAAcE,IAAlC,CAAL,EAA8C;AAC1C,sBAAM,IAAIC,SAAJ,CAAc,2CAA2CH,cAAcE,IAAzD,GAAgE,GAA9E,CAAN;AACH;AACD,mBAAOT,KAAKO,cAAcE,IAAnB,CAAP;AACH;AACD;;;;;;;;;;uCAOe;AACX,mBAAO,KAAKV,UAAZ;AACH;AACD;;;;;;;;;;;gCAQeG,G,EAAK;AAChBT;AACAJ,yBAAasB,MAAb,CAAoBT,GAApB;AACAb,yBAAauB,GAAb;AACAtB,qBAASA,OAAOuB,GAAP,CAAW,UAACnB,KAAD,EAAW;AAC3B,oBAAIS,UAAU;AACVC,0BAAMV,MAAMU,IADF;AAEVE,2BAAOZ,MAAMoB;AAFH,iBAAd;AAIA,oBAAI,eAAepB,MAAMU,IAAzB,EAA+B;AAC3B;AACAD,4BAAQM,IAAR,GAAeN,QAAQG,KAAR,CAAcS,MAAd,CAAqB,CAArB,EAAwBZ,QAAQG,KAAR,CAAcU,MAAd,GAAuB,CAA/C,CAAf;AACH;AACD,uBAAOb,OAAP;AACH,aAVQ,CAAT;AAWA,mBAAO,IAAIN,YAAJ,CAAiBP,MAAjB,CAAP;AACH;;;;;;AAEL2B,OAAOC,OAAP,GAAiBrB,YAAjB;AACA","file":"urlStructure.js","sourcesContent":["\"use strict\";\nlet core = require(\"tokenizer2/core\");\n/**\n * Contains a URL tokenizer that is capable of tokenizing a URL structure string.\n *\n * @type {Object}\n */\nvar urlTokenizer;\n/**\n * Contains the tokens as parsed by the urlTokenizer.\n *\n * @type {Object[]}\n */\nlet tokens;\n/**\n * Matches static parts of a URL, because we use %% as placeholder markers we don't support percentage signs in the URL.\n *\n * @type {RegExp}\n */\nlet staticRegex = /^[^%]+$/;\n/**\n * Matches variable parts of a URL, format is %%placeholder%%.\n *\n * @type {RegExp}\n */\nlet variableRegex = /^%%[^%]+%%$/;\n/**\n * Creates a tokenizer to tokenize HTML into blocks.\n *\n * @since 1.8.0\n *\n * @returns {void}\n */\nfunction createTokenizer() {\n    tokens = [];\n    urlTokenizer = core(function (token) {\n        tokens.push(token);\n    });\n    urlTokenizer.addRule(staticRegex, \"static\");\n    urlTokenizer.addRule(variableRegex, \"variable\");\n}\n/**\n * Represents a URL structure. Placeholders can be defined using %%placeholder%% and can later be filled using the `applyData` method.\n *\n * @since 1.8.0\n */\nclass UrlStructure {\n    /**\n     * Sets the structure to the passed structure.\n     *\n     * @since 1.8.0\n     *\n     * @param {Array} structure The structure of the URL.\n     */\n    constructor(structure) {\n        this._structure = structure;\n    }\n    /**\n     * Builds a URL from this URL structure and the given data.\n     *\n     * @since 1.8.0\n     *\n     * @param {Object} data A key value store of all the variable parts of the URL structure.\n     * @returns {string} A URL with all variables parts filled.\n     */\n    buildUrl(data) {\n        return this._structure.reduce((url, urlPart) => {\n            if (\"variable\" === urlPart.type) {\n                urlPart = this._buildVariablePart(data, urlPart);\n            }\n            else {\n                urlPart = urlPart.value;\n            }\n            return url + urlPart;\n        }, \"\");\n    }\n    /**\n     * Builds a URL part for a small part of the URL.\n     *\n     * @since 1.8.0\n     *\n     * @private\n     *\n     * @param {Object} data The data to fill the URL parts.\n     * @param {Object} urlPartConfig The config for the URL part.\n     * @returns {string} A URL part.\n     */\n    _buildVariablePart(data, urlPartConfig) {\n        if (!data.hasOwnProperty(urlPartConfig.name)) {\n            throw new TypeError('Data doesn\\'t have required property \"' + urlPartConfig.name + '\"');\n        }\n        return data[urlPartConfig.name];\n    }\n    /**\n     * Returns the structure.\n     *\n     * @since 1.8.0\n     *\n     * @returns {Array} The structure of the URL.\n     */\n    getStructure() {\n        return this._structure;\n    }\n    /**\n     * Parses a URL for static and variable parts. Variables should be surrounded by double percentage signs.\n     *\n     * @since 1.8.0\n     *\n     * @param {string} url The URL to parse.\n     * @returns {UrlStructure} The parsed url structure.\n     */\n    static fromUrl(url) {\n        createTokenizer();\n        urlTokenizer.onText(url);\n        urlTokenizer.end();\n        tokens = tokens.map((token) => {\n            let urlPart = {\n                type: token.type,\n                value: token.src,\n            };\n            if (\"variable\" === token.type) {\n                // Strip the %% at the start and the end of the variable URL part.\n                urlPart.name = urlPart.value.substr(2, urlPart.value.length - 4);\n            }\n            return urlPart;\n        });\n        return new UrlStructure(tokens);\n    }\n}\nmodule.exports = UrlStructure;\n//# sourceMappingURL=urlStructure.js.map"]}