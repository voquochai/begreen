{"version":3,"sources":["../../../js/stringProcessing/getLinkType.js"],"names":["urlHelper","require","module","exports","text","url","anchorUrl","getFromAnchorTag","protocol","getProtocol","protocolIsHttpScheme","isRelativeFragmentURL","isInternalLink","getHostname"],"mappings":"AAAA;AACA;;AACA,IAAMA,YAAYC,QAAQ,OAAR,CAAlB;AACA;;;;;;;AAOAC,OAAOC,OAAP,GAAiB,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAClC,QAAMC,YAAYN,UAAUO,gBAAV,CAA2BH,IAA3B,CAAlB;AACA;;;;;AAKA,QAAMI,WAAWR,UAAUS,WAAV,CAAsBH,SAAtB,CAAjB;AACA,QAAIE,YAAY,CAACR,UAAUU,oBAAV,CAA+BF,QAA/B,CAAb,IACAR,UAAUW,qBAAV,CAAgCL,SAAhC,CADJ,EACgD;AAC5C,eAAO,OAAP;AACH;AACD,QAAIN,UAAUY,cAAV,CAAyBN,SAAzB,EAAoCN,UAAUa,WAAV,CAAsBR,GAAtB,CAApC,CAAJ,EAAqE;AACjE,eAAO,UAAP;AACH;AACD,WAAO,UAAP;AACH,CAhBD;AAiBA","file":"getLinkType.js","sourcesContent":["\"use strict\";\n/** @module stringProcess/getLinkType */\nconst urlHelper = require(\"./url\");\n/**\n * Determines the type of link.\n *\n * @param {string} text String with anchor tag.\n * @param {string} url URL to match against.\n * @returns {string} The link type (other, external or internal).\n */\nmodule.exports = function (text, url) {\n    const anchorUrl = urlHelper.getFromAnchorTag(text);\n    /**\n     * A link is \"Other\" if:\n     * - The protocol is neither null, nor http, nor https.\n     * - The link is a relative fragment URL (starts with #), because it won't navigate to another page.\n     */\n    const protocol = urlHelper.getProtocol(anchorUrl);\n    if (protocol && !urlHelper.protocolIsHttpScheme(protocol) ||\n        urlHelper.isRelativeFragmentURL(anchorUrl)) {\n        return \"other\";\n    }\n    if (urlHelper.isInternalLink(anchorUrl, urlHelper.getHostname(url))) {\n        return \"internal\";\n    }\n    return \"external\";\n};\n//# sourceMappingURL=getLinkType.js.map"]}