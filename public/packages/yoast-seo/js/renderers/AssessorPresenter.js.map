{"version":3,"sources":["../../../js/renderers/AssessorPresenter.js"],"names":["forEach","require","isNumber","isObject","isUndefined","difference","template","assessmentPresenterResult","scoreToRating","createConfig","AssessorPresenter","args","keyword","assessor","i18n","output","targets","overall","presenterConfig","_disableMarkerButtons","_activeMarker","prototype","setKeyword","configHasProperty","property","hasOwnProperty","getIndicator","rating","className","getIndicatorColorClass","screenReaderText","getIndicatorScreenReaderText","fullText","getIndicatorFullText","screenReaderReadabilityText","getIndicatorScreenReaderReadabilityText","resultToRating","result","score","getIndividualRatings","ratings","validResults","sort","getValidResults","mappedResults","map","item","key","addRating","bind","excludeFromResults","results","exclude","unsortables","getUndefinedScores","sortables","a","b","concat","filter","indicator","text","identifier","getIdentifier","hasMarker","marker","getMarker","getOverallRating","overallScore","markAssessment","removeAllMarks","render","disableMarker","disableMarkerButtons","enableMarkerButtons","addMarkerEventHandler","container","document","getElementById","markButton","getElementsByClassName","addEventListener","renderIndividualRatings","renderOverallRating","bindMarkButtons","scores","getSpecificMarker","getPaper","outputTarget","innerHTML","disabledMarkText","dgettext","markInText","removeMarksInText","activeMarker","markerButtonsDisabled","overallRating","calculateOverallScore","overallRatingElement","module","exports"],"mappings":"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","file":"AssessorPresenter.js","sourcesContent":["\"use strict\";\nvar forEach = require(\"lodash/forEach\");\nvar isNumber = require(\"lodash/isNumber\");\nvar isObject = require(\"lodash/isObject\");\nvar isUndefined = require(\"lodash/isUndefined\");\nvar difference = require(\"lodash/difference\");\nvar template = require(\"../templates.js\").assessmentPresenterResult;\nvar scoreToRating = require(\"../interpreters/scoreToRating.js\");\nvar createConfig = require(\"../config/presenter.js\");\n/**\n * Constructs the AssessorPresenter.\n *\n * @param {Object} args A list of arguments to use in the presenter.\n * @param {object} args.targets The HTML elements to render the output to.\n * @param {string} args.targets.output The HTML element to render the individual ratings out to.\n * @param {string} args.targets.overall The HTML element to render the overall rating out to.\n * @param {string} args.keyword The keyword to use for checking, when calculating the overall rating.\n * @param {SEOAssessor} args.assessor The Assessor object to retrieve assessment results from.\n * @param {Jed} args.i18n The translation object.\n *\n * @constructor\n */\nvar AssessorPresenter = function (args) {\n    this.keyword = args.keyword;\n    this.assessor = args.assessor;\n    this.i18n = args.i18n;\n    this.output = args.targets.output;\n    this.overall = args.targets.overall || \"overallScore\";\n    this.presenterConfig = createConfig(args.i18n);\n    this._disableMarkerButtons = false;\n    this._activeMarker = false;\n};\n/**\n * Sets the keyword.\n *\n * @param {string} keyword The keyword to use.\n * @returns {void}\n */\nAssessorPresenter.prototype.setKeyword = function (keyword) {\n    this.keyword = keyword;\n};\n/**\n * Checks whether or not a specific property exists in the presenter configuration.\n *\n * @param {string} property The property name to search for.\n * @returns {boolean} Whether or not the property exists.\n */\nAssessorPresenter.prototype.configHasProperty = function (property) {\n    return this.presenterConfig.hasOwnProperty(property);\n};\n/**\n * Gets a fully formatted indicator object that can be used.\n *\n * @param {string} rating The rating to use.\n * @returns {Object} An object containing the class, the screen reader text, and the full text.\n */\nAssessorPresenter.prototype.getIndicator = function (rating) {\n    return {\n        className: this.getIndicatorColorClass(rating),\n        screenReaderText: this.getIndicatorScreenReaderText(rating),\n        fullText: this.getIndicatorFullText(rating),\n        screenReaderReadabilityText: this.getIndicatorScreenReaderReadabilityText(rating),\n    };\n};\n/**\n * Gets the indicator color class from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} String containing the CSS class to be used.\n */\nAssessorPresenter.prototype.getIndicatorColorClass = function (rating) {\n    if (!this.configHasProperty(rating)) {\n        return \"\";\n    }\n    return this.presenterConfig[rating].className;\n};\n/**\n * Get the indicator screen reader text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the screen reader text to be used.\n */\nAssessorPresenter.prototype.getIndicatorScreenReaderText = function (rating) {\n    if (!this.configHasProperty(rating)) {\n        return \"\";\n    }\n    return this.presenterConfig[rating].screenReaderText;\n};\n/**\n * Get the indicator screen reader readability text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the screen reader readability text to be used.\n */\nAssessorPresenter.prototype.getIndicatorScreenReaderReadabilityText = function (rating) {\n    if (!this.configHasProperty(rating)) {\n        return \"\";\n    }\n    return this.presenterConfig[rating].screenReaderReadabilityText;\n};\n/**\n * Get the indicator full text from the presenter configuration, if it exists.\n *\n * @param {string} rating The rating to check against the config.\n * @returns {string} Translated string containing the full text to be used.\n */\nAssessorPresenter.prototype.getIndicatorFullText = function (rating) {\n    if (!this.configHasProperty(rating)) {\n        return \"\";\n    }\n    return this.presenterConfig[rating].fullText;\n};\n/**\n * Adds a rating based on the numeric score.\n *\n * @param {Object} result Object based on the Assessment result. Requires a score property to work.\n * @returns {Object} The Assessment result object with the rating added.\n */\nAssessorPresenter.prototype.resultToRating = function (result) {\n    if (!isObject(result)) {\n        return \"\";\n    }\n    result.rating = scoreToRating(result.score);\n    return result;\n};\n/**\n * Takes the individual assessment results, sorts and rates them.\n *\n * @returns {Object} Object containing all the individual ratings.\n */\nAssessorPresenter.prototype.getIndividualRatings = function () {\n    var ratings = {};\n    var validResults = this.sort(this.assessor.getValidResults());\n    var mappedResults = validResults.map(this.resultToRating);\n    forEach(mappedResults, function (item, key) {\n        ratings[key] = this.addRating(item);\n    }.bind(this));\n    return ratings;\n};\n/**\n * Excludes items from the results that are present in the exclude array.\n *\n * @param {Array} results Array containing the items to filter through.\n * @param {Array} exclude Array of results to exclude.\n * @returns {Array} Array containing items that remain after exclusion.\n */\nAssessorPresenter.prototype.excludeFromResults = function (results, exclude) {\n    return difference(results, exclude);\n};\n/**\n * Sorts results based on their score property and always places items considered to be unsortable, at the top.\n *\n * @param {Array} results Array containing the results that need to be sorted.\n * @returns {Array} Array containing the sorted results.\n */\nAssessorPresenter.prototype.sort = function (results) {\n    var unsortables = this.getUndefinedScores(results);\n    var sortables = this.excludeFromResults(results, unsortables);\n    sortables.sort(function (a, b) {\n        return a.score - b.score;\n    });\n    return unsortables.concat(sortables);\n};\n/**\n * Returns a subset of results that have an undefined score or a score set to zero.\n *\n * @param {Array} results The results to filter through.\n * @returns {Array} A subset of results containing items with an undefined score or where the score is zero.\n */\nAssessorPresenter.prototype.getUndefinedScores = function (results) {\n    return results.filter(function (result) {\n        return isUndefined(result.score) || result.score === 0;\n    });\n};\n/**\n * Creates a rating object based on the item that is being passed.\n *\n * @param {AssessmentResult} item The item to check and create a rating object from.\n * @returns {Object} Object containing a parsed item, including a colored indicator.\n */\nAssessorPresenter.prototype.addRating = function (item) {\n    var indicator = this.getIndicator(item.rating);\n    indicator.text = item.text;\n    indicator.identifier = item.getIdentifier();\n    if (item.hasMarker()) {\n        indicator.marker = item.getMarker();\n    }\n    return indicator;\n};\n/**\n * Calculates the overall rating score based on the overall score.\n *\n * @param {Number} overallScore The overall score to use in the calculation.\n * @returns {Object} The rating based on the score.\n */\nAssessorPresenter.prototype.getOverallRating = function (overallScore) {\n    var rating = 0;\n    if (this.keyword === \"\") {\n        return this.resultToRating({ score: rating });\n    }\n    if (isNumber(overallScore)) {\n        rating = (overallScore / 10);\n    }\n    return this.resultToRating({ score: rating });\n};\n/**\n * Mark with a given marker. This will set the active marker to the correct value.\n *\n * @param {string} identifier The identifier for the assessment/marker.\n * @param {Function} marker The marker function.\n * @returns {void}\n */\nAssessorPresenter.prototype.markAssessment = function (identifier, marker) {\n    if (this._activeMarker === identifier) {\n        this.removeAllMarks();\n        this._activeMarker = false;\n    }\n    else {\n        marker();\n        this._activeMarker = identifier;\n    }\n    this.render();\n};\n/**\n * Disables the currently active marker in the UI.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.disableMarker = function () {\n    this._activeMarker = false;\n    this.render();\n};\n/**\n * Disables the marker buttons.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.disableMarkerButtons = function () {\n    this._disableMarkerButtons = true;\n    this.render();\n};\n/**\n * Enables the marker buttons.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.enableMarkerButtons = function () {\n    this._disableMarkerButtons = false;\n    this.render();\n};\n/**\n * Adds an event listener for the marker button\n *\n * @param {string} identifier The identifier for the assessment the marker belongs to.\n * @param {Function} marker The marker function that can mark the assessment in the text.\n * @returns {void}\n */\nAssessorPresenter.prototype.addMarkerEventHandler = function (identifier, marker) {\n    var container = document.getElementById(this.output);\n    var markButton = container.getElementsByClassName(\"js-assessment-results__mark-\" + identifier)[0];\n    markButton.addEventListener(\"click\", this.markAssessment.bind(this, identifier, marker));\n};\n/**\n * Renders out both the individual and the overall ratings.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.render = function () {\n    this.renderIndividualRatings();\n    this.renderOverallRating();\n};\n/**\n * Adds event handlers to the mark buttons\n *\n * @param {Array} scores The list of rendered scores.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.bindMarkButtons = function (scores) {\n    // Make sure the button works for every score with a marker.\n    forEach(scores, function (score) {\n        if (score.hasOwnProperty(\"marker\")) {\n            this.addMarkerEventHandler(score.identifier, score.marker);\n        }\n    }.bind(this));\n};\n/**\n * Removes all marks currently on the text\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.removeAllMarks = function () {\n    var marker = this.assessor.getSpecificMarker();\n    marker(this.assessor.getPaper(), []);\n};\n/**\n * Renders out the individual ratings.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.renderIndividualRatings = function () {\n    var outputTarget = document.getElementById(this.output);\n    var scores = this.getIndividualRatings();\n    outputTarget.innerHTML = template({\n        scores: scores,\n        i18n: {\n            disabledMarkText: this.i18n.dgettext(\"js-text-analysis\", \"Marks are disabled in current view\"),\n            markInText: this.i18n.dgettext(\"js-text-analysis\", \"Mark this result in the text\"),\n            removeMarksInText: this.i18n.dgettext(\"js-text-analysis\", \"Remove marks in the text\"),\n        },\n        activeMarker: this._activeMarker,\n        markerButtonsDisabled: this._disableMarkerButtons,\n    });\n    this.bindMarkButtons(scores);\n};\n/**\n * Renders out the overall rating.\n *\n * @returns {void}\n */\nAssessorPresenter.prototype.renderOverallRating = function () {\n    var overallRating = this.getOverallRating(this.assessor.calculateOverallScore());\n    var overallRatingElement = document.getElementById(this.overall);\n    if (!overallRatingElement) {\n        return;\n    }\n    overallRatingElement.className = \"overallScore \" + this.getIndicatorColorClass(overallRating.rating);\n};\nmodule.exports = AssessorPresenter;\n//# sourceMappingURL=AssessorPresenter.js.map"]}